diff --git a/.gitignore b/.gitignore
index 02dbb2b..92ded38 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,3 +11,9 @@ vivado*.str
 
 # Ignore build directory
 build
+
+src/box_250mhz/reconic
+src/box_250mhz/vivado_ip
+src/box_250mhz/build.tcl
+src/box_250mhz/rdma_onic_plugin.sv
+src/box_250mhz/reconic_address_map.sv
\ No newline at end of file
diff --git a/board_files/Xilinx/au55c/LICENSE b/board_files/Xilinx/au55c/LICENSE
new file mode 100644
index 0000000..9c30aad
--- /dev/null
+++ b/board_files/Xilinx/au55c/LICENSE
@@ -0,0 +1,15 @@
+#########################################################################
+Copyright (C) 2021, Xilinx Inc - All rights reserved
+
+Licensed under the Apache License, Version 2.0 (the "License"). You may
+not use this file except in compliance with the License. A copy of the
+License is located at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+License for the specific language governing permissions and limitations
+under the License.
+#########################################################################
diff --git a/board_files/Xilinx/au55c/board.xml b/board_files/Xilinx/au55c/board.xml
new file mode 100644
index 0000000..7295ee1
--- /dev/null
+++ b/board_files/Xilinx/au55c/board.xml
@@ -0,0 +1,1266 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
+<board schema_version="2.2" vendor="xilinx.com" name="au55c" display_name="Alveo U55C Data Center Accelerator Card" url="http://www.xilinx.com/U55C" supports_ced="false" preset_file = "preset.xml">
+  <images>
+    <image name="au55c_image.png" display_name="Alveo U55C Data Center Accelerator Card" sub_type="board" resolution="high">
+      <description>Alveo U55C Data Center Accelerator Card</description>
+    </image>
+  </images>
+
+  <compatible_board_revisions>
+    <revision id="0">1.0</revision>
+  </compatible_board_revisions>
+
+  <file_version>1.0</file_version>
+
+  <description>Alveo U55C Data Center Accelerator Card </description>
+
+  <parameters>
+    <parameter name="heat_sink_type" value="medium" value_type="string"/>
+    <parameter name="heat_sink_temperature" value_type="range" value_min="20.0" value_max="30.0"/>
+  </parameters>
+
+  <jumpers>
+  </jumpers>
+
+  <power_rails>
+    <power_rail name="0V85_VCCINT" is_direct="TRUE">
+      <supply name="VCCINT"/>
+    </power_rail>
+    <power_rail name="0V85_VCCINT_IO" is_direct="TRUE">
+      <supply name="VCCINT_IO"/>
+      <supply name="VCCBRAM"/>
+    </power_rail>
+    <power_rail name="0V9_AVCC" is_direct="TRUE">
+      <supply name="MGTYAVCC"/>
+    </power_rail>
+    <power_rail name="1V2_AVTT" is_direct="TRUE">
+      <supply name="MGTYAVTT"/>
+    </power_rail>
+    <power_rail name="1V2_HBM" is_direct="TRUE">
+      <supply name="VCC_HBM"/>
+    </power_rail>
+    <power_rail name="2V5_VPP" is_direct="TRUE">
+      <supply name="VCCAUX_HBM"/>
+    </power_rail>
+    <power_rail name="1V8" is_direct="TRUE">
+      <supply name="VCCAUX"/>
+      <supply name="VCCAUX_IO"/>
+      <supply name="MGTYVCCAUX"/>
+      <supply name="VCCO18"/>
+      <supply name="VCCADC"/>
+    </power_rail>
+  </power_rails>
+
+  <data_properties>
+    <data_property_group name="OPERATING_CONDITIONS">
+
+      <data_property_group name="VOLTAGE">
+        <data_property name="0V85_VCCINT" value="0.85"/>
+        <data_property name="0V85_VCCINT_IO" value="0.85"/>
+        <data_property name="0V9_AVCC" value="0.9"/>
+        <data_property name="1V2_AVTT" value="1.2"/>
+        <data_property name="1V8" value="1.8"/>
+        <data_property name="1V2_HBM" value="1.2"/>
+        <data_property name="2V5_VPP" value="2.5"/>
+      </data_property_group>
+
+      <data_property_group name="SUPPLY_CURRENT_BUDGET">
+        <data_property name="0V85_VCCINT" value="100"/>
+        <data_property name="0V85_VCCINT_IO" value="30"/>
+        <data_property name="0V9_AVCC " value="4"/>
+        <data_property name="1V2_AVTT " value="12"/>
+        <data_property name="1V2_HBM " value="80"/>
+        <data_property name="2V5_VPP" value="0.3"/>
+        <data_property name="1V8" value="4"/>
+      </data_property_group>
+
+      <data_property name="THETAJA" value="0.75"/>
+      <data_property name="AMBIENT_TEMP" value="55"/>
+      <data_property name="DESIGN_POWER_BUDGET" value="123"/>
+
+    </data_property_group>
+  </data_properties>
+
+  <components>
+
+    <component name="part0" display_name="XCU55C FPGA" type="fpga" part_name="xcu55c-fsvh2892-2L-e" pin_map_file="part0_pins.xml" vendor="xilinx" spec_url="http://www.xilinx.com/U55C">
+      <description>XCU55C FPGA</description>
+
+
+    <interfaces>
+
+     <interface mode="slave" name="pcie_perstn" type="xilinx.com:signal:reset_rtl:1.0" of_component="pci_express">
+      <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+       </preferred_ips>
+          <port_maps>
+            <port_map logical_port="RST" physical_port="pcie_perstn_rst" dir="in">
+              <pin_maps>
+                <pin_map port_index="0" component_pin="PCIE_PERST_LS_65"/>
+              </pin_maps>
+            </port_map>
+          </port_maps>
+          <parameters>
+            <parameter name="rst_polarity" value="0" />
+            <parameter name="type" value="PCIE_PERST" />
+          </parameters>
+        </interface>
+
+    <interface mode="master" name="hbm_cattrip" type="xilinx.com:interface:gpio_rtl:1.0" of_component="hbm_cattrip">
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="hbm" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="axi_gpio" order="1"/>
+          </preferred_ips>
+          <port_maps>
+            <port_map logical_port="O" physical_port="hbm_cattrip" dir="out">
+              <pin_maps>
+                <pin_map port_index="0" component_pin="HBM_CATTRIP_LS"/>
+              </pin_maps>
+            </port_map>
+          </port_maps>
+        </interface>
+
+        <!--
+    <interface mode="master" name="rs232_fpga_msp" type="xilinx.com:interface:uart_rtl:1.0" of_component="rs232_fpga_msp">
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="axi_uart16550" order="0"/>
+          </preferred_ips>
+          <port_maps>
+            <port_map logical_port="TxD" physical_port="rs232_uart_msp_txd" dir="out">
+            </port_map>
+            <port_map logical_port="RxD" physical_port="rs232_uart_msp_rxd" dir="in">
+            </port_map>
+          </port_maps>
+        </interface>
+
+    <interface mode="master" name="fpga_uart0" type="xilinx.com:interface:uart_rtl:1.0" of_component="fpga_uart0">
+          <port_maps>
+            <port_map logical_port="TxD" physical_port="rs232_uart_msp_txd" dir="out">
+            </port_map>
+            <port_map logical_port="RxD" physical_port="rs232_uart_msp_rxd" dir="in">
+            </port_map>
+          </port_maps>
+        </interface>
+      -->
+
+      <!-- Si5394 Satellite Controlelr Pins -->
+      <interface mode="master" name="reset_gpio2_si5394" type="xilinx.com:interface:gpio_rtl:1.0" of_component="reset_si5394" preset_proc="reset2_si5394_preset">
+        <preferred_ips>
+          <preferred_ip vendor="xilinx.com" library="ip" name="axi_gpio" order="0"/>
+        </preferred_ips>
+        <port_maps>
+          <port_map logical_port="TRI_O" physical_port="SI_RSTBB" dir="out">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="SI_RSTBB"/>
+            </pin_maps>
+          </port_map>
+        </port_maps>
+      </interface>
+
+      <interface mode="master" name="gpio_si5394" type="xilinx.com:interface:gpio_rtl:1.0" of_component="gpio_si5394">
+        <preferred_ips>
+          <preferred_ip vendor="xilinx.com" library="ip" name="axi_gpio" order="0"/>
+        </preferred_ips>
+        <port_maps>
+          <port_map logical_port="TRI_I" physical_port="SI_INTRB_PLL_LOCK_IN_LOS" dir="in" left="2" right="0">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="SI_INTRB"/>
+              <pin_map port_index="1" component_pin="SI_PLL_LOCK"/>
+              <pin_map port_index="2" component_pin="SI_IN_LOS"/>
+            </pin_maps>
+          </port_map>
+        </port_maps>
+      </interface>
+
+      <interface mode="master" name="msp_gpio" type="xilinx.com:interface:gpio_rtl:1.0" of_component="msp_gpio">
+        <preferred_ips>
+          <preferred_ip vendor="xilinx.com" library="ip" name="axi_gpio" order="0"/>
+        </preferred_ips>
+        <port_maps>
+          <port_map logical_port="TRI_I" physical_port="GPIO_MSP_i" dir="in" left="1" right="0">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="MSP_GPIO0"/>
+              <pin_map port_index="1" component_pin="MSP_GPIO1"/>
+            </pin_maps>
+          </port_map>
+        </port_maps>
+      </interface>
+
+      <interface mode="master" name="iic_si5394" type="xilinx.com:interface:iic_rtl:1.0" of_component="iic_si5394">
+        <preferred_ips>
+          <preferred_ip vendor="xilinx.com" library="ip" name="axi_iic" order="0"/>
+        </preferred_ips>
+        <port_maps>
+          <port_map logical_port="SDA_I" physical_port="iic_si5394_sda_i" dir="inout">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="I2C_SI5394_SDA"/>
+            </pin_maps>
+          </port_map>
+          <port_map logical_port="SDA_O" physical_port="iic_si5394_sda_o" dir="inout">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="I2C_SI5394_SDA"/>
+            </pin_maps>
+          </port_map>
+          <port_map logical_port="SDA_T" physical_port="iic_si5394_sda_t" dir="inout">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="I2C_SI5394_SDA"/>
+            </pin_maps>
+          </port_map>
+          <port_map logical_port="SCL_I" physical_port="iic_si5394_scl_i" dir="inout">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="I2C_SI5394_SCL"/>
+            </pin_maps>
+          </port_map>
+          <port_map logical_port="SCL_O" physical_port="iic_si5394_scl_o" dir="inout">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="I2C_SI5394_SCL"/>
+            </pin_maps>
+          </port_map>
+          <port_map logical_port="SCL_T" physical_port="iic_si5394_scl_t" dir="inout">
+            <pin_maps>
+              <pin_map port_index="0" component_pin="I2C_SI5394_SCL"/>
+            </pin_maps>
+          </port_map>
+        </port_maps>
+      </interface>
+
+
+      <interface mode="slave" name="qsfp0_refclk0" type="xilinx.com:interface:diff_clock_rtl:1.0" of_component="qsfp0">
+          <parameters>
+            <parameter name="frequency" value="161132812"/>
+          </parameters>
+            <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="cmac_usplus" order="3"/>
+            </preferred_ips>
+          <port_maps>
+            <port_map logical_port="CLK_P" physical_port="qsfp0_refclk0_clk_p" dir="in">
+              <pin_maps>
+                <pin_map port_index="0" component_pin="SYNCE_CLK0_P"/>
+              </pin_maps>
+            </port_map>
+            <port_map logical_port="CLK_N" physical_port="qsfp0_refclk0_clk_n" dir="in">
+              <pin_maps>
+                <pin_map port_index="0" component_pin="SYNCE_CLK0_N"/>
+              </pin_maps>
+            </port_map>
+          </port_maps>
+        </interface>
+
+      <interface mode="slave" name="qsfp1_refclk0" type="xilinx.com:interface:diff_clock_rtl:1.0" of_component="qsfp1">
+          <parameters>
+            <parameter name="frequency" value="161132812"/>
+          </parameters>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="cmac_usplus" order="3"/>
+           </preferred_ips>
+          <port_maps>
+            <port_map logical_port="CLK_P" physical_port="qsfp1_refclk0_clk_p" dir="in">
+              <pin_maps>
+                <pin_map port_index="0" component_pin="SYNCE_CLK1_P"/>
+              </pin_maps>
+            </port_map>
+            <port_map logical_port="CLK_N" physical_port="qsfp1_refclk0_clk_n" dir="in">
+              <pin_maps>
+                <pin_map port_index="0" component_pin="SYNCE_CLK1_N"/>
+              </pin_maps>
+            </port_map>
+          </port_maps>
+        </interface>
+
+  <!--
+    <interface mode="slave" name="slr0_freerun_clk" type="xilinx.com:interface:diff_clock_rtl:1.0" of_component="slr0_freerun_clk">
+     <parameters>
+            <parameter name="frequency" value="100000000"/>
+          </parameters>
+          <port_maps>
+            <port_map logical_port="CLK_P" physical_port="slr0_freerun_clk_p" dir="in">
+            </port_map>
+            <port_map logical_port="CLK_N" physical_port="slr0_freerun_clk_n" dir="in">
+            </port_map>
+          </port_maps>
+        </interface>
+
+    <interface mode="slave" name="slr1_freerun_clk" type="xilinx.com:interface:diff_clock_rtl:1.0" of_component="slr1_freerun_clk">
+     <parameters>
+            <parameter name="frequency" value="100000000"/>
+          </parameters>
+          <port_maps>
+            <port_map logical_port="CLK_P" physical_port="slr1_freerun_clk_p" dir="in">
+            </port_map>
+            <port_map logical_port="CLK_N" physical_port="slr1_freerun_clk_n" dir="in">
+            </port_map>
+          </port_maps>
+        </interface>
+      -->
+
+    <interface mode="slave" name="pcie_refclk" type="xilinx.com:interface:diff_clock_rtl:1.0" of_component="pcie_refclk" preset_proc="pcie_refclk_preset">
+      <parameters>
+        <parameter name="frequency" value="100000000"/>
+      </parameters>
+      <preferred_ips>
+        <preferred_ip vendor="xilinx.com" library="ip" name="util_ds_buf" order="0"/>
+        <preferred_ip vendor="xilinx.com" library="ip" name="clk_wiz" order="1"/>
+      </preferred_ips>
+      <port_maps>
+        <port_map logical_port="CLK_P" physical_port="pcie_mgt_clk_p" dir="in">
+          <pin_maps>
+            <pin_map port_index="0" component_pin="PCIE_REFCLK1_P"/>
+          </pin_maps>
+        </port_map>
+        <port_map logical_port="CLK_N" physical_port="pcie_mgt_clk_n" dir="in">
+          <pin_maps>
+            <pin_map port_index="0" component_pin="PCIE_REFCLK1_N"/>
+          </pin_maps>
+        </port_map>
+      </port_maps>
+    </interface>
+
+    <interface mode="master" name="pci_express_x4" type="xilinx.com:interface:pcie_7x_mgt_rtl:1.0" of_component="pci_express" preset_proc="pciex4_preset">
+          <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus" order="2"/>
+          </preferred_ips>
+          <port_maps>
+            <port_map logical_port="txn" physical_port="pcie_tx0_nx4" dir="out" left="3" right="0">
+                <pin_maps>
+                  <pin_map port_index="0" component_pin="pcie_tx0_n"/>
+                  <pin_map port_index="1" component_pin="pcie_tx1_n"/>
+                  <pin_map port_index="2" component_pin="pcie_tx2_n"/>
+                  <pin_map port_index="3" component_pin="pcie_tx3_n"/>
+                </pin_maps>
+            </port_map>
+            <port_map logical_port="rxn" physical_port="pcie_rx0_nx4" dir="in" left="3" right="0">
+                <pin_maps>
+                  <pin_map port_index="0" component_pin="pcie_rx0_n"/>
+                  <pin_map port_index="1" component_pin="pcie_rx1_n"/>
+                  <pin_map port_index="2" component_pin="pcie_rx2_n"/>
+                  <pin_map port_index="3" component_pin="pcie_rx3_n"/>
+                </pin_maps>
+            </port_map>
+            <port_map logical_port="txp" physical_port="pcie_tx0_px4" dir="out" left="3" right="0">
+                <pin_maps>
+                  <pin_map port_index="0" component_pin="pcie_tx0_p"/>
+                  <pin_map port_index="1" component_pin="pcie_tx1_p"/>
+                  <pin_map port_index="2" component_pin="pcie_tx2_p"/>
+                  <pin_map port_index="3" component_pin="pcie_tx3_p"/>
+                </pin_maps>
+            </port_map>
+            <port_map logical_port="rxp" physical_port="pcie_rx0_px4" dir="in" left="3" right="0">
+                <pin_maps>
+                  <pin_map port_index="0" component_pin="pcie_rx0_p"/>
+                  <pin_map port_index="1" component_pin="pcie_rx1_p"/>
+                  <pin_map port_index="2" component_pin="pcie_rx2_p"/>
+                  <pin_map port_index="3" component_pin="pcie_rx3_p"/>
+                </pin_maps>
+            </port_map>
+          </port_maps>
+          <parameters>
+            <parameter name="block_location" value="PCIE4C_X1Y1" />
+          </parameters>
+        </interface>
+
+    <interface mode="master" name="pci_express_x8" type="xilinx.com:interface:pcie_7x_mgt_rtl:1.0" of_component="pci_express" preset_proc="pciex8_preset">
+          <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus" order="2"/>
+          </preferred_ips>
+          <port_maps>
+            <port_map logical_port="txn" physical_port="pcie_tx0_nx8" dir="out" left="7" right="0">
+              <pin_maps>
+                  <pin_map port_index="0" component_pin="pcie_tx0_n"/>
+                  <pin_map port_index="1" component_pin="pcie_tx1_n"/>
+                  <pin_map port_index="2" component_pin="pcie_tx2_n"/>
+                  <pin_map port_index="3" component_pin="pcie_tx3_n"/>
+                  <pin_map port_index="4" component_pin="pcie_tx4_n"/>
+                  <pin_map port_index="5" component_pin="pcie_tx5_n"/>
+                  <pin_map port_index="6" component_pin="pcie_tx6_n"/>
+                  <pin_map port_index="7" component_pin="pcie_tx7_n"/>
+                </pin_maps>
+            </port_map>
+            <port_map logical_port="rxn" physical_port="pcie_rx0_nx8" dir="in" left="7" right="0">
+              <pin_maps>
+                  <pin_map port_index="0" component_pin="pcie_rx0_n"/>
+                  <pin_map port_index="1" component_pin="pcie_rx1_n"/>
+                  <pin_map port_index="2" component_pin="pcie_rx2_n"/>
+                  <pin_map port_index="3" component_pin="pcie_rx3_n"/>
+                  <pin_map port_index="4" component_pin="pcie_rx4_n"/>
+                  <pin_map port_index="5" component_pin="pcie_rx5_n"/>
+                  <pin_map port_index="6" component_pin="pcie_rx6_n"/>
+                  <pin_map port_index="7" component_pin="pcie_rx7_n"/>
+                </pin_maps>
+            </port_map>
+            <port_map logical_port="txp" physical_port="pcie_tx0_px8" dir="out" left="7" right="0">
+                <pin_maps>
+                    <pin_map port_index="0" component_pin="pcie_tx0_p"/>
+                    <pin_map port_index="1" component_pin="pcie_tx1_p"/>
+                    <pin_map port_index="2" component_pin="pcie_tx2_p"/>
+                    <pin_map port_index="3" component_pin="pcie_tx3_p"/>
+                    <pin_map port_index="4" component_pin="pcie_tx4_p"/>
+                    <pin_map port_index="5" component_pin="pcie_tx5_p"/>
+                    <pin_map port_index="6" component_pin="pcie_tx6_p"/>
+                    <pin_map port_index="7" component_pin="pcie_tx7_p"/>
+                  </pin_maps>
+            </port_map>
+            <port_map logical_port="rxp" physical_port="pcie_rx0_px8" dir="in" left="7" right="0">
+                <pin_maps>
+                    <pin_map port_index="0" component_pin="pcie_rx0_p"/>
+                    <pin_map port_index="1" component_pin="pcie_rx1_p"/>
+                    <pin_map port_index="2" component_pin="pcie_rx2_p"/>
+                    <pin_map port_index="3" component_pin="pcie_rx3_p"/>
+                    <pin_map port_index="4" component_pin="pcie_rx4_p"/>
+                    <pin_map port_index="5" component_pin="pcie_rx5_p"/>
+                    <pin_map port_index="6" component_pin="pcie_rx6_p"/>
+                    <pin_map port_index="7" component_pin="pcie_rx7_p"/>
+                  </pin_maps>
+            </port_map>
+          </port_maps>
+          <parameters>
+            <parameter name="block_location" value="PCIE4C_X1Y1" />
+          </parameters>
+        </interface>
+
+
+    <interface mode="master" name="pci_express_x16" type="xilinx.com:interface:pcie_7x_mgt_rtl:1.0" of_component="pci_express" preset_proc="pciex16_preset">
+          <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus" order="2"/>
+          </preferred_ips>
+          <port_maps>
+            <port_map logical_port="txn" physical_port="pcie_tx0_nx16" dir="out" left="15" right="0">
+              <pin_maps>
+                <pin_map port_index="0"  component_pin="pcie_tx0_n"/>
+                <pin_map port_index="1"  component_pin="pcie_tx1_n"/>
+                <pin_map port_index="2"  component_pin="pcie_tx2_n"/>
+                <pin_map port_index="3"  component_pin="pcie_tx3_n"/>
+                <pin_map port_index="4"  component_pin="pcie_tx4_n"/>
+                <pin_map port_index="5"  component_pin="pcie_tx5_n"/>
+                <pin_map port_index="6"  component_pin="pcie_tx6_n"/>
+                <pin_map port_index="7"  component_pin="pcie_tx7_n"/>
+                <pin_map port_index="8"  component_pin="pcie_tx8_n"/>
+                <pin_map port_index="9"  component_pin="pcie_tx9_n"/>
+                <pin_map port_index="10" component_pin="pcie_tx10_n"/>
+                <pin_map port_index="11" component_pin="pcie_tx11_n"/>
+                <pin_map port_index="12" component_pin="pcie_tx12_n"/>
+                <pin_map port_index="13" component_pin="pcie_tx13_n"/>
+                <pin_map port_index="14" component_pin="pcie_tx14_n"/>
+                <pin_map port_index="15" component_pin="pcie_tx15_n"/>
+              </pin_maps>
+            </port_map>
+
+            <port_map logical_port="rxn" physical_port="pcie_rx0_nx16" dir="in" left="15" right="0">
+              <pin_maps>
+                <pin_map port_index="0"  component_pin="pcie_rx0_n"/>
+                <pin_map port_index="1"  component_pin="pcie_rx1_n"/>
+                <pin_map port_index="2"  component_pin="pcie_rx2_n"/>
+                <pin_map port_index="3"  component_pin="pcie_rx3_n"/>
+                <pin_map port_index="4"  component_pin="pcie_rx4_n"/>
+                <pin_map port_index="5"  component_pin="pcie_rx5_n"/>
+                <pin_map port_index="6"  component_pin="pcie_rx6_n"/>
+                <pin_map port_index="7"  component_pin="pcie_rx7_n"/>
+                <pin_map port_index="8"  component_pin="pcie_rx8_n"/>
+                <pin_map port_index="9"  component_pin="pcie_rx9_n"/>
+                <pin_map port_index="10" component_pin="pcie_rx10_n"/>
+                <pin_map port_index="11" component_pin="pcie_rx11_n"/>
+                <pin_map port_index="12" component_pin="pcie_rx12_n"/>
+                <pin_map port_index="13" component_pin="pcie_rx13_n"/>
+                <pin_map port_index="14" component_pin="pcie_rx14_n"/>
+                <pin_map port_index="15" component_pin="pcie_rx15_n"/>
+              </pin_maps>
+            </port_map>
+
+            <port_map logical_port="txp" physical_port="pcie_tx0_px16" dir="out" left="15" right="0">
+              <pin_maps>
+                <pin_map port_index="0"  component_pin="pcie_tx0_p"/>
+                <pin_map port_index="1"  component_pin="pcie_tx1_p"/>
+                <pin_map port_index="2"  component_pin="pcie_tx2_p"/>
+                <pin_map port_index="3"  component_pin="pcie_tx3_p"/>
+                <pin_map port_index="4"  component_pin="pcie_tx4_p"/>
+                <pin_map port_index="5"  component_pin="pcie_tx5_p"/>
+                <pin_map port_index="6"  component_pin="pcie_tx6_p"/>
+                <pin_map port_index="7"  component_pin="pcie_tx7_p"/>
+                <pin_map port_index="8"  component_pin="pcie_tx8_p"/>
+                <pin_map port_index="9"  component_pin="pcie_tx9_p"/>
+                <pin_map port_index="10" component_pin="pcie_tx10_p"/>
+                <pin_map port_index="11" component_pin="pcie_tx11_p"/>
+                <pin_map port_index="12" component_pin="pcie_tx12_p"/>
+                <pin_map port_index="13" component_pin="pcie_tx13_p"/>
+                <pin_map port_index="14" component_pin="pcie_tx14_p"/>
+                <pin_map port_index="15" component_pin="pcie_tx15_p"/>
+              </pin_maps>
+            </port_map>
+
+            <port_map logical_port="rxp" physical_port="pcie_rx0_px16" dir="in" left="15" right="0">
+              <pin_maps>
+                <pin_map port_index="0"  component_pin="pcie_rx0_p"/>
+                <pin_map port_index="1"  component_pin="pcie_rx1_p"/>
+                <pin_map port_index="2"  component_pin="pcie_rx2_p"/>
+                <pin_map port_index="3"  component_pin="pcie_rx3_p"/>
+                <pin_map port_index="4"  component_pin="pcie_rx4_p"/>
+                <pin_map port_index="5"  component_pin="pcie_rx5_p"/>
+                <pin_map port_index="6"  component_pin="pcie_rx6_p"/>
+                <pin_map port_index="7"  component_pin="pcie_rx7_p"/>
+                <pin_map port_index="8"  component_pin="pcie_rx8_p"/>
+                <pin_map port_index="9"  component_pin="pcie_rx9_p"/>
+                <pin_map port_index="10" component_pin="pcie_rx10_p"/>
+                <pin_map port_index="11" component_pin="pcie_rx11_p"/>
+                <pin_map port_index="12" component_pin="pcie_rx12_p"/>
+                <pin_map port_index="13" component_pin="pcie_rx13_p"/>
+                <pin_map port_index="14" component_pin="pcie_rx14_p"/>
+                <pin_map port_index="15" component_pin="pcie_rx15_p"/>
+                </pin_maps>
+            </port_map>
+          </port_maps>
+          <parameters>
+            <parameter name="block_location" value="PCIE4C_X1Y1" />
+          </parameters>
+        </interface>
+
+        <interface mode="master" name="qsfp0_1x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp0" preset_proc="qsfp0_1x_preset">
+          <description>1-lane GT interface over QSFP0</description>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+          </preferred_ips>
+          <port_maps>
+                  <port_map logical_port="GTX_N" physical_port="qsfp0_txn1" dir="out" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_TX1_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GTX_P" physical_port="qsfp0_txp1" dir="out" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_TX1_P"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_N" physical_port="qsfp0_rxn1" dir="in" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_RX1_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_P" physical_port="qsfp0_rxp1" dir="in" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_RX1_P"/>
+                    </pin_maps>
+                  </port_map>
+                </port_maps>
+                 <parameters>
+                  <parameter name="gt_loc" value="" />
+                </parameters>
+              </interface>
+
+          <interface mode="master" name="qsfp0_2x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp0" preset_proc="qsfp0_2x_preset">
+            <description>2-lane GT interface over QSFP0</description>
+            <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+             </preferred_ips>
+            <port_maps>
+                    <port_map logical_port="GTX_N" physical_port="qsfp0_txn2" dir="out" left="1" right="0">
+                      <pin_maps>
+                        <pin_map port_index="0" component_pin="QSFP28_0_TX1_N"/>
+                        <pin_map port_index="1" component_pin="QSFP28_0_TX2_N"/>
+                      </pin_maps>
+                    </port_map>
+                    <port_map logical_port="GTX_P" physical_port="qsfp0_txp2" dir="out" left="1" right="0">
+                      <pin_maps>
+                        <pin_map port_index="0" component_pin="QSFP28_0_TX1_P"/>
+                        <pin_map port_index="1" component_pin="QSFP28_0_TX2_P"/>
+                     </pin_maps>
+                    </port_map>
+                    <port_map logical_port="GRX_N" physical_port="qsfp0_rxn2" dir="in" left="1" right="0">
+                      <pin_maps>
+                        <pin_map port_index="0" component_pin="QSFP28_0_RX1_N"/>
+                        <pin_map port_index="1" component_pin="QSFP28_0_RX2_N"/>
+                     </pin_maps>
+                    </port_map>
+                    <port_map logical_port="GRX_P" physical_port="qsfp0_rxp2" dir="in" left="1" right="0">
+                      <pin_maps>
+                        <pin_map port_index="0" component_pin="QSFP28_0_RX1_P"/>
+                        <pin_map port_index="1" component_pin="QSFP28_0_RX2_P"/>
+                      </pin_maps>
+                    </port_map>
+                  </port_maps>
+                    <parameters>
+                    <parameter name="gt_loc" value="" />
+                  </parameters>
+                </interface>
+
+        <interface mode="master" name="qsfp0_3x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp0" preset_proc="qsfp0_3x_preset">
+          <description>3-lane GT interface over QSFP0</description>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+         </preferred_ips>
+          <port_maps>
+                  <port_map logical_port="GTX_N" physical_port="qsfp0_txn3" dir="out" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_TX1_N"/>
+                      <pin_map port_index="1" component_pin="QSFP28_0_TX2_N"/>
+                      <pin_map port_index="2" component_pin="QSFP28_0_TX3_N"/>
+                   </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GTX_P" physical_port="qsfp0_txp3" dir="out" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_TX1_P"/>
+                      <pin_map port_index="1" component_pin="QSFP28_0_TX2_P"/>
+                      <pin_map port_index="2" component_pin="QSFP28_0_TX3_P"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_N" physical_port="qsfp0_rxn3" dir="in" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_RX1_N"/>
+                      <pin_map port_index="1" component_pin="QSFP28_0_RX2_N"/>
+                      <pin_map port_index="2" component_pin="QSFP28_0_RX3_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_P" physical_port="qsfp0_rxp3" dir="in" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_0_RX1_P"/>
+                      <pin_map port_index="1" component_pin="QSFP28_0_RX2_P"/>
+                      <pin_map port_index="2" component_pin="QSFP28_0_RX3_P"/>
+                    </pin_maps>
+                  </port_map>
+                </port_maps>
+                  <parameters>
+                  <parameter name="gt_loc" value="" />
+                </parameters>
+              </interface>
+
+        <interface mode="master" name="qsfp0_4x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp0" preset_proc="qsfp0_4x_preset">
+        <description>4-lane GT interface over QSFP0</description>
+        <preferred_ips>
+          <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+          <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+          <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+          <preferred_ip vendor="xilinx.com" library="ip" name="cmac_usplus" order="3"/>
+        </preferred_ips>
+        <port_maps>
+                <port_map logical_port="GTX_N" physical_port="qsfp0_txn4" dir="out" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_0_TX1_N"/>
+                    <pin_map port_index="1" component_pin="QSFP28_0_TX2_N"/>
+                    <pin_map port_index="2" component_pin="QSFP28_0_TX3_N"/>
+                    <pin_map port_index="3" component_pin="QSFP28_0_TX4_N"/>
+                  </pin_maps>
+                </port_map>
+                <port_map logical_port="GTX_P" physical_port="qsfp0_txp4" dir="out" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_0_TX1_P"/>
+                    <pin_map port_index="1" component_pin="QSFP28_0_TX2_P"/>
+                    <pin_map port_index="2" component_pin="QSFP28_0_TX3_P"/>
+                    <pin_map port_index="3" component_pin="QSFP28_0_TX4_P"/>
+                  </pin_maps>
+                </port_map>
+                <port_map logical_port="GRX_N" physical_port="qsfp0_rxn4" dir="in" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_0_RX1_N"/>
+                    <pin_map port_index="1" component_pin="QSFP28_0_RX2_N"/>
+                    <pin_map port_index="2" component_pin="QSFP28_0_RX3_N"/>
+                    <pin_map port_index="3" component_pin="QSFP28_0_RX4_N"/>
+                  </pin_maps>
+                </port_map>
+                <port_map logical_port="GRX_P" physical_port="qsfp0_rxp4" dir="in" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_0_RX1_P"/>
+                    <pin_map port_index="1" component_pin="QSFP28_0_RX2_P"/>
+                    <pin_map port_index="2" component_pin="QSFP28_0_RX3_P"/>
+                    <pin_map port_index="3" component_pin="QSFP28_0_RX4_P"/>
+                  </pin_maps>
+                </port_map>
+              </port_maps>
+               <parameters>
+                <parameter name="gt_loc" value="" />
+              </parameters>
+            </interface>
+
+        <interface mode="master" name="qsfp1_1x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp1" preset_proc="qsfp1_1x_preset">
+          <description>1-lane GT interface over QSFP0</description>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+          </preferred_ips>
+          <port_maps>
+                  <port_map logical_port="GTX_N" physical_port="qsfp1_txn1" dir="out" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_TX1_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GTX_P" physical_port="qsfp1_txp1" dir="out" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_TX1_P"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_N" physical_port="qsfp1_rxn1" dir="in" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_RX1_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_P" physical_port="qsfp1_rxp1" dir="in" >
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_RX1_P"/>
+                    </pin_maps>
+                  </port_map>
+                </port_maps>
+                  <parameters>
+                  <parameter name="gt_loc" value="" />
+                </parameters>
+              </interface>
+
+        <interface mode="master" name="qsfp1_2x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp1" preset_proc="qsfp1_2x_preset">
+          <description>2-lane GT interface over QSFP0</description>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+            </preferred_ips>
+          <port_maps>
+                  <port_map logical_port="GTX_N" physical_port="qsfp1_txn2" dir="out" left="1" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_TX1_N"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_TX2_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GTX_P" physical_port="qsfp1_txp2" dir="out" left="1" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_TX1_P"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_TX2_P"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_N" physical_port="qsfp1_rxn2" dir="in" left="1" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_RX1_N"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_RX2_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_P" physical_port="qsfp1_rxp2" dir="in" left="1" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_RX1_P"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_RX2_P"/>
+                    </pin_maps>
+                  </port_map>
+                </port_maps>
+                  <parameters>
+                  <parameter name="gt_loc" value="" />
+                </parameters>
+              </interface>
+
+        <interface mode="master" name="qsfp1_3x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp1" preset_proc="qsfp1_3x_preset">
+          <description>3-lane GT interface over QSFP0</description>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+          </preferred_ips>
+          <port_maps>
+                  <port_map logical_port="GTX_N" physical_port="qsfp1_txn3" dir="out" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_TX1_N"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_TX2_N"/>
+                      <pin_map port_index="2" component_pin="QSFP28_1_TX3_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GTX_P" physical_port="qsfp1_txp3" dir="out" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_TX1_P"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_TX2_P"/>
+                      <pin_map port_index="2" component_pin="QSFP28_1_TX3_P"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_N" physical_port="qsfp1_rxn3" dir="in" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_RX1_N"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_RX2_N"/>
+                      <pin_map port_index="2" component_pin="QSFP28_1_RX3_N"/>
+                    </pin_maps>
+                  </port_map>
+                  <port_map logical_port="GRX_P" physical_port="qsfp1_rxp3" dir="in" left="2" right="0">
+                    <pin_maps>
+                      <pin_map port_index="0" component_pin="QSFP28_1_RX1_P"/>
+                      <pin_map port_index="1" component_pin="QSFP28_1_RX2_P"/>
+                      <pin_map port_index="2" component_pin="QSFP28_1_RX3_P"/>
+                    </pin_maps>
+                  </port_map>
+                </port_maps>
+                  <parameters>
+                  <parameter name="gt_loc" value="" />
+                </parameters>
+              </interface>
+
+        <interface mode="master" name="qsfp1_4x" type="xilinx.com:interface:gt_rtl:1.0" of_component="qsfp1" preset_proc="qsfp1_4x_preset">
+        <description>4-lane GT interface over QSFP0</description>
+        <preferred_ips>
+          <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+          <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+          <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+          <preferred_ip vendor="xilinx.com" library="ip" name="cmac_usplus" order="3"/>
+        </preferred_ips>
+        <port_maps>
+                <port_map logical_port="GTX_N" physical_port="qsfp1_txn4" dir="out" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_1_TX1_N"/>
+                    <pin_map port_index="1" component_pin="QSFP28_1_TX2_N"/>
+                    <pin_map port_index="2" component_pin="QSFP28_1_TX3_N"/>
+                    <pin_map port_index="3" component_pin="QSFP28_1_TX4_N"/>
+                  </pin_maps>
+                </port_map>
+                <port_map logical_port="GTX_P" physical_port="qsfp1_txp4" dir="out" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_1_TX1_P"/>
+                    <pin_map port_index="1" component_pin="QSFP28_1_TX2_P"/>
+                    <pin_map port_index="2" component_pin="QSFP28_1_TX3_P"/>
+                    <pin_map port_index="3" component_pin="QSFP28_1_TX4_P"/>
+                  </pin_maps>
+                </port_map>
+                <port_map logical_port="GRX_N" physical_port="qsfp1_rxn4" dir="in" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_1_RX1_N"/>
+                    <pin_map port_index="1" component_pin="QSFP28_1_RX2_N"/>
+                    <pin_map port_index="2" component_pin="QSFP28_1_RX3_N"/>
+                    <pin_map port_index="3" component_pin="QSFP28_1_RX4_N"/>
+                  </pin_maps>
+                </port_map>
+                <port_map logical_port="GRX_P" physical_port="qsfp1_rxp4" dir="in" left="3" right="0">
+                  <pin_maps>
+                    <pin_map port_index="0" component_pin="QSFP28_1_RX1_P"/>
+                    <pin_map port_index="1" component_pin="QSFP28_1_RX2_P"/>
+                    <pin_map port_index="2" component_pin="QSFP28_1_RX3_P"/>
+                    <pin_map port_index="3" component_pin="QSFP28_1_RX4_P"/>
+                  </pin_maps>
+                </port_map>
+              </port_maps>
+                <parameters>
+                  <parameter name="gt_loc" value="" />
+                </parameters>
+            </interface>
+
+    </interfaces>
+
+    </component>
+
+  <component name="hbm_cattrip" display_name="HBM CATTRIP (Mandatory)" type="chip" sub_type="led" major_group="General Purpose Input or Output">
+      <description>HBM_CATTRIP Active hgh indicator to Satellite controller to indicate the HBM has exceded its maximum allowable temperature.</description>
+      <preferred_ips>
+        <preferred_ip vendor="xilinx.com" library="ip" name="hbm" order="0"/>
+      </preferred_ips>
+    </component>
+
+    <!--
+  <component name="rs232_fpga_msp" display_name="MSP_UART" type="chip" sub_type="uart" major_group="Miscellaneous">
+      <description>SC-to-UART Bridge, which allows serial communication to SC </description>
+      <pins>
+        <pin index="0" name="rs232_fpga_uart_msp_TX" iostandard="LVCMOS18"/>
+        <pin index="1" name="rs232_fpga_uart_msp_RX" iostandard="LVCMOS18"/>
+      </pins>
+    </component>
+
+  <component name="fpga_uart0" display_name="FPGA_UART0" type="chip" sub_type="uart" major_group="Miscellaneous">
+      <description>FPGA UART0 </description>
+      <pins>
+        <pin index="0" name="fpga_uart0_TX" iostandard="LVCMOS18"/>
+        <pin index="1" name="fpga_uart0_RX" iostandard="LVCMOS18"/>
+      </pins>
+    </component>
+  -->
+
+  <component name="qsfp0_refclk0" display_name="QSFP reference differential clock input 0" type="chip" sub_type="system_clock" major_group="High Speed Tranceivers" part_name="SI5394" vendor="Silicon Labs" spec_url="www.silabs.com">
+      <description>1.2V LVDS differential 161 MHz oscillator used as a GT reference clock on the board</description>
+      <parameters>
+        <parameter name="frequency" value="161132812"/>
+      </parameters>
+      <preferred_ips>
+        <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+      </preferred_ips>
+    </component>
+
+  <component name="qsfp1_refclk0" display_name="QSFP reference differential clock input 1" type="chip" sub_type="system_clock" major_group="High Speed Tranceivers" part_name="SI5394" vendor="Silicon Labs" spec_url="www.silabs.com">
+      <description>1.2V LVDS differential 161 MHz oscillator used as a GT reference clock on the board</description>
+      <parameters>
+        <parameter name="frequency" value="161132812"/>
+      </parameters>
+      <preferred_ips>
+        <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+      </preferred_ips>
+    </component>
+
+    <!--
+  <component name="slr0_freerun_clk" display_name="100MHz differential clock input" type="chip" sub_type="system_clock" major_group="Clock Sources" part_name="SI53306-B-GM" vendor="Silicon Labs" spec_url="www.silabs.com">
+      <description>1.2V LVDS differential 100 MHz oscillator used as Freerunning differential clock on the board</description>
+      <parameters>
+        <parameter name="frequency" value="100000000"/>
+      </parameters>
+    </component>
+
+    <component name="slr1_freerun_clk" display_name="100MHz differential clock input" type="chip" sub_type="system_clock" major_group="Clock Sources" part_name="SI53306-B-GM" vendor="Silicon Labs" spec_url="www.silabs.com">
+      <description>1.2V LVDS differential 100 MHz oscillator used as Freerunning differential clock on the board</description>
+      <parameters>
+        <parameter name="frequency" value="100000000"/>
+      </parameters>
+    </component>
+  -->
+
+  <component name="reset_si5394" display_name="Reset to SI5394" type="chip" sub_type="led" major_group="General Purpose Input or Output" part_name="SI5394" vendor="Silicon Labs" spec_url="www.silabs.com">
+    <description>GPIO reset to SI5394 (SI_RSTBB) </description>
+  </component>
+
+  <component name="gpio_si5394" display_name="GPIO from SI5394" type="chip" sub_type="led" major_group="General Purpose Input or Output" part_name="SI5394" vendor="Silicon Labs" spec_url="www.silabs.com">
+    <description>GPIO from SI5394 (SI_INTRB, SI_PLL_LOCK, SI_IN_LOS)</description>
+  </component>
+
+  <component name="msp_gpio" display_name="GPIO from MSP" type="chip" sub_type="led" major_group="General Purpose Input or Output">
+    <description>GPIO signals from MSP Satellite Controller to the CMS</description>
+    <preferred_ips>
+      <preferred_ip vendor="xilinx.com" library="ip" name="cms_subsystem" order="0"/>
+    </preferred_ips>
+  </component>
+
+  <component name="iic_si5394" display_name="I2C SI5394" type="chip" sub_type="mux" major_group="Miscellaneous" part_name="SI5394" vendor="Silicon Labs" spec_url="www.silabs.com">
+    <description>I2C to SI5394</description>
+  </component>
+
+  <component name="pcie_refclk" display_name="PCIe MGT reference Clock" type="chip" sub_type="mgt_clock" major_group="High Speed Tranceivers" part_name="pcie_8lane_edge" vendor="Clock" spec_url="">
+      <description>Clock input from PCI Express edge connector</description>
+      <parameters>
+        <parameter name="frequency" value="100000000"/>
+      </parameters>
+      <preferred_ips>
+        <preferred_ip vendor="xilinx.com" library="ip" name="util_ds_buf" order="0"/>
+        <preferred_ip vendor="xilinx.com" library="ip" name="clk_wiz" order="1"/>
+      </preferred_ips>
+    </component>
+
+  <component name="pci_express" display_name="PCI Express" type="chip" sub_type="chip" major_group="High Speed Tranceivers">
+      <description>PCI Express</description>
+
+      <component_modes>
+
+    <component_mode name="pci_express_x4" display_name="pci_express x4 ">
+          <interfaces>
+            <interface name="pci_express_x4"/>
+            <interface name="pcie_perstn" optional="true"/>
+          </interfaces>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus" order="2"/>
+          </preferred_ips>
+        </component_mode>
+
+    <component_mode name="pci_express_x8" display_name="pci_express x8 ">
+          <interfaces>
+            <interface name="pci_express_x8"/>
+            <interface name="pcie_perstn" optional="true"/>
+          </interfaces>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus" order="2"/>
+          </preferred_ips>
+        </component_mode>
+
+
+    <component_mode name="pci_express_x16" display_name="pci_express x16 ">
+          <interfaces>
+            <interface name="pci_express_x16"/>
+            <interface name="pcie_perstn" optional="true"/>
+          </interfaces>
+          <preferred_ips>
+            <preferred_ip vendor="xilinx.com" library="ip" name="xdma" order="0"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="qdma" order="1"/>
+            <preferred_ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus" order="2"/>
+          </preferred_ips>
+        </component_mode>
+
+      </component_modes>
+
+    </component>
+
+    <component name="qsfp0" display_name="QSFP Connector" type="chip" sub_type="sfp" major_group="High Speed Tranceivers" part_name="M88E1111_BAB1C000" vendor="Marvell" spec_url="www.marvell.com">
+          <description>QSFP Connector 0</description>
+
+        <component_modes>
+
+          <component_mode name="qsfp0_1x_161" display_name="qsfp0_1x_161">
+                <interfaces>
+                  <interface name="qsfp0_1x"/>
+                  <interface name="qsfp0_refclk0" optional="true"/>
+                </interfaces>
+                <preferred_ips>
+                  <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+                  <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+                </preferred_ips>
+              </component_mode>
+
+          <component_mode name="qsfp0_2x_161" display_name="qsfp0_2x_161">
+              <interfaces>
+                <interface name="qsfp0_2x"/>
+                <interface name="qsfp0_refclk0" optional="true"/>
+               </interfaces>
+              <preferred_ips>
+                <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="1"/>
+              </preferred_ips>
+            </component_mode>
+
+          <component_mode name="qsfp0_3x_161" display_name="qsfp0_3x_161">
+              <interfaces>
+                <interface name="qsfp0_3x"/>
+                <interface name="qsfp0_refclk0" optional="true"/>
+              </interfaces>
+              <preferred_ips>
+                <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+              </preferred_ips>
+           </component_mode>
+
+        <component_mode name="qsfp0_4x_161" display_name="qsfp0_4x_161">
+              <interfaces>
+                <interface name="qsfp0_4x"/>
+                <interface name="qsfp0_refclk0" optional="true"/>
+              </interfaces>
+              <preferred_ips>
+                <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="cmac_usplus" order="3"/>
+              </preferred_ips>
+            </component_mode>
+
+        </component_modes>
+      </component>
+
+    <component name="qsfp1" display_name="QSFP Connector" type="chip" sub_type="sfp" major_group="High Speed Tranceivers" part_name="M88E1111_BAB1C000" vendor="Marvell" spec_url="www.marvell.com">
+          <description>QSFP Connector 1</description>
+
+        <component_modes>
+
+          <component_mode name="qsfp1_1x_161" display_name="qsfp1_1x_161">
+            <interfaces>
+              <interface name="qsfp1_1x"/>
+              <interface name="qsfp1_refclk0" optional="true"/>
+            </interfaces>
+            <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+            </preferred_ips>
+          </component_mode>
+
+        <component_mode name="qsfp1_2x_161" display_name="qsfp1_2x_161">
+            <interfaces>
+              <interface name="qsfp1_2x"/>
+              <interface name="qsfp1_refclk0" optional="true"/>
+            </interfaces>
+            <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="1"/>
+            </preferred_ips>
+          </component_mode>
+
+        <component_mode name="qsfp1_3x_161" display_name="qsfp1_3x_161">
+            <interfaces>
+              <interface name="qsfp1_3x"/>
+              <interface name="qsfp1_refclk0" optional="true"/>
+            </interfaces>
+            <preferred_ips>
+              <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+              <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+            </preferred_ips>
+        </component_mode>
+
+        <component_mode name="qsfp1_4x_161" display_name="qsfp1_4x_161">
+              <interfaces>
+                <interface name="qsfp1_4x"/>
+                <interface name="qsfp1_refclk0" optional="true"/>
+              </interfaces>
+              <preferred_ips>
+                <preferred_ip vendor="xilinx.com" library="ip" name="xxv_ethernet" order="0"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="usxgmii" order="1"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="l_ethernet" order="2"/>
+                <preferred_ip vendor="xilinx.com" library="ip" name="cmac_usplus" order="3"/>
+              </preferred_ips>
+            </component_mode>
+
+        </component_modes>
+      </component>
+
+ </components>
+
+
+  <jtag_chains>
+    <jtag_chain name="chain1">
+      <position name="0" component="part0"/>
+    </jtag_chain>
+  </jtag_chains>
+
+  <connections>
+
+  <connection name="part0_hbm_cattrip" component1="part0" component2="hbm_cattrip">
+      <connection_map name="part0_hbm_cattrip" typical_delay="5" c1_st_index="2" c1_end_index="2" c2_st_index="0" c2_end_index="0"/>
+    </connection>
+
+  <connection name="part0_pcie_perstn" component1="part0" component2="pcie_perstn">
+      <connection_map name="part0_pcie_perstn_1" c1_st_index="0" c1_end_index="0" c2_st_index="0" c2_end_index="0"/>
+    </connection>
+
+  <connection name="part0_qsfp28_leds" component1="part0" component2="qsfp28_leds">
+      <connection_map name="part0_qsfp28_leds" typical_delay="5" c1_st_index="3" c1_end_index="8" c2_st_index="0" c2_end_index="5"/>
+    </connection>
+
+  <connection name="part0_reset_si5394" component1="part0" component2="reset_si5394">
+     <connection_map name="part0_reset_si5394" typical_delay="5" c1_st_index="11" c1_end_index="11" c2_st_index="0" c2_end_index="0"/>
+  </connection>
+
+  <connection name="part0_gpio_si5394" component1="part0" component2="gpio_si5394">
+     <connection_map name="part0_gpio_si5394" typical_delay="5" c1_st_index="12" c1_end_index="14" c2_st_index="0" c2_end_index="2"/>
+    </connection>
+
+  <connection name="part0_msp_gpio" component1="part0" component2="msp_gpio">
+      <connection_map name="part0_msp_gpio" typical_delay="5" c1_st_index="17" c1_end_index="18" c2_st_index="0" c2_end_index="1"/>
+    </connection>
+
+  <connection name="part0_iic_si5394" component1="part0" component2="iic_si5394">
+      <connection_map name="part0_iic_si5394" typical_delay="5" c1_st_index="15" c1_end_index="16" c2_st_index="0" c2_end_index="1"/>
+    </connection>
+
+  <connection name="part0_pcie_refclk" component1="part0" component2="pcie_refclk">
+      <connection_map name="part0_pcie_refclk" typical_delay="5" c1_st_index="700" c1_end_index="701" c2_st_index="0" c2_end_index="1"/>
+    </connection>
+
+  <connection name="part0_pci_express" component1="part0" component2="pci_express">
+      <connection_map name="part0_pcie_express_1" c1_st_index="702" c1_end_index="765" c2_st_index="0" c2_end_index="63"/>
+    </connection>
+
+   <connection name="part0_qsfp0_refclk0" component1="part0" component2="qsfp0_refclk0">
+      <connection_map name="part0_qsfp0_refclk0" typical_delay="5" c1_st_index="100" c1_end_index="101" c2_st_index="0" c2_end_index="1"/>
+    </connection>
+
+   <connection name="part0_qsfp1_refclk0" component1="part0" component2="qsfp1_refclk0">
+      <connection_map name="part0_qsfp1_refclk0" typical_delay="5" c1_st_index="102" c1_end_index="103" c2_st_index="0" c2_end_index="1"/>
+    </connection>
+
+  <connection name="part0_qsfp0_gt" component1="part0" component2="qsfp0">
+      <connection_map name="part0_qsfp0_gt" typical_delay="5" c1_st_index="800" c1_end_index="815" c2_st_index="0" c2_end_index="15"/>
+    </connection>
+
+  <connection name="part0_qsfp1_gt" component1="part0" component2="qsfp1">
+      <connection_map name="part0_qsfp1_gt" typical_delay="5" c1_st_index="850" c1_end_index="865" c2_st_index="0" c2_end_index="15"/>
+    </connection>
+
+  </connections>
+
+<ip_associated_rules>
+    <ip_associated_rule name="default">
+      <ip vendor="xilinx.com" library="ip" name="xdma" version="*" ip_interface="sys_rst_n">
+        <associated_board_interfaces>
+          <associated_board_interface name="pcie_perstn" order="0"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="pcie4_uscale_plus" version="*" ip_interface="sys_rst_n">
+        <associated_board_interfaces>
+          <associated_board_interface name="pcie_perstn" order="0"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="qdma" version="*" ip_interface="sys_rst_n">
+        <associated_board_interfaces>
+          <associated_board_interface name="pcie_perstn" order="0"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="hbm" version="*" ip_interface="DRAM_0_STAT_CATTRIP">
+        <associated_board_interfaces>
+          <associated_board_interface name="hbm_cattrip" order="0"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="util_ds_buf" version="*" ip_interface="CLK_IN_D">
+        <associated_board_interfaces>
+          <associated_board_interface name="pcie_refclk" order="0"/>
+        <!--  <associated_board_interface name="cmc_clk" order="1"/>
+          <associated_board_interface name="hbm_clk" order="2"/> -->
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="clk_wiz" version="*" ip_interface="CLK_IN_D">
+        <associated_board_interfaces>
+        <!--  <associated_board_interface name="cmc_clk" order="0"/> -->
+          <associated_board_interface name="pcie_refclk" order="0"/>
+        <!--  <associated_board_interface name="hbm_clk" order="2"/> -->
+        </associated_board_interfaces>
+      </ip>
+
+
+      <ip vendor="xilinx.com" library="ip" name="xxv_ethernet" version="*" ip_interface="gt_serial_port">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_1x" order="0"/>
+          <associated_board_interface name="qsfp0_2x" order="1"/>
+          <associated_board_interface name="qsfp0_3x" order="2"/>
+          <associated_board_interface name="qsfp0_4x" order="3"/>
+          <associated_board_interface name="qsfp1_1x" order="4"/>
+          <associated_board_interface name="qsfp1_2x" order="5"/>
+          <associated_board_interface name="qsfp1_3x" order="6"/>
+          <associated_board_interface name="qsfp1_4x" order="7"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="usxgmii" version="*" ip_interface="gt_serial_port">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_1x" order="0"/>
+          <associated_board_interface name="qsfp0_2x" order="1"/>
+          <associated_board_interface name="qsfp0_3x" order="2"/>
+          <associated_board_interface name="qsfp0_4x" order="3"/>
+          <associated_board_interface name="qsfp1_1x" order="4"/>
+          <associated_board_interface name="qsfp1_2x" order="5"/>
+          <associated_board_interface name="qsfp1_3x" order="6"/>
+          <associated_board_interface name="qsfp1_4x" order="7"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="l_ethernet" version="*" ip_interface="gt_serial_port">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_2x" order="0"/>
+          <associated_board_interface name="qsfp0_4x" order="1"/>
+          <associated_board_interface name="qsfp1_2x" order="2"/>
+          <associated_board_interface name="qsfp1_4x" order="3"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="cmac_usplus" version="*" ip_interface="gt_serial_port">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_4x" order="0"/>
+          <associated_board_interface name="qsfp1_4x" order="1"/>
+        </associated_board_interfaces>
+      </ip>
+
+      <ip vendor="xilinx.com" library="ip" name="xxv_ethernet" version="*" ip_interface="gt_ref_clk">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_refclk0" order="0"/>
+          <associated_board_interface name="qsfp1_refclk0" order="1"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="usxgmii" version="*" ip_interface="gt_ref_clk">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_refclk0" order="0"/>
+          <associated_board_interface name="qsfp1_refclk0" order="1"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="l_ethernet" version="*" ip_interface="gt_ref_clk">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_refclk0" order="0"/>
+          <associated_board_interface name="qsfp1_refclk0" order="1"/>
+        </associated_board_interfaces>
+      </ip>
+      <ip vendor="xilinx.com" library="ip" name="cmac_usplus" version="*" ip_interface="gt_ref_clk">
+        <associated_board_interfaces>
+          <associated_board_interface name="qsfp0_refclk0" order="0"/>
+          <associated_board_interface name="qsfp1_refclk0" order="1"/>
+        </associated_board_interfaces>
+      </ip>
+    </ip_associated_rule>
+  </ip_associated_rules>
+
+</board>
diff --git a/board_files/Xilinx/au55c/changelog.txt b/board_files/Xilinx/au55c/changelog.txt
new file mode 100644
index 0000000..d34cf58
--- /dev/null
+++ b/board_files/Xilinx/au55c/changelog.txt
@@ -0,0 +1,3 @@
+######### AU55C change log ##############
+1.0
+AU55C Initial board support
diff --git a/board_files/Xilinx/au55c/part0_pins.xml b/board_files/Xilinx/au55c/part0_pins.xml
new file mode 100644
index 0000000..5d2fc5c
--- /dev/null
+++ b/board_files/Xilinx/au55c/part0_pins.xml
@@ -0,0 +1,202 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
+<!-- Copyright (C) 2021, Xilinx Inc - All rights reserved
+ Licensed under the Apache License, Version 2.0 (the "License"). You may
+ not use this file except in compliance with the License. A copy of the
+ License is located at
+     http://www.apache.org/licenses/LICENSE-2.0
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ License for the specific language governing permissions and limitations
+ under the License. -->
+
+<part_info part_name="xcu55c-fsvh2892-2L-e">
+
+  <pins>
+
+    <pin index="0" name="PCIE_PERST_LS_65"    iostandard="LVCMOS18" loc="BF41"/>
+    <pin index="1" name="PEX_PWRBRKN_FPGA_65" iostandard="LVCMOS18" loc="BG43"/>
+    <pin index="2" name="HBM_CATTRIP_LS"      iostandard="LVCMOS18" loc="BE45"/>
+
+    <!-- QSFP28 Activity LED pins -->
+    <pin index="3" name="QSFP28_0_ACTIVITY_LED"    iostandard="LVCMOS18" loc="BL13" drive="8"/>
+    <pin index="4" name="QSFP28_0_LINK_STAT_LEDG"  iostandard="LVCMOS18" loc="BK11" drive="8"/>
+    <pin index="5" name="QSFP28_0_LINK_STAT_LEDY"  iostandard="LVCMOS18" loc="BJ11" drive="8"/>
+    <pin index="6" name="QSFP28_1_ACTIVITY_LED"    iostandard="LVCMOS18" loc="BK14" drive="8"/>
+    <pin index="7" name="QSFP28_1_LINK_STAT_LEDG"  iostandard="LVCMOS18" loc="BK15" drive="8"/>
+    <pin index="8" name="QSFP28_1_LINK_STAT_LEDY"  iostandard="LVCMOS18" loc="BL12" drive="8"/>
+
+    <!-- FPGA to Sattellite Controller CMS UART Interface Pins-->
+    <pin index="9"  name="FPGA_TXD_MSP_65" iostandard="LVCMOS18" loc="BH42"/>
+    <pin index="10" name="FPGA_RXD_MSP_65" iostandard="LVCMOS18" loc="BJ42"/>
+
+    <!-- Si5394B pins-->
+    <pin index="11" name="SI_RSTBB"    iostandard="LVCMOS18" loc="BM8" />
+    <pin index="12" name="SI_INTRB"    iostandard="LVCMOS18" loc="BM9" />
+    <pin index="13" name="SI_PLL_LOCK" iostandard="LVCMOS18" loc="BN10"/>
+    <pin index="14" name="SI_IN_LOS"   iostandard="LVCMOS18" loc="BM10"/>
+    <pin index="15" name="I2C_SI5394_SCL" iostandard="LVCMOS18" loc="BM14"/>
+    <pin index="16" name="I2C_SI5394_SDA" iostandard="LVCMOS18" loc="BN14"/>
+
+    <!-- General perpose IO interconnect pins -->
+    <pin index="17" name="MSP_GPIO0" iostandard="LVCMOS18" loc="BE46"/>
+    <pin index="18" name="MSP_GPIO1" iostandard="LVCMOS18" loc="BH46"/>
+    <pin index="19" name="MSP_GPIO2" iostandard="LVCMOS18" loc="BF45"/>
+    <pin index="20" name="MSP_GPIO3" iostandard="LVCMOS18" loc="BF46"/>
+
+    <pin index="21"  name ="CPU_RESET_FPGA"    iostandard="LVCMOS18" loc="BG45"/>
+    <pin index="22"  name ="RSTN_68"           iostandard="LVCMOS18" loc="BM12"/>
+
+    <!-- Onboard Clocks -->
+    <pin index="100"  name ="SYNCE_CLK0_N" loc="AD43"/>
+    <pin index="101"  name ="SYNCE_CLK0_P" loc="AD42"/>
+    <pin index="102"  name ="SYNCE_CLK1_N" loc="AB43"/>
+    <pin index="103"  name ="SYNCE_CLK1_P" loc="AB42"/>
+
+    <pin index="104"  name ="SYSCLK2_P" iostandard="LVDS" loc="BK10"  dqs_bias="TRUE"/>
+    <pin index="105"  name ="SYSCLK2_N" iostandard="LVDS" loc="BL10"  dqs_bias="TRUE"/>
+    <pin index="106"  name ="SYSCLK3_P" iostandard="LVDS" loc="BK43"  dqs_bias="TRUE"/>
+    <pin index="107"  name ="SYSCLK3_N" iostandard="LVDS" loc="BK44"  dqs_bias="TRUE"/>
+
+    <pin index="108"  name ="PPS_IN_FPGA" iostandard="LVCMOS18" loc="BJ33"/>
+    <pin index="109"  name ="PPS_IN_FPGA" iostandard="LVCMOS18" loc="BH32"/>
+
+    <pin index="110"  name ="NS1_REFCLK0_N" loc="AL41"/>
+    <pin index="111"  name ="NS1_REFCLK0_P" loc="AL40"/>
+    <pin index="112"  name ="NS1_SYSCLK5_N" loc="AK43"/>
+    <pin index="113"  name ="NS1_SYSCLK5_P" loc="AK42"/>
+    <pin index="114"  name ="NS2_REFCLK0_N" loc="AR41"/>
+    <pin index="115"  name ="NS2_REFCLK0_P" loc="AR40"/>
+    <pin index="116"  name ="NS2_SYSCLK6_N" loc="AP43"/>
+    <pin index="117"  name ="NS2_SYSCLK6_P" loc="AP42"/>
+
+    <pin index="118"  name ="TESTCLK_OUT" iostandard="LVCMOS18" loc="BN42"/>
+
+    <!-- PCIe Clocks-->
+    <pin index="694" name ="PCIE_SYSCLK0_N" loc="AK12"/>
+    <pin index="695" name ="PCIE_SYSCLK0_P" loc="AK13"/>
+    <pin index="696" name ="PCIE_SYSCLK1_N" loc="AP12"/>
+    <pin index="697" name ="PCIE_SYSCLK1_P" loc="AP13"/>
+
+    <pin index="698" name ="PCIE_REFCLK0_N" loc="AL14"/>
+    <pin index="699" name ="PCIE_REFCLK0_P" loc="AL15"/>
+    <pin index="700" name ="PCIE_REFCLK1_N" loc="AR14"/>
+    <pin index="701" name ="PCIE_REFCLK1_P" loc="AR15"/>
+
+    <!-- PCIe Connector -->
+
+    <pin index="702" name ="pcie_rx0_n"    loc="AL1" />
+    <pin index="703" name ="pcie_rx0_p"    loc="AL2" />
+    <pin index="704" name ="pcie_rx1_n"    loc="AM3" />
+    <pin index="705" name ="pcie_rx1_p"    loc="AM4" />
+    <pin index="706" name ="pcie_rx2_n"    loc="AN5" />
+    <pin index="707" name ="pcie_rx2_p"    loc="AN6" />
+    <pin index="708" name ="pcie_rx3_n"    loc="AN1" />
+    <pin index="709" name ="pcie_rx3_p"    loc="AN2" />
+    <pin index="710" name ="pcie_rx4_n"    loc="AP3" />
+    <pin index="711" name ="pcie_rx4_p"    loc="AP4" />
+    <pin index="712" name ="pcie_rx5_n"    loc="AR1" />
+    <pin index="713" name ="pcie_rx5_p"    loc="AR2" />
+    <pin index="714" name ="pcie_rx6_n"    loc="AT3" />
+    <pin index="715" name ="pcie_rx6_p"    loc="AT4" />
+    <pin index="716" name ="pcie_rx7_n"    loc="AU1" />
+    <pin index="717" name ="pcie_rx7_p"    loc="AU2" />
+    <pin index="718" name ="pcie_rx8_n"    loc="AV3" />
+    <pin index="719" name ="pcie_rx8_p"    loc="AV4" />
+    <pin index="720" name ="pcie_rx9_n"    loc="AW5" />
+    <pin index="721" name ="pcie_rx9_p"    loc="AW6" />
+    <pin index="722" name ="pcie_rx10_n"   loc="AW1" />
+    <pin index="723" name ="pcie_rx10_p"   loc="AW2" />
+    <pin index="724" name ="pcie_rx11_n"   loc="AY3" />
+    <pin index="725" name ="pcie_rx11_p"   loc="AY4" />
+    <pin index="726" name ="pcie_rx12_n"   loc="BA5" />
+    <pin index="727" name ="pcie_rx12_p"   loc="BA6" />
+    <pin index="728" name ="pcie_rx13_n"   loc="BA1" />
+    <pin index="729" name ="pcie_rx13_p"   loc="BA2" />
+    <pin index="730" name ="pcie_rx14_n"   loc="BB3" />
+    <pin index="731" name ="pcie_rx14_p"   loc="BB4" />
+    <pin index="732" name ="pcie_rx15_n"   loc="BC1" />
+    <pin index="733" name ="pcie_rx15_p"   loc="BC2" />
+
+    <pin index="734" name ="pcie_tx0_n"    loc="AL10"/>
+    <pin index="735" name ="pcie_tx0_p"    loc="AL11"/>
+    <pin index="736" name ="pcie_tx1_n"    loc="AM8" />
+    <pin index="737" name ="pcie_tx1_p"    loc="AM9" />
+    <pin index="738" name ="pcie_tx2_n"    loc="AN10"/>
+    <pin index="739" name ="pcie_tx2_p"    loc="AN11"/>
+    <pin index="740" name ="pcie_tx3_n"    loc="AP8" />
+    <pin index="741" name ="pcie_tx3_p"    loc="AP9" />
+    <pin index="742" name ="pcie_tx4_n"    loc="AR10"/>
+    <pin index="743" name ="pcie_tx4_p"    loc="AR11"/>
+    <pin index="744" name ="pcie_tx5_n"    loc="AR6" />
+    <pin index="745" name ="pcie_tx5_p"    loc="AR7" />
+    <pin index="746" name ="pcie_tx6_n"    loc="AT8" />
+    <pin index="747" name ="pcie_tx6_p"    loc="AT9" />
+    <pin index="748" name ="pcie_tx7_n"    loc="AU10"/>
+    <pin index="749" name ="pcie_tx7_p"    loc="AU11"/>
+    <pin index="750" name ="pcie_tx8_n"    loc="AU6" />
+    <pin index="751" name ="pcie_tx8_p"    loc="AU7" />
+    <pin index="752" name ="pcie_tx9_n"    loc="AV8" />
+    <pin index="753" name ="pcie_tx9_p"    loc="AV9" />
+    <pin index="754" name ="pcie_tx10_n"   loc="AW10"/>
+    <pin index="755" name ="pcie_tx10_p"   loc="AW11"/>
+    <pin index="756" name ="pcie_tx11_n"   loc="AY8" />
+    <pin index="757" name ="pcie_tx11_p"   loc="AY9" />
+    <pin index="758" name ="pcie_tx12_n"   loc="BA10"/>
+    <pin index="759" name ="pcie_tx12_p"   loc="BA11"/>
+    <pin index="760" name ="pcie_tx13_n"   loc="BB8" />
+    <pin index="761" name ="pcie_tx13_p"   loc="BB9" />
+    <pin index="762" name ="pcie_tx14_n"   loc="BC10"/>
+    <pin index="763" name ="pcie_tx14_p"   loc="BC11"/>
+    <pin index="764" name ="pcie_tx15_n"   loc="BC6" />
+    <pin index="765" name ="pcie_tx15_p"   loc="BC7" />
+
+
+    <!-- QSFP28 Connector 0 -->
+    <!-- These pins connect to MGT site 130 X0Y24~27  -->
+    <pin index="800" name ="QSFP28_0_RX1_N" loc="AD52"/>
+    <pin index="801" name ="QSFP28_0_RX2_N" loc="AC54"/>
+    <pin index="802" name ="QSFP28_0_RX3_N" loc="AC50"/>
+    <pin index="803" name ="QSFP28_0_RX4_N" loc="AB52"/>
+
+    <pin index="804" name ="QSFP28_0_RX1_P" loc="AD51"/>
+    <pin index="805" name ="QSFP28_0_RX2_P" loc="AC53"/>
+    <pin index="806" name ="QSFP28_0_RX3_P" loc="AC49"/>
+    <pin index="807" name ="QSFP28_0_RX4_P" loc="AB51"/>
+
+    <pin index="808" name ="QSFP28_0_TX1_N" loc="AD47"/>
+    <pin index="809" name ="QSFP28_0_TX2_N" loc="AC45"/>
+    <pin index="810" name ="QSFP28_0_TX3_N" loc="AB47"/>
+    <pin index="811" name ="QSFP28_0_TX4_N" loc="AA49"/>
+
+    <pin index="812" name ="QSFP28_0_TX1_P" loc="AD46"/>
+    <pin index="813" name ="QSFP28_0_TX2_P" loc="AC44"/>
+    <pin index="814" name ="QSFP28_0_TX3_P" loc="AB46"/>
+    <pin index="815" name ="QSFP28_0_TX4_P" loc="AA48"/>
+
+    <!-- QSFP28 Connector 1 -->
+    <!-- These pins connect to MGT site 131 X0Y28~31  -->
+    <pin index="850" name ="QSFP28_1_RX1_N" loc="AA54"/>
+    <pin index="851" name ="QSFP28_1_RX2_N" loc="Y52"/>
+    <pin index="852" name ="QSFP28_1_RX3_N" loc="W54"/>
+    <pin index="853" name ="QSFP28_1_RX4_N" loc="V52"/>
+
+    <pin index="854" name ="QSFP28_1_RX1_P" loc="AA53"/>
+    <pin index="855" name ="QSFP28_1_RX2_P" loc="Y51"/>
+    <pin index="856" name ="QSFP28_1_RX3_P" loc="W53"/>
+    <pin index="857" name ="QSFP28_1_RX4_P" loc="V51"/>
+
+    <pin index="858" name ="QSFP28_1_TX1_N" loc="AA45"/>
+    <pin index="859" name ="QSFP28_1_TX2_N" loc="Y47"/>
+    <pin index="860" name ="QSFP28_1_TX3_N" loc="W49"/>
+    <pin index="861" name ="QSFP28_1_TX4_N" loc="W45"/>
+
+    <pin index="862" name ="QSFP28_1_TX1_P" loc="AA44"/>
+    <pin index="863" name ="QSFP28_1_TX2_P" loc="Y46"/>
+    <pin index="864" name ="QSFP28_1_TX3_P" loc="W48"/>
+    <pin index="865" name ="QSFP28_1_TX4_P" loc="W44"/>
+
+
+  </pins>
+
+</part_info>
diff --git a/board_files/Xilinx/au55c/preset.xml b/board_files/Xilinx/au55c/preset.xml
new file mode 100644
index 0000000..1ea3fbf
--- /dev/null
+++ b/board_files/Xilinx/au55c/preset.xml
@@ -0,0 +1,396 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
+<!-- Copyright (C) 2021, Xilinx Inc - All rights reserved
+ Licensed under the Apache License, Version 2.0 (the "License"). You may
+ not use this file except in compliance with the License. A copy of the
+ License is located at
+     http://www.apache.org/licenses/LICENSE-2.0
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ License for the specific language governing permissions and limitations
+ under the License. -->
+
+<ip_presets schema="1.0">
+
+<ip_preset preset_proc_name="reset_si5394_preset">
+  <ip vendor="xilinx.com" library="ip" name="axi_gpio">
+    <user_parameters>
+    <user_parameter name="CONFIG.C_DOUT_DEFAULT" value="0x00000001"/>
+    </user_parameters>
+  </ip>
+  </ip_preset>
+
+  <ip_preset preset_proc_name="reset2_si5394_preset">
+  <ip vendor="xilinx.com" library="ip" name="axi_gpio">
+    <user_parameters>
+    <user_parameter name="CONFIG.C_DOUT_DEFAULT_2" value="0x00000001"/>
+    </user_parameters>
+  </ip>
+  </ip_preset>
+
+<ip_preset preset_proc_name="pcie_refclk_preset">
+    <ip vendor="xilinx.com" library="ip" name="util_ds_buf">
+      <user_parameters>
+        <user_parameter name="CONFIG.C_BUF_TYPE" value="IBUFDSGTE" />
+        <user_parameter name="CONFIG.C_SIZE" value="1" />
+      </user_parameters>
+    </ip>
+  </ip_preset>
+
+<ip_preset preset_proc_name="pciex4_preset">
+  <ip vendor="xilinx.com" library="ip" name="xdma">
+    <user_parameters>
+    <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+    <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X4" />
+    <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+    <user_parameter name="CONFIG.en_gt_selection" value="true" />
+    <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+  </ip>
+
+  <ip vendor="xilinx.com" library="ip" name="qdma">
+    <user_parameters>
+    <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+    <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X4" />
+    <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+    <user_parameter name="CONFIG.en_gt_selection" value="true" />
+    <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+  </ip>
+
+
+  <ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus">
+    <user_parameters>
+      <!-- <user_parameter name="CONFIG.pcie_blk_locn" value="X1Y1" /> -->
+      <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+      <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X4" />
+      <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+      <user_parameter name="CONFIG.en_gt_selection" value="true" />
+      <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+  </ip>
+
+
+</ip_preset>
+
+<ip_preset preset_proc_name="pciex8_preset">
+  <ip vendor="xilinx.com" library="ip" name="xdma">
+    <user_parameters>
+
+    <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+    <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X8" />
+    <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+    <user_parameter name="CONFIG.en_gt_selection" value="true" />
+    <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+    </ip>
+
+  <ip vendor="xilinx.com" library="ip" name="qdma">
+    <user_parameters>
+    <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+    <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X8" />
+    <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+    <user_parameter name="CONFIG.en_gt_selection" value="true" />
+    <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+    </ip>
+
+  <ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus">
+    <user_parameters>
+
+      <!-- <user_parameter name="CONFIG.pcie_blk_locn" value="X1Y1" /> -->
+      <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+      <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X8" />
+      <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+      <user_parameter name="CONFIG.en_gt_selection" value="true" />
+      <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+  </ip>
+
+</ip_preset>
+
+<ip_preset preset_proc_name="pciex16_preset">
+  <ip vendor="xilinx.com" library="ip" name="xdma">
+    <user_parameters>
+    <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+    <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X16" />
+    <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+    <user_parameter name="CONFIG.en_gt_selection" value="true" />
+    <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+    </ip>
+
+  <ip vendor="xilinx.com" library="ip" name="qdma">
+    <user_parameters>
+    <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+    <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X16" />
+    <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+    <user_parameter name="CONFIG.en_gt_selection" value="true" />
+    <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+    </ip>
+
+  <ip vendor="xilinx.com" library="ip" name="pcie4c_uscale_plus">
+    <user_parameters>
+
+      <!-- <user_parameter name="CONFIG.pcie_blk_locn" value="X1Y1" />         -->
+      <user_parameter name="CONFIG.pl_link_cap_max_link_speed" value="8.0_GT/s" />
+      <user_parameter name="CONFIG.pl_link_cap_max_link_width" value="X16" />
+      <user_parameter name="CONFIG.mode_selection" value="Advanced" />
+      <user_parameter name="CONFIG.en_gt_selection" value="true" />
+      <user_parameter name="CONFIG.select_quad" value="GTY_Quad_227" />
+    </user_parameters>
+  </ip>
+
+</ip_preset>
+
+<!-- QSFP0 Connector -->
+
+<ip_preset preset_proc_name="qsfp0_1x_preset">
+
+    <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+    <user_parameters>
+      <!-- <user_parameter name="CONFIG.GT_REF_CLK_FREQ" value="161.1328125" /> -->
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="1" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.LINE_RATE" value="10" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+      <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="1" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+    </user_parameters>
+    </ip>
+
+
+ </ip_preset>
+
+<ip_preset preset_proc_name="qsfp0_2x_preset">
+
+  <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="2" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.LINE_RATE" value="10" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+      <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="2" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="l_ethernet">
+    <user_parameters>
+      <!-- <user_parameter name="CONFIG.GT_REF_CLK_FREQ" value="161.1328125" /> -->
+      <user_parameter name="CONFIG.LINE_RATE" value="40" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+      <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+
+</ip_preset>
+
+<ip_preset preset_proc_name="qsfp0_3x_preset">
+
+    <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="3" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.LINE_RATE" value="10" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+      <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="3" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+    </user_parameters>
+    </ip>
+
+</ip_preset>
+
+
+<ip_preset preset_proc_name="qsfp0_4x_preset">
+
+     <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+       <user_parameters>
+         <user_parameter name="CONFIG.NUM_OF_CORES" value="4" />
+         <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+         <user_parameter name="CONFIG.LINE_RATE" value="10" />
+         <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+         <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+       </user_parameters>
+     </ip>
+
+     <ip vendor="xilinx.com" library="ip" name="usxgmii">
+       <user_parameters>
+       <user_parameter name="CONFIG.NUM_OF_CORES" value="4" />
+       <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+       <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+       </user_parameters>
+     </ip>
+
+
+     <ip vendor="xilinx.com" library="ip" name="l_ethernet">
+       <user_parameters>
+       <!-- <user_parameter name="CONFIG.GT_REF_CLK_FREQ" value="161.1328125" /> -->
+         <user_parameter name="CONFIG.LINE_RATE" value="40" />
+         <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+         <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y3" />
+         <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+       </user_parameters>
+     </ip>
+
+     <ip vendor="xilinx.com" library="ip" name="cmac_usplus">
+       <user_parameters>
+       <!--<user_parameter name="CONFIG.GT_REF_CLK_FREQ" value="161.1328125" />-->
+       <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+       <user_parameter name="CONFIG.CMAC_CAUI4_MODE" value="1" />
+       <user_parameter name="CONFIG.NUM_LANES" value="4x25" />
+       <user_parameter name="CONFIG.CMAC_CORE_SELECT" value="CMACE4_X0Y3" />
+       <!--<user_parameter name="CONFIG.GT_GROUP_SELECT" value= "Quad_X0Y7" />-->
+       <user_parameter name="CONFIG.GT_GROUP_SELECT" value= "X0Y24~X0Y27" />
+       <user_parameter name="CONFIG.RS_FEC_TRANSCODE_BYPASS" value= "0" />
+       </user_parameters>
+     </ip>
+
+   </ip_preset>
+
+<!-- QSFP1 Connector -->
+
+  <ip_preset preset_proc_name="qsfp1_1x_preset">
+
+    <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="1" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.LINE_RATE" value="10" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+      <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="1" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+    </user_parameters>
+    </ip>
+
+  </ip_preset>
+
+  <ip_preset preset_proc_name="qsfp1_2x_preset">
+
+  <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+    <user_parameters>
+        <user_parameter name="CONFIG.NUM_OF_CORES" value="2" />
+        <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+        <user_parameter name="CONFIG.LINE_RATE" value="10" />
+        <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+        <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="2" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="l_ethernet">
+    <user_parameters>
+      <!-- <user_parameter name="CONFIG.GT_REF_CLK_FREQ" value="161.1328125" /> -->
+        <user_parameter name="CONFIG.LINE_RATE" value="40" />
+        <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+        <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+        <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+  </ip_preset>
+
+  <ip_preset preset_proc_name="qsfp1_3x_preset">
+
+    <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+    <user_parameters>
+        <user_parameter name="CONFIG.NUM_OF_CORES" value="3" />
+        <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+        <user_parameter name="CONFIG.LINE_RATE" value="10" />
+        <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+        <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+    </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+    <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="3" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+    </user_parameters>
+    </ip>
+
+  </ip_preset>
+
+   <ip_preset preset_proc_name="qsfp1_4x_preset">
+    <ip vendor="xilinx.com" library="ip" name="xxv_ethernet">
+      <user_parameters>
+        <user_parameter name="CONFIG.NUM_OF_CORES" value="4" />
+        <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+        <user_parameter name="CONFIG.LINE_RATE" value="10" />
+        <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+        <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+      </user_parameters>
+    </ip>
+
+    <ip vendor="xilinx.com" library="ip" name="usxgmii">
+      <user_parameters>
+      <user_parameter name="CONFIG.NUM_OF_CORES" value="4" />
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+      </user_parameters>
+    </ip>
+
+
+    <ip vendor="xilinx.com" library="ip" name="l_ethernet">
+      <user_parameters>
+      <!-- <user_parameter name="CONFIG.GT_REF_CLK_FREQ" value="161.1328125" /> -->
+        <user_parameter name="CONFIG.LINE_RATE" value="40" />
+        <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+        <user_parameter name="CONFIG.GT_GROUP_SELECT" value="Quad_X0Y4" />
+        <user_parameter name="CONFIG.BASE_R_KR" value="BASE-R" />
+      </user_parameters>
+    </ip>
+
+
+    <ip vendor="xilinx.com" library="ip" name="cmac_usplus">
+      <user_parameters>
+      <user_parameter name="CONFIG.GT_TYPE" value="GTY" />
+      <user_parameter name="CONFIG.CMAC_CAUI4_MODE" value="1" />
+      <user_parameter name="CONFIG.NUM_LANES" value="4x25" />
+      <user_parameter name="CONFIG.CMAC_CORE_SELECT" value="CMACE4_X0Y4" />
+      <user_parameter name="CONFIG.GT_GROUP_SELECT" value= "X0Y28~X0Y31" />
+      <user_parameter name="CONFIG.RS_FEC_TRANSCODE_BYPASS" value= "0" />
+      </user_parameters>
+    </ip>
+  </ip_preset>
+
+</ip_presets>
diff --git a/board_files/Xilinx/au55c/xitem.json b/board_files/Xilinx/au55c/xitem.json
new file mode 100644
index 0000000..44048a5
--- /dev/null
+++ b/board_files/Xilinx/au55c/xitem.json
@@ -0,0 +1,34 @@
+{
+  "config": {
+    "items": [
+      {
+        "infra": {
+          "name": "au55c",
+          "display": "Alveo U55C Data Center Accelerator Card",
+          "revision": "1.0",
+          "description": "Alveo U55C Data Center Accelerator Card",
+          "company": "xilinx.com",
+          "company_display": "Xilinx",
+          "author": "",
+          "contributors": [
+            {
+              "group": "Xilinx",
+              "url": "www.xilinx.com"
+            }
+          ],
+          "category": "Accelerator Cards/Alveo",
+          "logo": "",
+          "website": "https://www.xilinx.com/products/boards-and-kits/alveo/u55c.html",
+          "search-keywords": [
+            "au55c",
+            "xilinx.com",
+            "board",
+            "Accelerator Cards/Alveo"
+          ]
+        }
+      }
+    ]
+  },
+  "_major": 1,
+  "_minor": 0
+}
diff --git a/constr/au250/general.xdc b/constr/au250/general.xdc
index 6269b52..daeab3c 100644
--- a/constr/au250/general.xdc
+++ b/constr/au250/general.xdc
@@ -1,6 +1,6 @@
 # *************************************************************************
 #
-# Copyright 2020 Xilinx, Inc.
+# Copyright 2023 Xilinx, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -15,6 +15,11 @@
 # limitations under the License.
 #
 # *************************************************************************
+set_property LOC MMCM_X0Y2 [get_cells ddr4_inst/inst/u_ddr4_infrastructure/gen_mmcme4.u_mmcme_adv_inst]
+set_property CLOCK_DEDICATED_ROUTE BACKBONE [get_pins ddr4_inst/inst/u_ddr4_infrastructure/gen_mmcme4.u_mmcme_adv_inst/CLKIN1]
+set_property INTERNAL_VREF 0.84 [get_iobanks 63]
+set_property INTERNAL_VREF 0.84 [get_iobanks 62]
+set_property INTERNAL_VREF 0.84 [get_iobanks 61]
 set_property CONFIG_VOLTAGE 1.8 [current_design]
 set_property BITSTREAM.CONFIG.CONFIGFALLBACK Enable [current_design]
 set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design]
@@ -24,4 +29,4 @@ set_property BITSTREAM.CONFIG.CONFIGRATE 72.9 [current_design]
 set_property BITSTREAM.CONFIG.EXTMASTERCCLK_EN disable [current_design]
 set_property BITSTREAM.CONFIG.SPI_FALL_EDGE YES [current_design]
 set_property BITSTREAM.CONFIG.UNUSEDPIN Pullup [current_design]
-set_property BITSTREAM.CONFIG.SPI_32BIT_ADDR Yes [current_design]
+set_property BITSTREAM.CONFIG.SPI_32BIT_ADDR Yes [current_design]
\ No newline at end of file
diff --git a/constr/au55c/general.xdc b/constr/au55c/general.xdc
new file mode 100644
index 0000000..102f812
--- /dev/null
+++ b/constr/au55c/general.xdc
@@ -0,0 +1,33 @@
+# *************************************************************************
+#
+# Copyright 2021 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set_property CONFIG_VOLTAGE 1.8 [current_design]
+set_property BITSTREAM.CONFIG.CONFIGFALLBACK Enable [current_design]
+set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design]
+set_property CONFIG_MODE SPIx4 [current_design]
+set_property BITSTREAM.CONFIG.SPI_BUSWIDTH 4 [current_design]
+set_property BITSTREAM.CONFIG.CONFIGRATE 63.8 [current_design]
+set_property BITSTREAM.CONFIG.EXTMASTERCCLK_EN disable [current_design]
+set_property BITSTREAM.CONFIG.SPI_FALL_EDGE YES [current_design]
+set_property BITSTREAM.CONFIG.UNUSEDPIN Pullup [current_design]
+set_property BITSTREAM.CONFIG.SPI_32BIT_ADDR Yes [current_design]
+set_operating_conditions -design_power_budget 100
+
+# Manually connecting the Debug Hub clock pin to a valid clock source (100MHz reference clock in this case).
+# Read AR72607 for details.
+set_property C_USER_SCAN_CHAIN 1 [get_debug_cores dbg_hub]
+connect_debug_port dbg_hub/clk [get_nets ref_clk_100mhz]
diff --git a/constr/au55c/pins.xdc b/constr/au55c/pins.xdc
new file mode 100644
index 0000000..9887317
--- /dev/null
+++ b/constr/au55c/pins.xdc
@@ -0,0 +1,52 @@
+# *************************************************************************
+#
+# Copyright 2021 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+
+set_property -dict {PACKAGE_PIN BF41 IOSTANDARD LVCMOS18} [get_ports pcie_rstn]
+
+set_property PACKAGE_PIN AR14 [get_ports pcie_refclk_n]
+set_property PACKAGE_PIN AR15 [get_ports pcie_refclk_p]
+
+set num_ports [llength [get_ports qsfp_refclk_p]]
+if {$num_ports >= 1} {
+#    IO pins AD42, AD43 are on IO Bank 130 for use with GTY X0Y24~27
+    set_property PACKAGE_PIN AD43 [get_ports qsfp_refclk_n[0]]
+    set_property PACKAGE_PIN AD42 [get_ports qsfp_refclk_p[0]]
+
+#    set_property PACKAGE_PIN BL13     [get_ports qsfp_activity_led[0]]
+#    set_property IOSTANDARD  LVCMOS18 [get_ports qsfp_activity_led[0]]
+#    set_property PACKAGE_PIN BK11     [get_ports qsfp_link_stat_ledg[0]]
+#    set_property IOSTANDARD  LVCMOS18 [get_ports qsfp_link_stat_ledg[0]]
+#    set_property PACKAGE_PIN BJ11     [get_ports qsfp_link_stat_ledy[0]]
+#    set_property IOSTANDARD  LVCMOS18 [get_ports qsfp_link_stat_ledy[0]]
+}
+if {$num_ports >= 2} {
+#    IO pins AB43, AB42 are on IO Bank 131 for use with GTY X0Y28~31
+    set_property PACKAGE_PIN AB43 [get_ports qsfp_refclk_n[1]]
+    set_property PACKAGE_PIN AB42 [get_ports qsfp_refclk_p[1]]
+
+#    set_property PACKAGE_PIN BK14     [get_ports qsfp_activity_led[1]]
+#    set_property IOSTANDARD  LVCMOS18 [get_ports qsfp_activity_led[1]]
+#    set_property PACKAGE_PIN BK15     [get_ports qsfp_link_stat_ledg[1]]
+#    set_property IOSTANDARD  LVCMOS18 [get_ports qsfp_link_stat_ledg[1]]
+#    set_property PACKAGE_PIN BL12     [get_ports qsfp_link_stat_ledy[1]]
+#    set_property IOSTANDARD  LVCMOS18 [get_ports qsfp_link_stat_ledy[1]]
+}
+
+# Fix the CATTRIP issue for custom flow
+# Read AR72926 for details.
+set_property -dict {PACKAGE_PIN BE45 IOSTANDARD LVCMOS18 PULLDOWN TRUE} [get_ports hbm_cattrip]
diff --git a/constr/au55c/timing.xdc b/constr/au55c/timing.xdc
new file mode 100644
index 0000000..1916aac
--- /dev/null
+++ b/constr/au55c/timing.xdc
@@ -0,0 +1,39 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+create_clock -period 10.000 -name pcie_refclk [get_ports pcie_refclk_p]
+
+set_false_path -through [get_ports pcie_rstn]
+
+foreach axis_aclk [get_clocks -of_object [get_nets axis_aclk*]] {
+    foreach cmac_clk [get_clocks -of_object [get_nets cmac_clk*]] {
+        set_max_delay -datapath_only -from $axis_aclk -to $cmac_clk 4.000
+        set_max_delay -datapath_only -from $cmac_clk -to $axis_aclk 3.103
+    }
+}
+
+create_pblock pblock_packet_adapter_tx
+add_cells_to_pblock [get_pblocks pblock_packet_adapter_tx] [get_cells -quiet {cmac_port*.packet_adapter_inst/tx_inst}]
+resize_pblock [get_pblocks pblock_packet_adapter_tx] -add {CLOCKREGION_X0Y4:CLOCKREGION_X1Y5}
+
+create_pblock pblock_packet_adapter_rx
+add_cells_to_pblock [get_pblocks pblock_packet_adapter_rx] [get_cells -quiet {cmac_port*.packet_adapter_inst/rx_inst}]
+resize_pblock [get_pblocks pblock_packet_adapter_rx] -add {CLOCKREGION_X2Y4:CLOCKREGION_X3Y5}
+
+create_pblock pblock_qdma_subsystem
+add_cells_to_pblock [get_pblocks pblock_qdma_subsystem] [get_cells -quiet {qdma_subsystem_inst}]
+resize_pblock [get_pblocks pblock_qdma_subsystem] -add {SLR0}
\ No newline at end of file
diff --git a/script/board_settings/au55c.tcl b/script/board_settings/au55c.tcl
new file mode 100644
index 0000000..0bcec1f
--- /dev/null
+++ b/script/board_settings/au55c.tcl
@@ -0,0 +1,22 @@
+
+# *************************************************************************
+#
+# Copyright 2021 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+
+set part xcu55c-fsvh2892-2L-e
+set board_part xilinx.com:au55c:part0:1.0
+set zynq_family 0
diff --git a/script/build.tcl b/script/build.tcl
index c689eb6..c0258b2 100644
--- a/script/build.tcl
+++ b/script/build.tcl
@@ -87,7 +87,7 @@ array set build_options {
     -overwrite   0
     -rebuild     0
     -jobs        8
-    -synth_ip    1
+    -synth_ip    0
     -impl        0
     -post_impl   0
     -user_plugin ""
@@ -223,6 +223,11 @@ if {![file exists ${ip_build_dir}/manage_ip/]} {
 # Run synthesis for each IP
 set ip_dict [dict create]
 dict for {module module_dir} $module_dict {
+    if {[string equal $module mem_ctrl]} {
+        set module_dir ${module_dir}/${board}
+        puts "DEBUG: The current module is mem_ctrl, and the directory is ${module_dir}"
+    }
+
     set ip_tcl_dir ${module_dir}/vivado_ip
 
     # Check the existence of "$ip_tcl_dir" and "${ip_tcl_dir}/vivado_ip.tcl"
@@ -366,6 +371,11 @@ read_verilog -quiet [glob -nocomplain -directory $src_dir "*.{v,vh}"]
 read_verilog -quiet -sv [glob -nocomplain -directory $src_dir "*.sv"]
 read_vhdl -quiet [glob -nocomplain -directory $src_dir "*.vhd"]
 
+# Read the HBM block diagram
+source ${src_dir}/mem_ctrl/hbm_bd.tcl
+make_wrapper -files [get_files ${top_build_dir}/open_nic_shell.srcs/sources_1/bd/hbm_bd/hbm_bd.bd] -top
+add_files -norecurse ${top_build_dir}/open_nic_shell.gen/sources_1/bd/hbm_bd/hdl/hbm_bd_wrapper.v
+
 # Set vivado generic
 set design_params(-build_timestamp) "32'h$design_params(-build_timestamp)"
 set generic ""
@@ -395,7 +405,8 @@ read_xdc ${build_dir}/run_params.xdc
 # Implement design
 if {$impl} {
     update_compile_order -fileset sources_1
-    _do_impl $jobs {"Vivado Implementation Defaults"}
+    #_do_impl $jobs {"Vivado Implementation Defaults"}
+    _do_impl $jobs {"Performance_Retiming"}
 }
 
 if {$post_impl} {
diff --git a/src/box_250mhz/box_250mhz.sv b/src/box_250mhz/box_250mhz.sv
old mode 100644
new mode 100755
index 913e86c..dcc0570
--- a/src/box_250mhz/box_250mhz.sv
+++ b/src/box_250mhz/box_250mhz.sv
@@ -1,21 +1,11 @@
-// *************************************************************************
+//==============================================================================
+// Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+// Copyright (C) 2022, Xilinx, Inc. All rights reserved.
+// SPDX-License-Identifier: MIT
 //
-// Copyright 2020 Xilinx, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-// *************************************************************************
+//==============================================================================
 `timescale 1ns/1ps
+
 module box_250mhz #(
   parameter int MIN_PKT_LEN   = 64,
   parameter int MAX_PKT_LEN   = 1518,
@@ -76,6 +66,87 @@ module box_250mhz #(
   input   [16*NUM_CMAC_PORT-1:0] s_axis_adap_rx_250mhz_tuser_dst,
   output     [NUM_CMAC_PORT-1:0] s_axis_adap_rx_250mhz_tready,
 
+  output                         m_axis_user2rdma_roce_from_cmac_rx_tvalid,
+  output                 [511:0] m_axis_user2rdma_roce_from_cmac_rx_tdata,
+  output                  [63:0] m_axis_user2rdma_roce_from_cmac_rx_tkeep,
+  output                         m_axis_user2rdma_roce_from_cmac_rx_tlast,
+  input                          m_axis_user2rdma_roce_from_cmac_rx_tready,
+
+  input                          s_axis_rdma2user_to_cmac_tx_tvalid,
+  input                  [511:0] s_axis_rdma2user_to_cmac_tx_tdata,
+  input                   [63:0] s_axis_rdma2user_to_cmac_tx_tkeep,
+  input                          s_axis_rdma2user_to_cmac_tx_tlast,
+  output                         s_axis_rdma2user_to_cmac_tx_tready,
+
+  output                         m_axis_user2rdma_from_qdma_tx_tvalid,
+  output                 [511:0] m_axis_user2rdma_from_qdma_tx_tdata,
+  output                  [63:0] m_axis_user2rdma_from_qdma_tx_tkeep,
+  output                         m_axis_user2rdma_from_qdma_tx_tlast,
+  input                          m_axis_user2rdma_from_qdma_tx_tready,
+
+  input                   [63:0] s_axis_rdma2user_ieth_immdt_tdata,
+  input                          s_axis_rdma2user_ieth_immdt_tlast,
+  input                          s_axis_rdma2user_ieth_immdt_tvalid,
+  output                         s_axis_rdma2user_ieth_immdt_trdy,
+
+  input                          s_resp_hndler_i_send_cq_db_cnt_valid,
+  input                   [9 :0] s_resp_hndler_i_send_cq_db_addr,
+  input                   [31:0] s_resp_hndler_i_send_cq_db_cnt,
+  output                         s_resp_hndler_o_send_cq_db_rdy,
+
+  output                  [15:0] m_o_qp_sq_pidb_hndshk,
+  output                  [31:0] m_o_qp_sq_pidb_wr_addr_hndshk,
+  output                         m_o_qp_sq_pidb_wr_valid_hndshk,
+  input                          m_i_qp_sq_pidb_wr_rdy,
+
+  output                  [15:0] m_o_qp_rq_cidb_hndshk,
+  output                  [31:0] m_o_qp_rq_cidb_wr_addr_hndshk,
+  output                         m_o_qp_rq_cidb_wr_valid_hndshk,
+  input                          m_i_qp_rq_cidb_wr_rdy,
+
+  input                          s_rx_pkt_hndler_i_rq_db_data_valid,
+  input                   [9 :0] s_rx_pkt_hndler_i_rq_db_addr,
+  input                   [31:0] s_rx_pkt_hndler_i_rq_db_data,
+  output                         s_rx_pkt_hndler_o_rq_db_rdy,
+
+  output                         m_axi_compute_logic_awid,
+  output                [63 : 0] m_axi_compute_logic_awaddr,
+  output                 [3 : 0] m_axi_compute_logic_awqos,
+  output                 [7 : 0] m_axi_compute_logic_awlen,
+  output                 [2 : 0] m_axi_compute_logic_awsize,
+  output                 [1 : 0] m_axi_compute_logic_awburst,
+  output                 [3 : 0] m_axi_compute_logic_awcache,
+  output                 [2 : 0] m_axi_compute_logic_awprot,
+  output                         m_axi_compute_logic_awvalid,
+  input                          m_axi_compute_logic_awready,
+  output               [511 : 0] m_axi_compute_logic_wdata,
+  output                [63 : 0] m_axi_compute_logic_wstrb,
+  output                         m_axi_compute_logic_wlast,
+  output                         m_axi_compute_logic_wvalid,
+  input                          m_axi_compute_logic_wready,
+  output                         m_axi_compute_logic_awlock,
+  input                          m_axi_compute_logic_bid,
+  input                  [1 : 0] m_axi_compute_logic_bresp,
+  input                          m_axi_compute_logic_bvalid,
+  output                         m_axi_compute_logic_bready,
+  output                         m_axi_compute_logic_arid,
+  output                [63 : 0] m_axi_compute_logic_araddr,
+  output                 [7 : 0] m_axi_compute_logic_arlen,
+  output                 [2 : 0] m_axi_compute_logic_arsize,
+  output                 [1 : 0] m_axi_compute_logic_arburst,
+  output                 [3 : 0] m_axi_compute_logic_arcache,
+  output                 [2 : 0] m_axi_compute_logic_arprot,
+  output                         m_axi_compute_logic_arvalid,
+  input                          m_axi_compute_logic_arready,
+  input                          m_axi_compute_logic_rid,
+  input                [511 : 0] m_axi_compute_logic_rdata,
+  input                  [1 : 0] m_axi_compute_logic_rresp,
+  input                          m_axi_compute_logic_rlast,
+  input                          m_axi_compute_logic_rvalid,
+  output                         m_axi_compute_logic_rready,
+  output                         m_axi_compute_logic_arlock,
+  output                  [3:0]  m_axi_compute_logic_arqos,
+
   input                   [15:0] mod_rstn,
   output                  [15:0] mod_rst_done,
 
@@ -86,34 +157,156 @@ module box_250mhz #(
   input                          axis_aclk
 );
 
-  wire internal_box_rstn;
-
-  generic_reset #(
-    .NUM_INPUT_CLK  (1),
-    .RESET_DURATION (100)
-  ) reset_inst (
-    .mod_rstn     (box_rstn),
-    .mod_rst_done (box_rst_done),
-    .clk          (axil_aclk),
-    .rstn         (internal_box_rstn)
-  );
-
-  `include "box_250mhz_address_map_inst.vh"
-
-  generate if (USE_PHYS_FUNC == 0) begin
-    // Terminate H2C and C2H interfaces of the box
-    assign s_axis_qdma_h2c_tready     = {NUM_PHYS_FUNC{1'b1}};
-
-    assign m_axis_qdma_c2h_tvalid     = 0;
-    assign m_axis_qdma_c2h_tdata      = 0;
-    assign m_axis_qdma_c2h_tkeep      = 0;
-    assign m_axis_qdma_c2h_tlast      = 0;
-    assign m_axis_qdma_c2h_tuser_size = 0;
-    assign m_axis_qdma_c2h_tuser_src  = 0;
-    assign m_axis_qdma_c2h_tuser_dst  = 0;
-  end
-  endgenerate
-
-  `include "user_plugin_250mhz_inst.vh"
+localparam C_NUM_USER_BLOCK = 1;
+
+logic axil_rstn;
+logic axis_rstn;
+
+generic_reset #(
+  .NUM_INPUT_CLK  (2),
+  .RESET_DURATION (100)
+) reset_inst (
+  .mod_rstn     (box_rstn),
+  .mod_rst_done (box_rst_done),
+  .clk          ({axis_aclk, axil_aclk}),
+  .rstn         ({axis_rstn, axil_rstn})
+);
+
+// Make sure for all the unused reset pair, corresponding bits in
+// "mod_rst_done" are tied to 0
+assign mod_rst_done[15:C_NUM_USER_BLOCK] = {(16-C_NUM_USER_BLOCK){1'b1}};
+assign mod_rst_done[0]                   = box_rst_done;
+
+rdma_onic_plugin rdma_onic_plugin_inst (
+  .s_axil_awvalid            (s_axil_awvalid),
+  .s_axil_awaddr             (s_axil_awaddr),
+  .s_axil_awready            (s_axil_awready),
+  .s_axil_wvalid             (s_axil_wvalid),
+  .s_axil_wdata              (s_axil_wdata),
+  .s_axil_wready             (s_axil_wready),
+  .s_axil_bvalid             (s_axil_bvalid),
+  .s_axil_bresp              (s_axil_bresp),
+  .s_axil_bready             (s_axil_bready),
+  .s_axil_arvalid            (s_axil_arvalid),
+  .s_axil_araddr             (s_axil_araddr),
+  .s_axil_arready            (s_axil_arready),
+  .s_axil_rvalid             (s_axil_rvalid),
+  .s_axil_rdata              (s_axil_rdata),
+  .s_axil_rresp              (s_axil_rresp),
+  .s_axil_rready             (s_axil_rready),
+
+  // Receive packets from CMAC RX path
+  .s_axis_cmac_rx_tvalid     (s_axis_adap_rx_250mhz_tvalid),
+  .s_axis_cmac_rx_tdata      (s_axis_adap_rx_250mhz_tdata),
+  .s_axis_cmac_rx_tkeep      (s_axis_adap_rx_250mhz_tkeep),
+  .s_axis_cmac_rx_tlast      (s_axis_adap_rx_250mhz_tlast),
+  .s_axis_cmac_rx_tuser_size (s_axis_adap_rx_250mhz_tuser_size),
+  .s_axis_cmac_rx_tready     (s_axis_adap_rx_250mhz_tready),
+
+  .m_axis_user2rdma_roce_from_cmac_rx_tvalid (m_axis_user2rdma_roce_from_cmac_rx_tvalid),
+  .m_axis_user2rdma_roce_from_cmac_rx_tdata  (m_axis_user2rdma_roce_from_cmac_rx_tdata),
+  .m_axis_user2rdma_roce_from_cmac_rx_tkeep  (m_axis_user2rdma_roce_from_cmac_rx_tkeep),
+  .m_axis_user2rdma_roce_from_cmac_rx_tlast  (m_axis_user2rdma_roce_from_cmac_rx_tlast),
+  .m_axis_user2rdma_roce_from_cmac_rx_tready (m_axis_user2rdma_roce_from_cmac_rx_tready),
+
+  // Send packets to QDMA RX path
+  .m_axis_qdma_c2h_tvalid                    (m_axis_qdma_c2h_tvalid),
+  .m_axis_qdma_c2h_tdata                     (m_axis_qdma_c2h_tdata),
+  .m_axis_qdma_c2h_tkeep                     (m_axis_qdma_c2h_tkeep),
+  .m_axis_qdma_c2h_tlast                     (m_axis_qdma_c2h_tlast),
+  .m_axis_qdma_c2h_tuser_size                (m_axis_qdma_c2h_tuser_size),
+  .m_axis_qdma_c2h_tready                    (m_axis_qdma_c2h_tready),
+
+  // Get packets from QDMA TX path
+  .s_axis_qdma_h2c_tvalid                    (s_axis_qdma_h2c_tvalid),
+  .s_axis_qdma_h2c_tdata                     (s_axis_qdma_h2c_tdata),
+  .s_axis_qdma_h2c_tkeep                     (s_axis_qdma_h2c_tkeep),
+  .s_axis_qdma_h2c_tlast                     (s_axis_qdma_h2c_tlast),
+  .s_axis_qdma_h2c_tuser_size                (s_axis_qdma_h2c_tuser_size),
+  .s_axis_qdma_h2c_tready                    (s_axis_qdma_h2c_tready),
+
+  .m_axis_user2rdma_from_qdma_tx_tvalid      (m_axis_user2rdma_from_qdma_tx_tvalid),
+  .m_axis_user2rdma_from_qdma_tx_tdata       (m_axis_user2rdma_from_qdma_tx_tdata),
+  .m_axis_user2rdma_from_qdma_tx_tkeep       (m_axis_user2rdma_from_qdma_tx_tkeep),
+  .m_axis_user2rdma_from_qdma_tx_tlast       (m_axis_user2rdma_from_qdma_tx_tlast),
+  .m_axis_user2rdma_from_qdma_tx_tready      (m_axis_user2rdma_from_qdma_tx_tready),
+
+  // Send packets to CMAC TX path
+  .m_axis_cmac_tx_tvalid                     (m_axis_adap_tx_250mhz_tvalid),
+  .m_axis_cmac_tx_tdata                      (m_axis_adap_tx_250mhz_tdata),
+  .m_axis_cmac_tx_tkeep                      (m_axis_adap_tx_250mhz_tkeep),
+  .m_axis_cmac_tx_tlast                      (m_axis_adap_tx_250mhz_tlast),
+  .m_axis_cmac_tx_tuser_size                 (m_axis_adap_tx_250mhz_tuser_size),
+  .m_axis_cmac_tx_tready                     (m_axis_adap_tx_250mhz_tready),
+
+  .s_axis_rdma2user_to_cmac_tx_tvalid        (s_axis_rdma2user_to_cmac_tx_tvalid),
+  .s_axis_rdma2user_to_cmac_tx_tdata         (s_axis_rdma2user_to_cmac_tx_tdata),
+  .s_axis_rdma2user_to_cmac_tx_tkeep         (s_axis_rdma2user_to_cmac_tx_tkeep),
+  .s_axis_rdma2user_to_cmac_tx_tlast         (s_axis_rdma2user_to_cmac_tx_tlast),
+  .s_axis_rdma2user_to_cmac_tx_tready        (s_axis_rdma2user_to_cmac_tx_tready),
+
+  .m_axi_compute_logic_awid                  (m_axi_compute_logic_awid),
+  .m_axi_compute_logic_awaddr                (m_axi_compute_logic_awaddr),
+  .m_axi_compute_logic_awqos                 (m_axi_compute_logic_awqos),
+  .m_axi_compute_logic_awlen                 (m_axi_compute_logic_awlen),
+  .m_axi_compute_logic_awsize                (m_axi_compute_logic_awsize),
+  .m_axi_compute_logic_awburst               (m_axi_compute_logic_awburst),
+  .m_axi_compute_logic_awcache               (m_axi_compute_logic_awcache),
+  .m_axi_compute_logic_awprot                (m_axi_compute_logic_awprot),
+  .m_axi_compute_logic_awvalid               (m_axi_compute_logic_awvalid),
+  .m_axi_compute_logic_awready               (m_axi_compute_logic_awready),
+  .m_axi_compute_logic_wdata                 (m_axi_compute_logic_wdata),
+  .m_axi_compute_logic_wstrb                 (m_axi_compute_logic_wstrb),
+  .m_axi_compute_logic_wlast                 (m_axi_compute_logic_wlast),
+  .m_axi_compute_logic_wvalid                (m_axi_compute_logic_wvalid),
+  .m_axi_compute_logic_wready                (m_axi_compute_logic_wready),
+  .m_axi_compute_logic_awlock                (m_axi_compute_logic_awlock),
+  .m_axi_compute_logic_bid                   (m_axi_compute_logic_bid),
+  .m_axi_compute_logic_bresp                 (m_axi_compute_logic_bresp),
+  .m_axi_compute_logic_bvalid                (m_axi_compute_logic_bvalid),
+  .m_axi_compute_logic_bready                (m_axi_compute_logic_bready),
+  .m_axi_compute_logic_arid                  (m_axi_compute_logic_arid),
+  .m_axi_compute_logic_araddr                (m_axi_compute_logic_araddr),
+  .m_axi_compute_logic_arlen                 (m_axi_compute_logic_arlen),
+  .m_axi_compute_logic_arsize                (m_axi_compute_logic_arsize),
+  .m_axi_compute_logic_arburst               (m_axi_compute_logic_arburst),
+  .m_axi_compute_logic_arcache               (m_axi_compute_logic_arcache),
+  .m_axi_compute_logic_arprot                (m_axi_compute_logic_arprot),
+  .m_axi_compute_logic_arvalid               (m_axi_compute_logic_arvalid),
+  .m_axi_compute_logic_arready               (m_axi_compute_logic_arready),
+  .m_axi_compute_logic_rid                   (m_axi_compute_logic_rid),
+  .m_axi_compute_logic_rdata                 (m_axi_compute_logic_rdata),
+  .m_axi_compute_logic_rresp                 (m_axi_compute_logic_rresp),
+  .m_axi_compute_logic_rlast                 (m_axi_compute_logic_rlast),
+  .m_axi_compute_logic_rvalid                (m_axi_compute_logic_rvalid),
+  .m_axi_compute_logic_rready                (m_axi_compute_logic_rready),
+  .m_axi_compute_logic_arlock                (m_axi_compute_logic_arlock),
+  .m_axi_compute_logic_arqos                 (m_axi_compute_logic_arqos),
+
+  .axil_aclk  (axil_aclk),
+  .axil_rstn  (axil_rstn),
+  .axis_aclk  (axis_aclk),
+  .axis_rstn  (axis_rstn)
+);
+
+assign m_axis_qdma_c2h_tuser_src = 16'd0;
+assign m_axis_qdma_c2h_tuser_dst = 16'h1 << 0;
+assign m_axis_adap_tx_250mhz_tuser_src = 16'd0;
+assign m_axis_adap_tx_250mhz_tuser_dst = 16'h1 << 6;
+
+// TODO: Disable hardware handshaking for doorbell ringing in the current implementation
+assign s_resp_hndler_o_send_cq_db_rdy = 1'b0;
+assign s_rx_pkt_hndler_o_rq_db_rdy    = 1'b0;
+
+assign m_o_qp_sq_pidb_hndshk          = 0;
+assign m_o_qp_sq_pidb_wr_addr_hndshk  = 0;
+assign m_o_qp_sq_pidb_wr_valid_hndshk = 0;
+
+assign m_o_qp_rq_cidb_hndshk          = 0;
+assign m_o_qp_rq_cidb_wr_addr_hndshk  = 0;
+assign m_o_qp_rq_cidb_wr_valid_hndshk = 0;
+
+// TODO: Disable ieth and immdt data
+assign s_axis_rdma2user_ieth_immdt_trdy = 1'b1;
 
 endmodule: box_250mhz
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au55c.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au55c.tcl
new file mode 100644
index 0000000..425b800
--- /dev/null
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au55c.tcl
@@ -0,0 +1,47 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set cmac_usplus cmac_usplus_0
+create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.CMAC_CAUI4_MODE {1}
+    CONFIG.NUM_LANES {4x25}
+    CONFIG.GT_REF_CLK_FREQ {161.1328125}
+    CONFIG.USER_INTERFACE {AXIS}
+    CONFIG.GT_DRP_CLK {125.00}
+    CONFIG.ENABLE_AXI_INTERFACE {1}
+    CONFIG.INCLUDE_STATISTICS_COUNTERS {1}
+    CONFIG.CMAC_CORE_SELECT {CMACE4_X0Y3}
+    CONFIG.GT_GROUP_SELECT {X0Y24~X0Y27}
+    CONFIG.LANE1_GT_LOC {X0Y24}
+    CONFIG.LANE2_GT_LOC {X0Y25}
+    CONFIG.LANE3_GT_LOC {X0Y26}
+    CONFIG.LANE4_GT_LOC {X0Y27}
+    CONFIG.LANE5_GT_LOC {NA}
+    CONFIG.LANE6_GT_LOC {NA}
+    CONFIG.LANE7_GT_LOC {NA}
+    CONFIG.LANE8_GT_LOC {NA}
+    CONFIG.LANE9_GT_LOC {NA}
+    CONFIG.LANE10_GT_LOC {NA}
+    CONFIG.RX_GT_BUFFER {1}
+    CONFIG.GT_RX_BUFFER_BYPASS {0}
+    CONFIG.INS_LOSS_NYQ {20}
+    CONFIG.INCLUDE_RS_FEC {1}
+    CONFIG.ENABLE_PIPELINE_REG {1}
+} [get_ips $cmac_usplus]
+set_property CONFIG.RX_MIN_PACKET_LEN $min_pkt_len [get_ips $cmac_usplus]
+set_property CONFIG.RX_MAX_PACKET_LEN $max_pkt_len [get_ips $cmac_usplus]
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au55c.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au55c.tcl
new file mode 100644
index 0000000..a45c1f7
--- /dev/null
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au55c.tcl
@@ -0,0 +1,49 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set cmac_usplus cmac_usplus_1
+create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.CMAC_CAUI4_MODE {1}
+    CONFIG.NUM_LANES {4x25}
+    CONFIG.GT_REF_CLK_FREQ {161.1328125}
+    CONFIG.USER_INTERFACE {AXIS}
+    CONFIG.GT_DRP_CLK {125.00}
+    CONFIG.ENABLE_AXI_INTERFACE {1}
+    CONFIG.INCLUDE_STATISTICS_COUNTERS {1}
+    CONFIG.CMAC_CORE_SELECT {CMACE4_X0Y4}
+    CONFIG.GT_GROUP_SELECT {X0Y28~X0Y31}
+    CONFIG.LANE1_GT_LOC {X0Y28}
+    CONFIG.LANE2_GT_LOC {X0Y29}
+    CONFIG.LANE3_GT_LOC {X0Y30}
+    CONFIG.LANE4_GT_LOC {X0Y31}
+    CONFIG.LANE5_GT_LOC {NA}
+    CONFIG.LANE6_GT_LOC {NA}
+    CONFIG.LANE7_GT_LOC {NA}
+    CONFIG.LANE8_GT_LOC {NA}
+    CONFIG.LANE9_GT_LOC {NA}
+    CONFIG.LANE10_GT_LOC {NA}
+    CONFIG.RX_GT_BUFFER {1}
+    CONFIG.GT_RX_BUFFER_BYPASS {0}
+    CONFIG.INS_LOSS_NYQ {20}
+    CONFIG.INCLUDE_RS_FEC {1}
+    CONFIG.ETHERNET_BOARD_INTERFACE {qsfp1_4x}
+    CONFIG.DIFFCLK_BOARD_INTERFACE {qsfp1_refclk0}
+    CONFIG.ENABLE_PIPELINE_REG {1}
+} [get_ips $cmac_usplus]
+set_property CONFIG.RX_MIN_PACKET_LEN $min_pkt_len [get_ips $cmac_usplus]
+set_property CONFIG.RX_MAX_PACKET_LEN $max_pkt_len [get_ips $cmac_usplus]
diff --git a/src/mem_ctrl/au250/vivado_ip/dev_mem_ddr4_controller_au250.tcl b/src/mem_ctrl/au250/vivado_ip/dev_mem_ddr4_controller_au250.tcl
new file mode 100755
index 0000000..2cd467b
--- /dev/null
+++ b/src/mem_ctrl/au250/vivado_ip/dev_mem_ddr4_controller_au250.tcl
@@ -0,0 +1,170 @@
+# *************************************************************************
+#
+# Copyright 2023 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set ddr4_controller dev_mem_ddr4_controller
+
+create_ip -name ddr4 -vendor xilinx.com -library ip -module_name $ddr4_controller -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.C0.ControllerType {DDR4_SDRAM}
+    CONFIG.IOPowerReduction {OFF}
+    CONFIG.Enable_SysPorts {true}
+    CONFIG.Phy_Only {Complete_Memory_Controller}
+    CONFIG.RESET_BOARD_INTERFACE {pcie_perstn}
+    CONFIG.C0_CLOCK_BOARD_INTERFACE {default_300mhz_clk0}
+    CONFIG.IS_FROM_PHY {1}
+    CONFIG.RECONFIG_XSDB_SAVE_RESTORE {false}
+    CONFIG.AL_SEL {0}
+    CONFIG.Example_TG {SIMPLE_TG}
+    CONFIG.C0.DDR4_Clamshell {false}
+    CONFIG.C0.MIGRATION {false}
+    CONFIG.TIMING_OP1 {false}
+    CONFIG.TIMING_OP2 {false}
+    CONFIG.TIMING_3DS {false}
+    CONFIG.SET_DW_TO_40 {false}
+    CONFIG.DIFF_TERM_SYSCLK {false}
+    CONFIG.C0_DDR4_BOARD_INTERFACE {ddr4_sdram_c0}
+    CONFIG.C0.DDR4_TimePeriod {833}
+    CONFIG.C0.DDR4_InputClockPeriod {3332}
+    CONFIG.C0.DDR4_Specify_MandD {false}
+    CONFIG.C0.DDR4_CLKFBOUT_MULT {5}
+    CONFIG.C0.DDR4_DIVCLK_DIVIDE {1}
+    CONFIG.C0.DDR4_CLKOUT0_DIVIDE {5}
+    CONFIG.C0.DDR4_PhyClockRatio {4:1}
+    CONFIG.C0.DDR4_MemoryType {RDIMMs}
+    CONFIG.C0.DDR4_MemoryPart {MTA18ASF2G72PZ-2G3}
+    CONFIG.C0.DDR4_Slot {Single}
+    CONFIG.C0.DDR4_MemoryVoltage {1.2V}
+    CONFIG.C0.DDR4_DataWidth {72}
+    CONFIG.C0.DDR4_DataMask {NONE}
+    CONFIG.C0.DDR4_Ecc {true}
+    CONFIG.C0.DDR4_AxiSelection {true}
+    CONFIG.C0.DDR4_AUTO_AP_COL_A3 {true}
+    CONFIG.C0.DDR4_Ordering {Normal}
+    CONFIG.C0.DDR4_BurstLength {8}
+    CONFIG.C0.DDR4_BurstType {Sequential}
+    CONFIG.C0.DDR4_OutputDriverImpedenceControl {RZQ/7}
+    CONFIG.C0.DDR4_OnDieTermination {RZQ/6}
+    CONFIG.C0.DDR4_CasLatency {17}
+    CONFIG.C0.DDR4_CasWriteLatency {12}
+    CONFIG.C0.DDR4_ChipSelect {true}
+    CONFIG.C0.DDR4_isCKEShared {false}
+    CONFIG.C0.DDR4_AxiDataWidth {512}
+    CONFIG.C0.DDR4_AxiArbitrationScheme {RD_PRI_REG}
+    CONFIG.C0.DDR4_AxiNarrowBurst {false}
+    CONFIG.C0.DDR4_AxiAddressWidth {34}
+    CONFIG.C0.DDR4_AxiIDWidth {8}
+    CONFIG.C0.DDR4_Capacity {512}
+    CONFIG.C0.DDR4_Mem_Add_Map {ROW_COLUMN_BANK_INTLV}
+    CONFIG.C0.DDR4_MemoryName {MainMemory}
+    CONFIG.C0.DDR4_AutoPrecharge {false}
+    CONFIG.C0.DDR4_UserRefresh_ZQCS {false}
+    CONFIG.C0.DDR4_CustomParts {no_file_loaded}
+    CONFIG.C0.DDR4_isCustom {false}
+    CONFIG.C0.DDR4_SELF_REFRESH {false}
+    CONFIG.C0.DDR4_SAVE_RESTORE {false}
+    CONFIG.C0.DDR4_RESTORE_CRC {false}
+    CONFIG.ADDN_UI_CLKOUT1_FREQ_HZ {250}
+    CONFIG.ADDN_UI_CLKOUT2_FREQ_HZ {None}
+    CONFIG.ADDN_UI_CLKOUT3_FREQ_HZ {None}
+    CONFIG.ADDN_UI_CLKOUT4_FREQ_HZ {None}
+    CONFIG.CLKOUT6 {false}
+    CONFIG.No_Controller {1}
+    CONFIG.System_Clock {Differential}
+    CONFIG.Reference_Clock {Differential}
+    CONFIG.Debug_Signal {Disable}
+    CONFIG.IO_Power_Reduction {false}
+    CONFIG.DCI_Cascade {false}
+    CONFIG.Default_Bank_Selections {false}
+    CONFIG.Simulation_Mode {BFM}
+    CONFIG.PARTIAL_RECONFIG_FLOW_MIG {false}
+    CONFIG.MCS_DBG_EN {false}
+    CONFIG.C0.DDR4_CK_SKEW_0 {0}
+    CONFIG.C0.DDR4_CK_SKEW_1 {0}
+    CONFIG.C0.DDR4_CK_SKEW_2 {0}
+    CONFIG.C0.DDR4_CK_SKEW_3 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_0 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_1 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_2 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_3 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_4 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_5 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_6 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_7 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_8 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_9 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_10 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_11 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_12 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_13 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_14 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_15 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_16 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_17 {0}
+    CONFIG.C0.DDR4_BA_SKEW_0 {0}
+    CONFIG.C0.DDR4_BA_SKEW_1 {0}
+    CONFIG.C0.DDR4_BG_SKEW_0 {0}
+    CONFIG.C0.DDR4_BG_SKEW_1 {0}
+    CONFIG.C0.DDR4_CS_SKEW_0 {0}
+    CONFIG.C0.DDR4_CS_SKEW_1 {0}
+    CONFIG.C0.DDR4_CS_SKEW_2 {0}
+    CONFIG.C0.DDR4_CS_SKEW_3 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_0 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_1 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_2 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_3 {0}
+    CONFIG.C0.DDR4_ACT_SKEW {0}
+    CONFIG.C0.DDR4_PAR_SKEW {0}
+    CONFIG.C0.DDR4_ODT_SKEW_0 {0}
+    CONFIG.C0.DDR4_ODT_SKEW_1 {0}
+    CONFIG.C0.DDR4_ODT_SKEW_2 {0}
+    CONFIG.C0.DDR4_ODT_SKEW_3 {0}
+    CONFIG.C0.DDR4_LR_SKEW_0 {0}
+    CONFIG.C0.DDR4_LR_SKEW_1 {0}
+    CONFIG.C0.DDR4_TREFI {0}
+    CONFIG.C0.DDR4_TRFC {0}
+    CONFIG.C0.DDR4_TRFC_DLR {0}
+    CONFIG.C0.DDR4_TXPR {0}
+    CONFIG.C0.DDR4_nCK_TREFI {0}
+    CONFIG.C0.DDR4_nCK_TRFC {0}
+    CONFIG.C0.DDR4_nCK_TRFC_DLR {0}
+    CONFIG.C0.DDR4_nCK_TXPR {0}
+    CONFIG.C0.ADDR_WIDTH {17}
+    CONFIG.C0.BANK_GROUP_WIDTH {2}
+    CONFIG.C0.LR_WIDTH {1}
+    CONFIG.C0.CK_WIDTH {1}
+    CONFIG.C0.CKE_WIDTH {1}
+    CONFIG.C0.CS_WIDTH {1}
+    CONFIG.C0.ODT_WIDTH {1}
+    CONFIG.C0.StackHeight {1}
+    CONFIG.PING_PONG_PHY {1}
+    CONFIG.C0.DDR4_Enable_LVAUX {false}
+    CONFIG.C0.DDR4_EN_PARITY {true}
+    CONFIG.EN_PP_4R_MIR {false}
+    CONFIG.MCS_WO_DSP {false}
+    CONFIG.C0_SYS_CLK_I.INSERT_VIP {0}
+    CONFIG.C0_DDR4_S_AXI_CTRL.INSERT_VIP {0}
+    CONFIG.C0_DDR4_S_AXI.INSERT_VIP {0}
+    CONFIG.C0_DDR4_ARESETN.INSERT_VIP {0}
+    CONFIG.C0_DDR4_RESET.INSERT_VIP {0}
+    CONFIG.C0_DDR4_CLOCK.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT1.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT2.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT3.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT4.INSERT_VIP {0}
+    CONFIG.SYSTEM_RESET.INSERT_VIP {0}
+} [get_ips $ddr4_controller]
\ No newline at end of file
diff --git a/src/mem_ctrl/au250/vivado_ip/vivado_ip.tcl b/src/mem_ctrl/au250/vivado_ip/vivado_ip.tcl
new file mode 100755
index 0000000..f47097d
--- /dev/null
+++ b/src/mem_ctrl/au250/vivado_ip/vivado_ip.tcl
@@ -0,0 +1,20 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set ips {
+    dev_mem_ddr4_controller
+}
\ No newline at end of file
diff --git a/src/mem_ctrl/hbm_bd.tcl b/src/mem_ctrl/hbm_bd.tcl
new file mode 100644
index 0000000..90b2218
--- /dev/null
+++ b/src/mem_ctrl/hbm_bd.tcl
@@ -0,0 +1,425 @@
+
+################################################################
+# This is a generated script based on design: hbm_bd
+#
+# Though there are limitations about the generated script,
+# the main purpose of this utility is to make learning
+# IP Integrator Tcl commands easier.
+################################################################
+
+namespace eval _tcl {
+proc get_script_folder {} {
+   set script_path [file normalize [info script]]
+   set script_folder [file dirname $script_path]
+   return $script_folder
+}
+}
+variable script_folder
+set script_folder [_tcl::get_script_folder]
+
+################################################################
+# Check if script is running in correct Vivado version.
+################################################################
+set scripts_vivado_version 2024.2
+set current_vivado_version [version -short]
+
+if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
+   puts ""
+   if { [string compare $scripts_vivado_version $current_vivado_version] > 0 } {
+      catch {common::send_gid_msg -ssname BD::TCL -id 2042 -severity "ERROR" " This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Sourcing the script failed since it was created with a future version of Vivado."}
+
+   } else {
+     catch {common::send_gid_msg -ssname BD::TCL -id 2041 -severity "ERROR" "This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."}
+
+   }
+
+   return 1
+}
+
+################################################################
+# START
+################################################################
+
+# To test this script, run the following commands from Vivado Tcl console:
+# source hbm_bd.tcl
+
+# If there is no project opened, this script will create a
+# project, but make sure you do not have an existing project
+# <./myproj/project_1.xpr> in the current working folder.
+
+set list_projs [get_projects -quiet]
+if { $list_projs eq "" } {
+   create_project project_1 myproj -part xcu55c-fsvh2892-2L-e
+   set_property BOARD_PART xilinx.com:au55c:part0:1.0 [current_project]
+}
+
+
+# CHANGE DESIGN NAME HERE
+variable design_name
+set design_name hbm_bd
+
+# If you do not already have an existing IP Integrator design open,
+# you can create a design using the following command:
+#    create_bd_design $design_name
+
+# Creating design if needed
+set errMsg ""
+set nRet 0
+
+set cur_design [current_bd_design -quiet]
+set list_cells [get_bd_cells -quiet]
+
+if { ${design_name} eq "" } {
+   # USE CASES:
+   #    1) Design_name not set
+
+   set errMsg "Please set the variable <design_name> to a non-empty value."
+   set nRet 1
+
+} elseif { ${cur_design} ne "" && ${list_cells} eq "" } {
+   # USE CASES:
+   #    2): Current design opened AND is empty AND names same.
+   #    3): Current design opened AND is empty AND names diff; design_name NOT in project.
+   #    4): Current design opened AND is empty AND names diff; design_name exists in project.
+
+   if { $cur_design ne $design_name } {
+      common::send_gid_msg -ssname BD::TCL -id 2001 -severity "INFO" "Changing value of <design_name> from <$design_name> to <$cur_design> since current design is empty."
+      set design_name [get_property NAME $cur_design]
+   }
+   common::send_gid_msg -ssname BD::TCL -id 2002 -severity "INFO" "Constructing design in IPI design <$cur_design>..."
+
+} elseif { ${cur_design} ne "" && $list_cells ne "" && $cur_design eq $design_name } {
+   # USE CASES:
+   #    5) Current design opened AND has components AND same names.
+
+   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
+   set nRet 1
+} elseif { [get_files -quiet ${design_name}.bd] ne "" } {
+   # USE CASES:
+   #    6) Current opened design, has components, but diff names, design_name exists in project.
+   #    7) No opened design, design_name exists in project.
+
+   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
+   set nRet 2
+
+} else {
+   # USE CASES:
+   #    8) No opened design, design_name not in project.
+   #    9) Current opened design, has components, but diff names, design_name not in project.
+
+   common::send_gid_msg -ssname BD::TCL -id 2003 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."
+
+   create_bd_design $design_name
+
+   common::send_gid_msg -ssname BD::TCL -id 2004 -severity "INFO" "Making design <$design_name> as current_bd_design."
+   current_bd_design $design_name
+
+}
+
+common::send_gid_msg -ssname BD::TCL -id 2005 -severity "INFO" "Currently the variable <design_name> is equal to \"$design_name\"."
+
+if { $nRet != 0 } {
+   catch {common::send_gid_msg -ssname BD::TCL -id 2006 -severity "ERROR" $errMsg}
+   return $nRet
+}
+
+set bCheckIPsPassed 1
+##################################################################
+# CHECK IPs
+##################################################################
+set bCheckIPs 1
+if { $bCheckIPs == 1 } {
+   set list_check_ips "\
+xilinx.com:ip:hbm:1.0\
+xilinx.com:ip:clk_wiz:6.0\
+xilinx.com:ip:proc_sys_reset:5.0\
+xilinx.com:ip:smartconnect:1.0\
+"
+
+   set list_ips_missing ""
+   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."
+
+   foreach ip_vlnv $list_check_ips {
+      set ip_obj [get_ipdefs -all $ip_vlnv]
+      if { $ip_obj eq "" } {
+         lappend list_ips_missing $ip_vlnv
+      }
+   }
+
+   if { $list_ips_missing ne "" } {
+      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
+      set bCheckIPsPassed 0
+   }
+
+}
+
+if { $bCheckIPsPassed != 1 } {
+  common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
+  return 3
+}
+
+##################################################################
+# DESIGN PROCs
+##################################################################
+
+
+
+# Procedure to create entire design; Provide argument to make
+# procedure reusable. If parentCell is "", will use root.
+proc create_root_design { parentCell } {
+
+  variable script_folder
+  variable design_name
+
+  if { $parentCell eq "" } {
+     set parentCell [get_bd_cells /]
+  }
+
+  # Get object for parentCell
+  set parentObj [get_bd_cells $parentCell]
+  if { $parentObj == "" } {
+     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
+     return
+  }
+
+  # Make sure parentObj is hier blk
+  set parentType [get_property TYPE $parentObj]
+  if { $parentType ne "hier" } {
+     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
+     return
+  }
+
+  # Save current instance; Restore later
+  set oldCurInst [current_bd_instance .]
+
+  # Set parent object as current
+  current_bd_instance $parentObj
+
+
+  # Create interface ports
+  set s_axi_hbm [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_hbm ]
+  set_property -dict [ list \
+   CONFIG.ADDR_WIDTH {64} \
+   CONFIG.ARUSER_WIDTH {32} \
+   CONFIG.AWUSER_WIDTH {32} \
+   CONFIG.BUSER_WIDTH {0} \
+   CONFIG.DATA_WIDTH {512} \
+   CONFIG.FREQ_HZ {250000000} \
+   CONFIG.HAS_BRESP {1} \
+   CONFIG.HAS_BURST {0} \
+   CONFIG.HAS_CACHE {1} \
+   CONFIG.HAS_LOCK {1} \
+   CONFIG.HAS_PROT {1} \
+   CONFIG.HAS_QOS {0} \
+   CONFIG.HAS_REGION {0} \
+   CONFIG.HAS_RRESP {1} \
+   CONFIG.HAS_WSTRB {1} \
+   CONFIG.ID_WIDTH {4} \
+   CONFIG.MAX_BURST_LENGTH {256} \
+   CONFIG.NUM_READ_OUTSTANDING {32} \
+   CONFIG.NUM_READ_THREADS {1} \
+   CONFIG.NUM_WRITE_OUTSTANDING {32} \
+   CONFIG.NUM_WRITE_THREADS {1} \
+   CONFIG.PROTOCOL {AXI4} \
+   CONFIG.READ_WRITE_MODE {READ_WRITE} \
+   CONFIG.RUSER_BITS_PER_BYTE {0} \
+   CONFIG.RUSER_WIDTH {0} \
+   CONFIG.SUPPORTS_NARROW_BURST {0} \
+   CONFIG.WUSER_BITS_PER_BYTE {0} \
+   CONFIG.WUSER_WIDTH {64} \
+   ] $s_axi_hbm
+
+
+  # Create ports
+  set axi_resetn [ create_bd_port -dir I axi_resetn ]
+  set hbm_ref_clk [ create_bd_port -dir I -type clk -freq_hz 100000000 hbm_ref_clk ]
+  set axi_clk [ create_bd_port -dir I -type clk -freq_hz 250000000 axi_clk ]
+  set_property -dict [ list \
+   CONFIG.ASSOCIATED_BUSIF {s_axi_hbm} \
+   CONFIG.CLK_DOMAIN {qdma_hbm_bd_qdma_0_0_axi_aclk} \
+ ] $axi_clk
+
+  # Create instance: hbm_0, and set properties
+  set hbm_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:hbm:1.0 hbm_0 ]
+  set_property -dict [list \
+    CONFIG.USER_APB_EN {false} \
+    CONFIG.USER_AXI_INPUT_CLK1_FREQ {250} \
+    CONFIG.USER_AXI_INPUT_CLK_FREQ {250} \
+    CONFIG.USER_HBM_DENSITY {16GB} \
+    CONFIG.USER_MC0_USER_PARITY_EN {false} \
+    CONFIG.USER_SAXI_00 {false} \
+    CONFIG.USER_SAXI_01 {false} \
+    CONFIG.USER_SAXI_02 {false} \
+    CONFIG.USER_SAXI_03 {false} \
+    CONFIG.USER_SAXI_04 {false} \
+    CONFIG.USER_SAXI_05 {false} \
+    CONFIG.USER_SAXI_06 {false} \
+    CONFIG.USER_SAXI_07 {false} \
+    CONFIG.USER_SAXI_08 {false} \
+    CONFIG.USER_SAXI_09 {false} \
+    CONFIG.USER_SAXI_10 {false} \
+    CONFIG.USER_SAXI_11 {false} \
+    CONFIG.USER_SAXI_12 {false} \
+    CONFIG.USER_SAXI_13 {false} \
+    CONFIG.USER_SAXI_14 {false} \
+    CONFIG.USER_SAXI_17 {false} \
+    CONFIG.USER_SAXI_18 {false} \
+    CONFIG.USER_SAXI_19 {false} \
+    CONFIG.USER_SAXI_20 {false} \
+    CONFIG.USER_SAXI_21 {false} \
+    CONFIG.USER_SAXI_22 {false} \
+    CONFIG.USER_SAXI_23 {false} \
+    CONFIG.USER_SAXI_24 {false} \
+    CONFIG.USER_SAXI_25 {false} \
+    CONFIG.USER_SAXI_26 {false} \
+    CONFIG.USER_SAXI_27 {false} \
+    CONFIG.USER_SAXI_28 {false} \
+    CONFIG.USER_SAXI_29 {false} \
+    CONFIG.USER_SAXI_30 {false} \
+    CONFIG.USER_SAXI_31 {false} \
+  ] $hbm_0
+
+
+  # Create instance: clk_wiz_0, and set properties
+  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
+  set_property -dict [list \
+    CONFIG.CLKIN1_JITTER_PS {100.0} \
+    CONFIG.CLKOUT1_JITTER {115.831} \
+    CONFIG.CLKOUT1_PHASE_ERROR {87.180} \
+    CONFIG.CLK_IN1_BOARD_INTERFACE {Custom} \
+    CONFIG.MMCM_CLKFBOUT_MULT_F {12.000} \
+    CONFIG.MMCM_CLKIN1_PERIOD {10.000} \
+    CONFIG.MMCM_CLKIN2_PERIOD {10.000} \
+    CONFIG.MMCM_DIVCLK_DIVIDE {1} \
+    CONFIG.PRIM_SOURCE {Single_ended_clock_capable_pin} \
+    CONFIG.RESET_PORT {resetn} \
+    CONFIG.RESET_TYPE {ACTIVE_LOW} \
+  ] $clk_wiz_0
+
+
+  # Create instance: proc_sys_reset_0, and set properties
+  set proc_sys_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_0 ]
+
+  # Create instance: smartconnect_0, and set properties
+  set smartconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect:1.0 smartconnect_0 ]
+  set_property -dict [list \
+    CONFIG.NUM_MI {2} \
+    CONFIG.NUM_SI {1} \
+  ] $smartconnect_0
+
+
+  # Create interface connections
+  connect_bd_intf_net -intf_net S00_AXI_0_1 [get_bd_intf_ports s_axi_hbm] [get_bd_intf_pins smartconnect_0/S00_AXI]
+  connect_bd_intf_net -intf_net smartconnect_0_M00_AXI [get_bd_intf_pins smartconnect_0/M00_AXI] [get_bd_intf_pins hbm_0/SAXI_15_8HI]
+  connect_bd_intf_net -intf_net smartconnect_0_M01_AXI [get_bd_intf_pins smartconnect_0/M01_AXI] [get_bd_intf_pins hbm_0/SAXI_16_8HI]
+
+  # Create port connections
+  connect_bd_net -net aclk_0_1  [get_bd_ports axi_clk] \
+  [get_bd_pins smartconnect_0/aclk] \
+  [get_bd_pins hbm_0/AXI_15_ACLK] \
+  [get_bd_pins hbm_0/AXI_16_ACLK]
+  connect_bd_net -net clk_in1_0_1  [get_bd_ports hbm_ref_clk] \
+  [get_bd_pins clk_wiz_0/clk_in1]
+  connect_bd_net -net clk_wiz_0_clk_out1  [get_bd_pins clk_wiz_0/clk_out1] \
+  [get_bd_pins hbm_0/HBM_REF_CLK_0] \
+  [get_bd_pins hbm_0/HBM_REF_CLK_1] \
+  [get_bd_pins hbm_0/APB_0_PCLK] \
+  [get_bd_pins hbm_0/APB_1_PCLK] \
+  [get_bd_pins proc_sys_reset_0/slowest_sync_clk]
+  connect_bd_net -net clk_wiz_0_locked  [get_bd_pins clk_wiz_0/locked] \
+  [get_bd_pins proc_sys_reset_0/dcm_locked]
+  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn  [get_bd_pins proc_sys_reset_0/peripheral_aresetn] \
+  [get_bd_pins hbm_0/APB_0_PRESET_N] \
+  [get_bd_pins hbm_0/APB_1_PRESET_N]
+  connect_bd_net -net qdma_0_axi_aresetn  [get_bd_ports axi_resetn] \
+  [get_bd_pins hbm_0/AXI_15_ARESET_N] \
+  [get_bd_pins hbm_0/AXI_16_ARESET_N] \
+  [get_bd_pins smartconnect_0/aresetn] \
+  [get_bd_pins clk_wiz_0/resetn] \
+  [get_bd_pins proc_sys_reset_0/ext_reset_in]
+
+  # Create address segments
+  assign_bd_address -offset 0x00000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM00] -force
+  assign_bd_address -offset 0x10000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM00_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM00] -force
+  assign_bd_address -offset 0x20000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM01] -force
+  assign_bd_address -offset 0x40000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM02] -force
+  assign_bd_address -offset 0x50000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM02_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM02] -force
+  assign_bd_address -offset 0x60000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM03] -force
+  assign_bd_address -offset 0x70000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM03_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM03] -force
+  assign_bd_address -offset 0x80000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM04] -force
+  assign_bd_address -offset 0x90000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM04_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM04] -force
+  assign_bd_address -offset 0xA0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM05] -force
+  assign_bd_address -offset 0xB0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM05_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM05] -force
+  assign_bd_address -offset 0xC0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM06] -force
+  assign_bd_address -offset 0xD0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM06_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM06] -force
+  assign_bd_address -offset 0xE0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM07] -force
+  assign_bd_address -offset 0xF0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM07_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM07] -force
+  assign_bd_address -offset 0x000100000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM08] -force
+  assign_bd_address -offset 0x000110000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM08_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM08] -force
+  assign_bd_address -offset 0x000120000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM09] -force
+  assign_bd_address -offset 0x000130000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM09_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM09] -force
+  assign_bd_address -offset 0x000140000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM10] -force
+  assign_bd_address -offset 0x000150000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM10_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM10] -force
+  assign_bd_address -offset 0x000160000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM11] -force
+  assign_bd_address -offset 0x000170000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM11_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM11] -force
+  assign_bd_address -offset 0x000180000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM12] -force
+  assign_bd_address -offset 0x000190000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM12_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM12] -force
+  assign_bd_address -offset 0x0001A0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM13] -force
+  assign_bd_address -offset 0x0001B0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM13_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM13] -force
+  assign_bd_address -offset 0x0001C0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM14] -force
+  assign_bd_address -offset 0x0001D0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM14_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM14] -force
+  assign_bd_address -offset 0x0001E0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM15] -force
+  assign_bd_address -offset 0x0001F0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM15_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM15] -force
+  assign_bd_address -offset 0x000200000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM16] -force
+  assign_bd_address -offset 0x000210000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM16_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM16] -force
+  assign_bd_address -offset 0x000220000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM17] -force
+  assign_bd_address -offset 0x000230000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM17_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM17] -force
+  assign_bd_address -offset 0x000240000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM18] -force
+  assign_bd_address -offset 0x000250000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM18_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM18] -force
+  assign_bd_address -offset 0x000260000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM19] -force
+  assign_bd_address -offset 0x000270000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM19_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM19] -force
+  assign_bd_address -offset 0x000280000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM20] -force
+  assign_bd_address -offset 0x000290000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM20_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM20] -force
+  assign_bd_address -offset 0x0002A0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM21] -force
+  assign_bd_address -offset 0x0002B0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM21_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM21] -force
+  assign_bd_address -offset 0x0002C0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM22] -force
+  assign_bd_address -offset 0x0002D0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM22_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM22] -force
+  assign_bd_address -offset 0x0002E0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM23] -force
+  assign_bd_address -offset 0x0002F0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM23_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM23] -force
+  assign_bd_address -offset 0x000300000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM24] -force
+  assign_bd_address -offset 0x000310000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM24_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM24] -force
+  assign_bd_address -offset 0x000320000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM25] -force
+  assign_bd_address -offset 0x000330000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM25_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM25] -force
+  assign_bd_address -offset 0x000340000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM26] -force
+  assign_bd_address -offset 0x000350000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM26_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM26] -force
+  assign_bd_address -offset 0x000360000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM27] -force
+  assign_bd_address -offset 0x000370000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM27_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM27] -force
+  assign_bd_address -offset 0x000380000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM28] -force
+  assign_bd_address -offset 0x000390000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM28_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM28] -force
+  assign_bd_address -offset 0x0003A0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM29] -force
+  assign_bd_address -offset 0x0003B0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM29_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM29] -force
+  assign_bd_address -offset 0x0003C0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM30] -force
+  assign_bd_address -offset 0x0003D0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM30_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM30] -force
+  assign_bd_address -offset 0x0003E0000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_15_8HI/HBM_MEM31] -force
+  assign_bd_address -offset 0x0003F0000000 -range 0x10000000 -with_name SEG_hbm_0_HBM_MEM31_1 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM31] -force
+
+  # Exclude Address Segments
+  exclude_bd_addr_seg -offset 0x000420000000 -range 0x20000000 -target_address_space [get_bd_addr_spaces s_axi_hbm] [get_bd_addr_segs hbm_0/SAXI_16_8HI/HBM_MEM01]
+
+
+  # Restore current instance
+  current_bd_instance $oldCurInst
+
+  save_bd_design
+}
+# End of create_root_design()
+
+
+##################################################################
+# MAIN FLOW
+##################################################################
+
+create_root_design ""
+
+
+common::send_gid_msg -ssname BD::TCL -id 2053 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."
diff --git a/src/open_nic_shell.sv b/src/open_nic_shell.sv
index e2f6c3f..6b6cc10 100644
--- a/src/open_nic_shell.sv
+++ b/src/open_nic_shell.sv
@@ -1,6 +1,6 @@
 // *************************************************************************
 //
-// Copyright 2020 Xilinx, Inc.
+// Copyright 2023 Xilinx, Inc.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
@@ -31,6 +31,8 @@ module open_nic_shell #(
   output                         hbm_cattrip, // Fix the CATTRIP issue for AU280 custom flow
 `elsif __au50__
   output                         hbm_cattrip,
+`elsif __au55c__
+  output                         hbm_cattrip,
 `endif
 
   input                   [15:0] pcie_rxp,
@@ -147,27 +149,27 @@ module open_nic_shell #(
   end
 
 `ifdef __synthesis__
-  wire         powerup_rstn;
-  wire         pcie_user_lnk_up;
-  wire         pcie_phy_ready;
+  logic         powerup_rstn;
+  logic         pcie_user_lnk_up;
+  logic         pcie_phy_ready;
 
   // BAR2-mapped master AXI-Lite feeding into system configuration block
-  wire         axil_pcie_awvalid;
-  wire  [31:0] axil_pcie_awaddr;
-  wire         axil_pcie_awready;
-  wire         axil_pcie_wvalid;
-  wire  [31:0] axil_pcie_wdata;
-  wire         axil_pcie_wready;
-  wire         axil_pcie_bvalid;
-  wire   [1:0] axil_pcie_bresp;
-  wire         axil_pcie_bready;
-  wire         axil_pcie_arvalid;
-  wire  [31:0] axil_pcie_araddr;
-  wire         axil_pcie_arready;
-  wire         axil_pcie_rvalid;
-  wire  [31:0] axil_pcie_rdata;
-  wire   [1:0] axil_pcie_rresp;
-  wire         axil_pcie_rready;
+  logic         axil_pcie_awvalid;
+  logic  [31:0] axil_pcie_awaddr;
+  logic         axil_pcie_awready;
+  logic         axil_pcie_wvalid;
+  logic  [31:0] axil_pcie_wdata;
+  logic         axil_pcie_wready;
+  logic         axil_pcie_bvalid;
+  logic   [1:0] axil_pcie_bresp;
+  logic         axil_pcie_bready;
+  logic         axil_pcie_arvalid;
+  logic  [31:0] axil_pcie_araddr;
+  logic         axil_pcie_arready;
+  logic         axil_pcie_rvalid;
+  logic  [31:0] axil_pcie_rdata;
+  logic   [1:0] axil_pcie_rresp;
+  logic         axil_pcie_rready;
 
   IBUF pcie_rstn_ibuf_inst (.I(pcie_rstn), .O(pcie_rstn_int));
 
@@ -180,6 +182,9 @@ module open_nic_shell #(
 `elsif __au50__
   // Same for AU50
   OBUF hbm_cattrip_obuf_inst (.I(1'b0), .O(hbm_cattrip));
+`elsif __au55c__
+  // Same for AU55C
+  OBUF hbm_cattrip_obuf_inst (.I(1'b0), .O(hbm_cattrip));
 `endif
 
 `ifdef __zynq_family__
@@ -187,187 +192,730 @@ module open_nic_shell #(
 `endif
 `endif
 
-  wire                         axil_qdma_awvalid;
-  wire                  [31:0] axil_qdma_awaddr;
-  wire                         axil_qdma_awready;
-  wire                         axil_qdma_wvalid;
-  wire                  [31:0] axil_qdma_wdata;
-  wire                         axil_qdma_wready;
-  wire                         axil_qdma_bvalid;
-  wire                   [1:0] axil_qdma_bresp;
-  wire                         axil_qdma_bready;
-  wire                         axil_qdma_arvalid;
-  wire                  [31:0] axil_qdma_araddr;
-  wire                         axil_qdma_arready;
-  wire                         axil_qdma_rvalid;
-  wire                  [31:0] axil_qdma_rdata;
-  wire                   [1:0] axil_qdma_rresp;
-  wire                         axil_qdma_rready;
-
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_awvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_awaddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_awready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_wvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_wdata;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_wready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_bvalid;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_adap_bresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_bready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_arvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_araddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_arready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_rvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_rdata;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_adap_rresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_rready;
-
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_awvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_awaddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_awready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_wvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_wdata;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_wready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_bvalid;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_cmac_bresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_bready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_arvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_araddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_arready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_rvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_rdata;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_cmac_rresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_rready;
-
-  wire                         axil_box0_awvalid;
-  wire                  [31:0] axil_box0_awaddr;
-  wire                         axil_box0_awready;
-  wire                         axil_box0_wvalid;
-  wire                  [31:0] axil_box0_wdata;
-  wire                         axil_box0_wready;
-  wire                         axil_box0_bvalid;
-  wire                   [1:0] axil_box0_bresp;
-  wire                         axil_box0_bready;
-  wire                         axil_box0_arvalid;
-  wire                  [31:0] axil_box0_araddr;
-  wire                         axil_box0_arready;
-  wire                         axil_box0_rvalid;
-  wire                  [31:0] axil_box0_rdata;
-  wire                   [1:0] axil_box0_rresp;
-  wire                         axil_box0_rready;
-
-  wire                         axil_box1_awvalid;
-  wire                  [31:0] axil_box1_awaddr;
-  wire                         axil_box1_awready;
-  wire                         axil_box1_wvalid;
-  wire                  [31:0] axil_box1_wdata;
-  wire                         axil_box1_wready;
-  wire                         axil_box1_bvalid;
-  wire                   [1:0] axil_box1_bresp;
-  wire                         axil_box1_bready;
-  wire                         axil_box1_arvalid;
-  wire                  [31:0] axil_box1_araddr;
-  wire                         axil_box1_arready;
-  wire                         axil_box1_rvalid;
-  wire                  [31:0] axil_box1_rdata;
-  wire                   [1:0] axil_box1_rresp;
-  wire                         axil_box1_rready;
+  logic                         axil_qdma_awvalid;
+  logic                  [31:0] axil_qdma_awaddr;
+  logic                         axil_qdma_awready;
+  logic                         axil_qdma_wvalid;
+  logic                  [31:0] axil_qdma_wdata;
+  logic                         axil_qdma_wready;
+  logic                         axil_qdma_bvalid;
+  logic                   [1:0] axil_qdma_bresp;
+  logic                         axil_qdma_bready;
+  logic                         axil_qdma_arvalid;
+  logic                  [31:0] axil_qdma_araddr;
+  logic                         axil_qdma_arready;
+  logic                         axil_qdma_rvalid;
+  logic                  [31:0] axil_qdma_rdata;
+  logic                   [1:0] axil_qdma_rresp;
+  logic                         axil_qdma_rready;
+
+  logic                         axi_qdma_mm_awready;
+  logic                         axi_qdma_mm_wready;
+  logic                   [3:0] axi_qdma_mm_bid;
+  logic                   [1:0] axi_qdma_mm_bresp;
+  logic                         axi_qdma_mm_bvalid;
+  logic                         axi_qdma_mm_arready;
+  logic                   [3:0] axi_qdma_mm_rid;
+  logic                 [511:0] axi_qdma_mm_rdata;
+  logic                   [1:0] axi_qdma_mm_rresp;
+  logic                         axi_qdma_mm_rlast;
+  logic                         axi_qdma_mm_rvalid;
+  logic                   [3:0] axi_qdma_mm_awid;
+  logic                  [63:0] axi_qdma_mm_awaddr;
+  logic                  [31:0] axi_qdma_mm_awuser;
+  logic                   [7:0] axi_qdma_mm_awlen;
+  logic                   [2:0] axi_qdma_mm_awsize;
+  logic                   [1:0] axi_qdma_mm_awburst;
+  logic                   [2:0] axi_qdma_mm_awprot;
+  logic                         axi_qdma_mm_awvalid;
+  logic                         axi_qdma_mm_awlock;
+  logic                   [3:0] axi_qdma_mm_awcache;
+  logic                 [511:0] axi_qdma_mm_wdata;
+  logic                  [63:0] axi_qdma_mm_wuser;
+  logic                  [63:0] axi_qdma_mm_wstrb;
+  logic                         axi_qdma_mm_wlast;
+  logic                         axi_qdma_mm_wvalid;
+  logic                         axi_qdma_mm_bready;
+  logic                   [3:0] axi_qdma_mm_arid;
+  logic                  [63:0] axi_qdma_mm_araddr;
+  logic                  [31:0] axi_qdma_mm_aruser;
+  logic                   [7:0] axi_qdma_mm_arlen;
+  logic                   [2:0] axi_qdma_mm_arsize;
+  logic                   [1:0] axi_qdma_mm_arburst;
+  logic                   [2:0] axi_qdma_mm_arprot;
+  logic                         axi_qdma_mm_arvalid;
+  logic                         axi_qdma_mm_arlock;
+  logic                   [3:0] axi_qdma_mm_arcache;
+  logic                         axi_qdma_mm_rready;
+
+  // QDMA control/status register interface
+  logic                         qdma_csr_prog_done;
+  logic                  [31:0] axil_qdma_csr_awaddr;
+  logic                         axil_qdma_csr_awvalid;
+  logic                         axil_qdma_csr_awready;
+  logic                  [31:0] axil_qdma_csr_wdata;
+  logic                         axil_qdma_csr_wvalid;
+  logic                         axil_qdma_csr_wready;
+  logic                         axil_qdma_csr_bvalid;
+  logic                   [1:0] axil_qdma_csr_bresp;
+  logic                         axil_qdma_csr_bready;
+  logic                  [31:0] axil_qdma_csr_araddr;
+  logic                         axil_qdma_csr_arvalid;
+  logic                         axil_qdma_csr_arready;
+  logic                  [31:0] axil_qdma_csr_rdata;
+  logic                   [1:0] axil_qdma_csr_rresp;
+  logic                         axil_qdma_csr_rvalid;
+  logic                         axil_qdma_csr_rready;
+
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_awvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_awaddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_awready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_wvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_wdata;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_wready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_bvalid;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_adap_bresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_bready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_arvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_araddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_arready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_rvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_rdata;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_adap_rresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_rready;
+
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_awvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_awaddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_awready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_wvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_wdata;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_wready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_bvalid;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_cmac_bresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_bready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_arvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_araddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_arready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_rvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_rdata;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_cmac_rresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_rready;
+
+  // AXIL interface to the RDMA engine
+  logic                         axil_rdma_awvalid;
+  logic                  [31:0] axil_rdma_awaddr;
+  logic                         axil_rdma_awready;
+  logic                         axil_rdma_wvalid;
+  logic                  [31:0] axil_rdma_wdata;
+  logic                         axil_rdma_wready;
+  logic                         axil_rdma_bvalid;
+  logic                   [1:0] axil_rdma_bresp;
+  logic                         axil_rdma_bready;
+  logic                         axil_rdma_arvalid;
+  logic                  [31:0] axil_rdma_araddr;
+  logic                         axil_rdma_arready;
+  logic                         axil_rdma_rvalid;
+  logic                  [31:0] axil_rdma_rdata;
+  logic                   [1:0] axil_rdma_rresp;
+  logic                         axil_rdma_rready;
+
+  logic                         axil_box0_awvalid;
+  logic                  [31:0] axil_box0_awaddr;
+  logic                         axil_box0_awready;
+  logic                         axil_box0_wvalid;
+  logic                  [31:0] axil_box0_wdata;
+  logic                         axil_box0_wready;
+  logic                         axil_box0_bvalid;
+  logic                   [1:0] axil_box0_bresp;
+  logic                         axil_box0_bready;
+  logic                         axil_box0_arvalid;
+  logic                  [31:0] axil_box0_araddr;
+  logic                         axil_box0_arready;
+  logic                         axil_box0_rvalid;
+  logic                  [31:0] axil_box0_rdata;
+  logic                   [1:0] axil_box0_rresp;
+  logic                         axil_box0_rready;
+
+  logic                         axil_box1_awvalid;
+  logic                  [31:0] axil_box1_awaddr;
+  logic                         axil_box1_awready;
+  logic                         axil_box1_wvalid;
+  logic                  [31:0] axil_box1_wdata;
+  logic                         axil_box1_wready;
+  logic                         axil_box1_bvalid;
+  logic                   [1:0] axil_box1_bresp;
+  logic                         axil_box1_bready;
+  logic                         axil_box1_arvalid;
+  logic                  [31:0] axil_box1_araddr;
+  logic                         axil_box1_arready;
+  logic                         axil_box1_rvalid;
+  logic                  [31:0] axil_box1_rdata;
+  logic                   [1:0] axil_box1_rresp;
+  logic                         axil_box1_rready;
 
   // QDMA subsystem interfaces to the box running at 250MHz
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tvalid;
-  wire [512*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tdata;
-  wire  [64*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tkeep;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tlast;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_size;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_src;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_dst;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tready;
-
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tvalid;
-  wire [512*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tdata;
-  wire  [64*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tkeep;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tlast;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_size;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_src;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_dst;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tready;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tvalid;
+  logic [512*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tdata;
+  logic  [64*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tkeep;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tlast;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_size;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_src;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_dst;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tready;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tvalid;
+  logic [512*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tdata;
+  logic  [64*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tkeep;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tlast;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_size;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_src;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_dst;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tready;
 
   // Packet adapter interfaces to the box running at 250MHz
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tlast;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_size;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_src;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_dst;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tready;
-
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tlast;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_size;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_src;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_dst;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tready;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tlast;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_size;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_src;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_dst;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tready;
+
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tlast;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_size;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_src;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_dst;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tready;
 
   // Packet adapter interfaces to the box running at 322MHz
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tuser_err;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tready;
-
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tuser_err;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tuser_err;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tready;
+
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tuser_err;
 
   // CMAC subsystem interfaces to the box running at 322MHz
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_cmac_tx_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_cmac_tx_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tuser_err;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tready;
-
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_cmac_rx_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_cmac_rx_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tuser_err;
-
-  wire                  [31:0] shell_rstn;
-  wire                  [31:0] shell_rst_done;
-  wire                         qdma_rstn;
-  wire                         qdma_rst_done;
-  wire     [NUM_CMAC_PORT-1:0] adap_rstn;
-  wire     [NUM_CMAC_PORT-1:0] adap_rst_done;
-  wire     [NUM_CMAC_PORT-1:0] cmac_rstn;
-  wire     [NUM_CMAC_PORT-1:0] cmac_rst_done;
-
-  wire                  [31:0] user_rstn;
-  wire                  [31:0] user_rst_done;
-  wire                  [15:0] user_250mhz_rstn;
-  wire                  [15:0] user_250mhz_rst_done;
-  wire                   [7:0] user_322mhz_rstn;
-  wire                   [7:0] user_322mhz_rst_done;
-  wire                         box_250mhz_rstn;
-  wire                         box_250mhz_rst_done;
-  wire                         box_322mhz_rstn;
-  wire                         box_322mhz_rst_done;
-
-  wire                         axil_aclk;
-  wire                         axis_aclk;
-  wire     [NUM_CMAC_PORT-1:0] cmac_clk;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_cmac_tx_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_cmac_tx_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tuser_err;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tready;
+
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_cmac_rx_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_cmac_rx_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tuser_err;
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  logic [511:0] rdma2cmac_axis_tdata;
+  logic  [63:0] rdma2cmac_axis_tkeep;
+  logic         rdma2cmac_axis_tvalid;
+  logic         rdma2cmac_axis_tlast;
+  logic         rdma2cmac_axis_tready;
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  logic [511:0] qdma2rdma_non_roce_axis_tdata;
+  logic  [63:0] qdma2rdma_non_roce_axis_tkeep;
+  logic         qdma2rdma_non_roce_axis_tvalid;
+  logic         qdma2rdma_non_roce_axis_tlast;
+  logic         qdma2rdma_non_roce_axis_tready;
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  logic [511:0] cmac2rdma_roce_axis_tdata;
+  logic  [63:0] cmac2rdma_roce_axis_tkeep;
+  logic         cmac2rdma_roce_axis_tvalid;
+  logic         cmac2rdma_roce_axis_tlast;
+  logic         cmac2rdma_roce_axis_tuser;
+  logic         cmac2rdma_roce_axis_tready;
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  logic  [63:0] rdma2user_ieth_immdt_axis_tdata;
+  logic         rdma2user_ieth_immdt_axis_tlast;
+  logic         rdma2user_ieth_immdt_axis_tvalid;
+  logic         rdma2user_ieth_immdt_axis_trdy;
+
+  // Send WQE completion queue doorbell
+  logic         resp_hndler_o_send_cq_db_cnt_valid;
+  logic   [9:0] resp_hndler_o_send_cq_db_addr;
+  logic  [31:0] resp_hndler_o_send_cq_db_cnt;
+  logic         resp_hndler_i_send_cq_db_rdy;
+
+  // Send WQE producer index doorbell
+  logic  [15:0] i_qp_sq_pidb_hndshk;
+  logic  [31:0] i_qp_sq_pidb_wr_addr_hndshk;
+  logic         i_qp_sq_pidb_wr_valid_hndshk;
+  logic         o_qp_sq_pidb_wr_rdy;
+
+  // RDMA-Send consumer index doorbell
+  logic  [15:0] i_qp_rq_cidb_hndshk;
+  logic  [31:0] i_qp_rq_cidb_wr_addr_hndshk;
+  logic         i_qp_rq_cidb_wr_valid_hndshk;
+  logic         o_qp_rq_cidb_wr_rdy;
+
+  // RDMA-Send producer index doorbell
+  logic  [31:0] rx_pkt_hndler_o_rq_db_data;
+  logic   [9:0] rx_pkt_hndler_o_rq_db_addr;
+  logic         rx_pkt_hndler_o_rq_db_data_valid;
+  logic         rx_pkt_hndler_i_rq_db_rdy;
+
+  logic         rdma_intr;
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  logic           axi_rdma_send_write_payload_awid;
+  logic  [63 : 0] axi_rdma_send_write_payload_awaddr;
+  logic  [31 : 0] axi_rdma_send_write_payload_awuser;
+  logic   [3 : 0] axi_rdma_send_write_payload_awqos;
+  logic   [7 : 0] axi_rdma_send_write_payload_awlen;
+  logic   [2 : 0] axi_rdma_send_write_payload_awsize;
+  logic   [1 : 0] axi_rdma_send_write_payload_awburst;
+  logic   [3 : 0] axi_rdma_send_write_payload_awcache;
+  logic   [2 : 0] axi_rdma_send_write_payload_awprot;
+  logic           axi_rdma_send_write_payload_awvalid;
+  logic           axi_rdma_send_write_payload_awready;
+  logic [511 : 0] axi_rdma_send_write_payload_wdata;
+  logic  [63 : 0] axi_rdma_send_write_payload_wstrb;
+  logic           axi_rdma_send_write_payload_wlast;
+  logic           axi_rdma_send_write_payload_wvalid;
+  logic           axi_rdma_send_write_payload_wready;
+  logic           axi_rdma_send_write_payload_awlock;
+  logic           axi_rdma_send_write_payload_bid;
+  logic   [1 : 0] axi_rdma_send_write_payload_bresp;
+  logic           axi_rdma_send_write_payload_bvalid;
+  logic           axi_rdma_send_write_payload_bready;
+  logic           axi_rdma_send_write_payload_arid;
+  logic  [63 : 0] axi_rdma_send_write_payload_araddr;
+  logic   [7 : 0] axi_rdma_send_write_payload_arlen;
+  logic   [2 : 0] axi_rdma_send_write_payload_arsize;
+  logic   [1 : 0] axi_rdma_send_write_payload_arburst;
+  logic   [3 : 0] axi_rdma_send_write_payload_arcache;
+  logic   [2 : 0] axi_rdma_send_write_payload_arprot;
+  logic           axi_rdma_send_write_payload_arvalid;
+  logic           axi_rdma_send_write_payload_arready;
+  logic           axi_rdma_send_write_payload_rid;
+  logic [511 : 0] axi_rdma_send_write_payload_rdata;
+  logic   [1 : 0] axi_rdma_send_write_payload_rresp;
+  logic           axi_rdma_send_write_payload_rlast;
+  logic           axi_rdma_send_write_payload_rvalid;
+  logic           axi_rdma_send_write_payload_rready;
+  logic           axi_rdma_send_write_payload_arlock;
+  logic     [3:0] axi_rdma_send_write_payload_arqos;
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  logic           axi_rdma_rsp_payload_awid;
+  logic  [63 : 0] axi_rdma_rsp_payload_awaddr;
+  logic   [3 : 0] axi_rdma_rsp_payload_awqos;
+  logic   [7 : 0] axi_rdma_rsp_payload_awlen;
+  logic   [2 : 0] axi_rdma_rsp_payload_awsize;
+  logic   [1 : 0] axi_rdma_rsp_payload_awburst;
+  logic   [3 : 0] axi_rdma_rsp_payload_awcache;
+  logic   [2 : 0] axi_rdma_rsp_payload_awprot;
+  logic           axi_rdma_rsp_payload_awvalid;
+  logic           axi_rdma_rsp_payload_awready;
+  logic [511 : 0] axi_rdma_rsp_payload_wdata;
+  logic  [63 : 0] axi_rdma_rsp_payload_wstrb;
+  logic           axi_rdma_rsp_payload_wlast;
+  logic           axi_rdma_rsp_payload_wvalid;
+  logic           axi_rdma_rsp_payload_wready;
+  logic           axi_rdma_rsp_payload_awlock;
+  logic           axi_rdma_rsp_payload_bid;
+  logic   [1 : 0] axi_rdma_rsp_payload_bresp;
+  logic           axi_rdma_rsp_payload_bvalid;
+  logic           axi_rdma_rsp_payload_bready;
+  logic           axi_rdma_rsp_payload_arid;
+  logic  [63 : 0] axi_rdma_rsp_payload_araddr;
+  logic   [7 : 0] axi_rdma_rsp_payload_arlen;
+  logic   [2 : 0] axi_rdma_rsp_payload_arsize;
+  logic   [1 : 0] axi_rdma_rsp_payload_arburst;
+  logic   [3 : 0] axi_rdma_rsp_payload_arcache;
+  logic   [2 : 0] axi_rdma_rsp_payload_arprot;
+  logic           axi_rdma_rsp_payload_arvalid;
+  logic           axi_rdma_rsp_payload_arready;
+  logic           axi_rdma_rsp_payload_rid;
+  logic [511 : 0] axi_rdma_rsp_payload_rdata;
+  logic   [1 : 0] axi_rdma_rsp_payload_rresp;
+  logic           axi_rdma_rsp_payload_rlast;
+  logic           axi_rdma_rsp_payload_rvalid;
+  logic           axi_rdma_rsp_payload_rready;
+  logic           axi_rdma_rsp_payload_arlock;
+  logic   [3 : 0] axi_rdma_rsp_payload_arqos;
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  logic           axi_compute_logic_awid;
+  logic  [63 : 0] axi_compute_logic_awaddr;
+  logic   [3 : 0] axi_compute_logic_awqos;
+  logic   [7 : 0] axi_compute_logic_awlen;
+  logic   [2 : 0] axi_compute_logic_awsize;
+  logic   [1 : 0] axi_compute_logic_awburst;
+  logic   [3 : 0] axi_compute_logic_awcache;
+  logic   [2 : 0] axi_compute_logic_awprot;
+  logic           axi_compute_logic_awvalid;
+  logic           axi_compute_logic_awready;
+  logic [511 : 0] axi_compute_logic_wdata;
+  logic  [63 : 0] axi_compute_logic_wstrb;
+  logic           axi_compute_logic_wlast;
+  logic           axi_compute_logic_wvalid;
+  logic           axi_compute_logic_wready;
+  logic           axi_compute_logic_awlock;
+  logic           axi_compute_logic_bid;
+  logic   [1 : 0] axi_compute_logic_bresp;
+  logic           axi_compute_logic_bvalid;
+  logic           axi_compute_logic_bready;
+  logic           axi_compute_logic_arid;
+  logic  [63 : 0] axi_compute_logic_araddr;
+  logic   [7 : 0] axi_compute_logic_arlen;
+  logic   [2 : 0] axi_compute_logic_arsize;
+  logic   [1 : 0] axi_compute_logic_arburst;
+  logic   [3 : 0] axi_compute_logic_arcache;
+  logic   [2 : 0] axi_compute_logic_arprot;
+  logic           axi_compute_logic_arvalid;
+  logic           axi_compute_logic_arready;
+  logic           axi_compute_logic_rid;
+  logic [511 : 0] axi_compute_logic_rdata;
+  logic   [1 : 0] axi_compute_logic_rresp;
+  logic           axi_compute_logic_rlast;
+  logic           axi_compute_logic_rvalid;
+  logic           axi_compute_logic_rready;
+  logic           axi_compute_logic_arlock;
+  logic   [3 : 0] axi_compute_logic_arqos;
+
+  // AXI MM interface used to access the device memory
+  logic   [4 : 0] axi_dev_mem_awid;
+  logic  [63 : 0] axi_dev_mem_awaddr;
+  logic   [7 : 0] axi_dev_mem_awlen;
+  logic   [2 : 0] axi_dev_mem_awsize;
+  logic   [1 : 0] axi_dev_mem_awburst;
+  logic           axi_dev_mem_awlock;
+  logic   [3 : 0] axi_dev_mem_awqos;
+  logic   [3 : 0] axi_dev_mem_awregion;
+  logic   [3 : 0] axi_dev_mem_awcache;
+  logic   [2 : 0] axi_dev_mem_awprot;
+  logic           axi_dev_mem_awvalid;
+  logic           axi_dev_mem_awready;
+  logic [511 : 0] axi_dev_mem_wdata;
+  logic  [63 : 0] axi_dev_mem_wstrb;
+  logic           axi_dev_mem_wlast;
+  logic           axi_dev_mem_wvalid;
+  logic           axi_dev_mem_wready;
+  logic   [4 : 0] axi_dev_mem_bid;
+  logic   [1 : 0] axi_dev_mem_bresp;
+  logic           axi_dev_mem_bvalid;
+  logic           axi_dev_mem_bready;
+  logic   [4 : 0] axi_dev_mem_arid;
+  logic  [63 : 0] axi_dev_mem_araddr;
+  logic   [7 : 0] axi_dev_mem_arlen;
+  logic   [2 : 0] axi_dev_mem_arsize;
+  logic   [1 : 0] axi_dev_mem_arburst;
+  logic           axi_dev_mem_arlock;
+  logic   [3 : 0] axi_dev_mem_arqos;
+  logic   [3 : 0] axi_dev_mem_arregion;
+  logic   [3 : 0] axi_dev_mem_arcache;
+  logic   [2 : 0] axi_dev_mem_arprot;
+  logic           axi_dev_mem_arvalid;
+  logic           axi_dev_mem_arready;
+  logic   [4 : 0] axi_dev_mem_rid;
+  logic [511 : 0] axi_dev_mem_rdata;
+  logic   [1 : 0] axi_dev_mem_rresp;
+  logic           axi_dev_mem_rlast;
+  logic           axi_dev_mem_rvalid;
+  logic           axi_dev_mem_rready;
+
+  // RDMA AXI MM interface used to get wqe from system memory
+  logic           axi_rdma_get_wqe_awid;
+  logic  [63 : 0] axi_rdma_get_wqe_awaddr;
+  logic   [3 : 0] axi_rdma_get_wqe_awqos;
+  logic   [7 : 0] axi_rdma_get_wqe_awlen;
+  logic   [2 : 0] axi_rdma_get_wqe_awsize;
+  logic   [1 : 0] axi_rdma_get_wqe_awburst;
+  logic   [3 : 0] axi_rdma_get_wqe_awcache;
+  logic   [2 : 0] axi_rdma_get_wqe_awprot;
+  logic           axi_rdma_get_wqe_awvalid;
+  logic           axi_rdma_get_wqe_awready;
+  logic [511 : 0] axi_rdma_get_wqe_wdata;
+  logic  [63 : 0] axi_rdma_get_wqe_wstrb;
+  logic           axi_rdma_get_wqe_wlast;
+  logic           axi_rdma_get_wqe_wvalid;
+  logic           axi_rdma_get_wqe_wready;
+  logic           axi_rdma_get_wqe_awlock;
+  logic           axi_rdma_get_wqe_bid;
+  logic   [1 : 0] axi_rdma_get_wqe_bresp;
+  logic           axi_rdma_get_wqe_bvalid;
+  logic           axi_rdma_get_wqe_bready;
+  logic           axi_rdma_get_wqe_arid;
+  logic  [63 : 0] axi_rdma_get_wqe_araddr;
+  logic   [7 : 0] axi_rdma_get_wqe_arlen;
+  logic   [2 : 0] axi_rdma_get_wqe_arsize;
+  logic   [1 : 0] axi_rdma_get_wqe_arburst;
+  logic   [3 : 0] axi_rdma_get_wqe_arcache;
+  logic   [2 : 0] axi_rdma_get_wqe_arprot;
+  logic           axi_rdma_get_wqe_arvalid;
+  logic           axi_rdma_get_wqe_arready;
+  logic           axi_rdma_get_wqe_rid;
+  logic [511 : 0] axi_rdma_get_wqe_rdata;
+  logic   [1 : 0] axi_rdma_get_wqe_rresp;
+  logic           axi_rdma_get_wqe_rlast;
+  logic           axi_rdma_get_wqe_rvalid;
+  logic           axi_rdma_get_wqe_rready;
+  logic           axi_rdma_get_wqe_arlock;
+  logic   [3 : 0] axi_rdma_get_wqe_arqos;
+
+  // RDMA AXI MM interface used to get payload from system memory
+  logic           axi_rdma_get_payload_awid;
+  logic  [63 : 0] axi_rdma_get_payload_awaddr;
+  logic   [3 : 0] axi_rdma_get_payload_awqos;
+  logic   [7 : 0] axi_rdma_get_payload_awlen;
+  logic   [2 : 0] axi_rdma_get_payload_awsize;
+  logic   [1 : 0] axi_rdma_get_payload_awburst;
+  logic   [3 : 0] axi_rdma_get_payload_awcache;
+  logic   [2 : 0] axi_rdma_get_payload_awprot;
+  logic           axi_rdma_get_payload_awvalid;
+  logic           axi_rdma_get_payload_awready;
+  logic [511 : 0] axi_rdma_get_payload_wdata;
+  logic  [63 : 0] axi_rdma_get_payload_wstrb;
+  logic           axi_rdma_get_payload_wlast;
+  logic           axi_rdma_get_payload_wvalid;
+  logic           axi_rdma_get_payload_wready;
+  logic           axi_rdma_get_payload_awlock;
+  logic           axi_rdma_get_payload_bid;
+  logic   [1 : 0] axi_rdma_get_payload_bresp;
+  logic           axi_rdma_get_payload_bvalid;
+  logic           axi_rdma_get_payload_bready;
+  logic           axi_rdma_get_payload_arid;
+  logic  [63 : 0] axi_rdma_get_payload_araddr;
+  logic   [7 : 0] axi_rdma_get_payload_arlen;
+  logic   [2 : 0] axi_rdma_get_payload_arsize;
+  logic   [1 : 0] axi_rdma_get_payload_arburst;
+  logic   [3 : 0] axi_rdma_get_payload_arcache;
+  logic   [2 : 0] axi_rdma_get_payload_arprot;
+  logic           axi_rdma_get_payload_arvalid;
+  logic           axi_rdma_get_payload_arready;
+  logic           axi_rdma_get_payload_rid;
+  logic [511 : 0] axi_rdma_get_payload_rdata;
+  logic   [1 : 0] axi_rdma_get_payload_rresp;
+  logic           axi_rdma_get_payload_rlast;
+  logic           axi_rdma_get_payload_rvalid;
+  logic           axi_rdma_get_payload_rready;
+  logic           axi_rdma_get_payload_arlock;
+  logic   [3 : 0] axi_rdma_get_payload_arqos;
+
+  // RDMA AXI MM interface used to update rdma completion to system memory
+  logic           axi_rdma_completion_awid;
+  logic  [63 : 0] axi_rdma_completion_awaddr;
+  logic   [3 : 0] axi_rdma_completion_awqos;
+  logic   [7 : 0] axi_rdma_completion_awlen;
+  logic   [2 : 0] axi_rdma_completion_awsize;
+  logic   [1 : 0] axi_rdma_completion_awburst;
+  logic   [3 : 0] axi_rdma_completion_awcache;
+  logic   [2 : 0] axi_rdma_completion_awprot;
+  logic           axi_rdma_completion_awvalid;
+  logic           axi_rdma_completion_awready;
+  logic [511 : 0] axi_rdma_completion_wdata;
+  logic  [63 : 0] axi_rdma_completion_wstrb;
+  logic           axi_rdma_completion_wlast;
+  logic           axi_rdma_completion_wvalid;
+  logic           axi_rdma_completion_wready;
+  logic           axi_rdma_completion_awlock;
+  logic           axi_rdma_completion_bid;
+  logic   [1 : 0] axi_rdma_completion_bresp;
+  logic           axi_rdma_completion_bvalid;
+  logic           axi_rdma_completion_bready;
+  logic           axi_rdma_completion_arid;
+  logic  [63 : 0] axi_rdma_completion_araddr;
+  logic   [7 : 0] axi_rdma_completion_arlen;
+  logic   [2 : 0] axi_rdma_completion_arsize;
+  logic   [1 : 0] axi_rdma_completion_arburst;
+  logic   [3 : 0] axi_rdma_completion_arcache;
+  logic   [2 : 0] axi_rdma_completion_arprot;
+  logic           axi_rdma_completion_arvalid;
+  logic           axi_rdma_completion_arready;
+  logic           axi_rdma_completion_rid;
+  logic [511 : 0] axi_rdma_completion_rdata;
+  logic   [1 : 0] axi_rdma_completion_rresp;
+  logic           axi_rdma_completion_rlast;
+  logic           axi_rdma_completion_rvalid;
+  logic           axi_rdma_completion_rready;
+  logic           axi_rdma_completion_arlock;
+  logic   [3 : 0] axi_rdma_completion_arqos;
+
+  // AXI MM interface used to access the system memory (s_axib_* of the QDMA IP)
+  logic   [2 : 0] axi_sys_mem_awid;
+  logic  [63 : 0] axi_sys_mem_awaddr;
+  logic   [7 : 0] axi_sys_mem_awlen;
+  logic   [2 : 0] axi_sys_mem_awsize;
+  logic   [1 : 0] axi_sys_mem_awburst;
+  logic           axi_sys_mem_awlock;
+  logic   [3 : 0] axi_sys_mem_awqos;
+  logic   [3 : 0] axi_sys_mem_awregion;
+  logic   [3 : 0] axi_sys_mem_awcache;
+  logic   [2 : 0] axi_sys_mem_awprot;
+  logic           axi_sys_mem_awvalid;
+  logic           axi_sys_mem_awready;
+  logic [511 : 0] axi_sys_mem_wdata;
+  logic  [63 : 0] axi_sys_mem_wstrb;
+  logic           axi_sys_mem_wlast;
+  logic           axi_sys_mem_wvalid;
+  logic           axi_sys_mem_wready;
+  logic   [3 : 0] axi_sys_mem_bid;
+  logic   [1 : 0] axi_sys_mem_bresp;
+  logic           axi_sys_mem_bvalid;
+  logic           axi_sys_mem_bready;
+  logic   [2 : 0] axi_sys_mem_arid;
+  logic  [63 : 0] axi_sys_mem_araddr;
+  logic   [7 : 0] axi_sys_mem_arlen;
+  logic   [2 : 0] axi_sys_mem_arsize;
+  logic   [1 : 0] axi_sys_mem_arburst;
+  logic           axi_sys_mem_arlock;
+  logic   [3 : 0] axi_sys_mem_arqos;
+  logic   [3 : 0] axi_sys_mem_arregion;
+  logic   [3 : 0] axi_sys_mem_arcache;
+  logic   [2 : 0] axi_sys_mem_arprot;
+  logic           axi_sys_mem_arvalid;
+  logic           axi_sys_mem_arready;
+  logic   [3 : 0] axi_sys_mem_rid;
+  logic [511 : 0] axi_sys_mem_rdata;
+  logic   [1 : 0] axi_sys_mem_rresp;
+  logic           axi_sys_mem_rlast;
+  logic           axi_sys_mem_rvalid;
+  logic           axi_sys_mem_rready;
+  logic  [63 : 0] axi_sys_mem_wuser;
+  logic  [63 : 0] axi_sys_mem_ruser;
+  logic  [11 : 0] axi_sys_mem_awuser;
+  logic  [11 : 0] axi_sys_mem_aruser;
+
+  //AXI interface between system mem crossbar and device mem crossbar
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_awid;
+  logic  [63 : 0] axi_from_sys_to_dev_crossbar_awaddr;
+  //logic  [31 : 0] axi_from_sys_to_dev_crossbar_awuser;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_awqos;
+  logic   [7 : 0] axi_from_sys_to_dev_crossbar_awlen;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_awsize;
+  logic   [1 : 0] axi_from_sys_to_dev_crossbar_awburst;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_awcache;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_awprot;
+  logic           axi_from_sys_to_dev_crossbar_awvalid;
+  logic           axi_from_sys_to_dev_crossbar_awready;
+  logic [511 : 0] axi_from_sys_to_dev_crossbar_wdata;
+  logic  [63 : 0] axi_from_sys_to_dev_crossbar_wstrb;
+  logic           axi_from_sys_to_dev_crossbar_wlast;
+  logic           axi_from_sys_to_dev_crossbar_wvalid;
+  logic           axi_from_sys_to_dev_crossbar_wready;
+  logic           axi_from_sys_to_dev_crossbar_awlock;
+  logic   [4 : 0] axi_from_sys_to_dev_crossbar_bid;
+  logic   [1 : 0] axi_from_sys_to_dev_crossbar_bresp;
+  logic           axi_from_sys_to_dev_crossbar_bvalid;
+  logic           axi_from_sys_to_dev_crossbar_bready;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_arid;
+  logic  [63 : 0] axi_from_sys_to_dev_crossbar_araddr;
+  logic   [7 : 0] axi_from_sys_to_dev_crossbar_arlen;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_arsize;
+  logic   [1 : 0] axi_from_sys_to_dev_crossbar_arburst;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_arcache;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_arprot;
+  logic           axi_from_sys_to_dev_crossbar_arvalid;
+  logic           axi_from_sys_to_dev_crossbar_arready;
+  logic   [4 : 0] axi_from_sys_to_dev_crossbar_rid;
+  logic [511 : 0] axi_from_sys_to_dev_crossbar_rdata;
+  logic   [1 : 0] axi_from_sys_to_dev_crossbar_rresp;
+  logic           axi_from_sys_to_dev_crossbar_rlast;
+  logic           axi_from_sys_to_dev_crossbar_rvalid;
+  logic           axi_from_sys_to_dev_crossbar_rready;
+  logic           axi_from_sys_to_dev_crossbar_arlock;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_arqos;
+
+  wire   [63 : 0] axi_from_clk_converter_to_ddr4_awaddr;
+  wire    [7 : 0] axi_from_clk_converter_to_ddr4_awlen;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_awsize;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_awburst;
+  wire    [0 : 0] axi_from_clk_converter_to_ddr4_awlock;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awcache;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_awprot;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awregion;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awqos;
+  wire            axi_from_clk_converter_to_ddr4_awvalid;
+  wire            axi_from_clk_converter_to_ddr4_awready;
+  wire  [511 : 0] axi_from_clk_converter_to_ddr4_wdata;
+  wire   [63 : 0] axi_from_clk_converter_to_ddr4_wstrb;
+  wire            axi_from_clk_converter_to_ddr4_wlast;
+  wire            axi_from_clk_converter_to_ddr4_wvalid;
+  wire            axi_from_clk_converter_to_ddr4_wready;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_bresp;
+  wire            axi_from_clk_converter_to_ddr4_bvalid;
+  wire            axi_from_clk_converter_to_ddr4_bready;
+  wire   [63 : 0] axi_from_clk_converter_to_ddr4_araddr;
+  wire    [7 : 0] axi_from_clk_converter_to_ddr4_arlen;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_arsize;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_arburst;
+  wire    [0 : 0] axi_from_clk_converter_to_ddr4_arlock;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arcache;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_arprot;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arregion;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arqos;
+  wire            axi_from_clk_converter_to_ddr4_arvalid;
+  wire            axi_from_clk_converter_to_ddr4_arready;
+  wire  [511 : 0] axi_from_clk_converter_to_ddr4_rdata;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_rresp;
+  wire            axi_from_clk_converter_to_ddr4_rlast;
+  wire            axi_from_clk_converter_to_ddr4_rvalid;
+  wire            axi_from_clk_converter_to_ddr4_rready;
+  wire    [4 : 0] axi_from_clk_converter_to_ddr4_awid;
+  wire    [4 : 0] axi_from_clk_converter_to_ddr4_rid;
+  wire    [4 : 0] axi_from_clk_converter_to_ddr4_arid;
+  wire    [4 : 0] axi_from_clk_converter_to_ddr4_bid;
+
+  wire            c0_ddr4_ui_clk;
+  wire            c0_ddr4_ui_clk_sync_rst;
+
+  wire            c0_init_calib_complete;
+
+
+  logic                  [31:0] shell_rstn;
+  logic                  [31:0] shell_rst_done;
+  logic                         qdma_rstn;
+  logic                         qdma_rst_done;
+  logic     [NUM_CMAC_PORT-1:0] adap_rstn;
+  logic     [NUM_CMAC_PORT-1:0] adap_rst_done;
+  logic     [NUM_CMAC_PORT-1:0] cmac_rstn;
+  logic     [NUM_CMAC_PORT-1:0] cmac_rst_done;
+  logic                         rdma_rstn;
+  logic                         rdma_rst_done;
+
+  logic                  [31:0] user_rstn;
+  logic                  [31:0] user_rst_done;
+  logic                  [15:0] user_250mhz_rstn;
+  logic                  [15:0] user_250mhz_rst_done;
+  logic                   [7:0] user_322mhz_rstn;
+  logic                   [7:0] user_322mhz_rst_done;
+  logic                         box_250mhz_rstn;
+  logic                         box_250mhz_rst_done;
+  logic                         box_322mhz_rstn;
+  logic                         box_322mhz_rst_done;
+
+  logic                         hbm_ref_clk;
+  logic                         axil_aclk;
+  logic                         axis_aclk;
+  logic     [NUM_CMAC_PORT-1:0] cmac_clk;
 
   // Unused reset pairs must have their "reset_done" tied to 1
 
   // First 4-bit for QDMA subsystem
   assign qdma_rstn           = shell_rstn[0];
   assign shell_rst_done[0]   = qdma_rst_done;
-  assign shell_rst_done[3:1] = 3'b111;
+  assign rdma_rstn           = shell_rstn[1];
+  assign shell_rst_done[1]   = rdma_rst_done;
+  assign shell_rst_done[2]   = qdma_csr_prog_done;
+  assign shell_rst_done[3]   = 1'b1;
+  //assign shell_rst_done[3:2] = 2'b11;
 
   // For each CMAC port, use the subsequent 4-bit: bit 0 for CMAC subsystem and
   // bit 1 for the corresponding adapter
@@ -459,6 +1007,24 @@ module open_nic_shell #(
     .m_axil_qdma_rresp   (axil_qdma_rresp),
     .m_axil_qdma_rready  (axil_qdma_rready),
 
+    .m_axil_qdma_csr_awaddr (axil_qdma_csr_awaddr),
+    .m_axil_qdma_csr_awvalid(axil_qdma_csr_awvalid),
+    // Only allowed to program axil csr interface when qdma_csr_prog_done is 1'b1
+    .m_axil_qdma_csr_awready(axil_qdma_csr_awready && qdma_csr_prog_done),
+    .m_axil_qdma_csr_wdata  (axil_qdma_csr_wdata),
+    .m_axil_qdma_csr_wvalid (axil_qdma_csr_wvalid),
+    .m_axil_qdma_csr_wready (axil_qdma_csr_wready),
+    .m_axil_qdma_csr_bvalid (axil_qdma_csr_bvalid),
+    .m_axil_qdma_csr_bresp  (axil_qdma_csr_bresp),
+    .m_axil_qdma_csr_bready (axil_qdma_csr_bready),
+    .m_axil_qdma_csr_araddr (axil_qdma_csr_araddr),
+    .m_axil_qdma_csr_arvalid(axil_qdma_csr_arvalid),
+    .m_axil_qdma_csr_arready(axil_qdma_csr_arready),
+    .m_axil_qdma_csr_rdata  (axil_qdma_csr_rdata),
+    .m_axil_qdma_csr_rresp  (axil_qdma_csr_rresp),
+    .m_axil_qdma_csr_rvalid (axil_qdma_csr_rvalid),
+    .m_axil_qdma_csr_rready (axil_qdma_csr_rready),
+
     .m_axil_adap_awvalid (axil_adap_awvalid),
     .m_axil_adap_awaddr  (axil_adap_awaddr),
     .m_axil_adap_awready (axil_adap_awready),
@@ -493,6 +1059,23 @@ module open_nic_shell #(
     .m_axil_cmac_rresp   (axil_cmac_rresp),
     .m_axil_cmac_rready  (axil_cmac_rready),
 
+    .m_axil_rdma_awvalid (axil_rdma_awvalid),
+    .m_axil_rdma_awaddr  (axil_rdma_awaddr),
+    .m_axil_rdma_awready (axil_rdma_awready),
+    .m_axil_rdma_wvalid  (axil_rdma_wvalid),
+    .m_axil_rdma_wdata   (axil_rdma_wdata),
+    .m_axil_rdma_wready  (axil_rdma_wready),
+    .m_axil_rdma_bvalid  (axil_rdma_bvalid),
+    .m_axil_rdma_bresp   (axil_rdma_bresp),
+    .m_axil_rdma_bready  (axil_rdma_bready),
+    .m_axil_rdma_arvalid (axil_rdma_arvalid),
+    .m_axil_rdma_araddr  (axil_rdma_araddr),
+    .m_axil_rdma_arready (axil_rdma_arready),
+    .m_axil_rdma_rvalid  (axil_rdma_rvalid),
+    .m_axil_rdma_rdata   (axil_rdma_rdata),
+    .m_axil_rdma_rresp   (axil_rdma_rresp),
+    .m_axil_rdma_rready  (axil_rdma_rready),
+
     .m_axil_box0_awvalid (axil_box0_awvalid),
     .m_axil_box0_awaddr  (axil_box0_awaddr),
     .m_axil_box0_awready (axil_box0_awready),
@@ -578,6 +1161,46 @@ module open_nic_shell #(
     .s_axis_c2h_tuser_dst                 (axis_qdma_c2h_tuser_dst),
     .s_axis_c2h_tready                    (axis_qdma_c2h_tready),
 
+    // QDMA DMA Engine - AXI MM interface
+    .m_axi_awready                        (axi_qdma_mm_awready),
+    .m_axi_wready                         (axi_qdma_mm_wready),
+    .m_axi_bid                            (axi_qdma_mm_bid),
+    .m_axi_bresp                          (axi_qdma_mm_bresp),
+    .m_axi_bvalid                         (axi_qdma_mm_bvalid),
+    .m_axi_arready                        (axi_qdma_mm_arready),
+    .m_axi_rid                            (axi_qdma_mm_rid),
+    .m_axi_rdata                          (axi_qdma_mm_rdata),
+    .m_axi_rresp                          (axi_qdma_mm_rresp),
+    .m_axi_rlast                          (axi_qdma_mm_rlast),
+    .m_axi_rvalid                         (axi_qdma_mm_rvalid),
+    .m_axi_awid                           (axi_qdma_mm_awid),
+    .m_axi_awaddr                         (axi_qdma_mm_awaddr),
+    .m_axi_awuser                         (axi_qdma_mm_awuser),
+    .m_axi_awlen                          (axi_qdma_mm_awlen),
+    .m_axi_awsize                         (axi_qdma_mm_awsize),
+    .m_axi_awburst                        (axi_qdma_mm_awburst),
+    .m_axi_awprot                         (axi_qdma_mm_awprot),
+    .m_axi_awvalid                        (axi_qdma_mm_awvalid),
+    .m_axi_awlock                         (axi_qdma_mm_awlock),
+    .m_axi_awcache                        (axi_qdma_mm_awcache),
+    .m_axi_wdata                          (axi_qdma_mm_wdata),
+    .m_axi_wuser                          (axi_qdma_mm_wuser),
+    .m_axi_wstrb                          (axi_qdma_mm_wstrb),
+    .m_axi_wlast                          (axi_qdma_mm_wlast),
+    .m_axi_wvalid                         (axi_qdma_mm_wvalid),
+    .m_axi_bready                         (axi_qdma_mm_bready),
+    .m_axi_arid                           (axi_qdma_mm_arid),
+    .m_axi_araddr                         (axi_qdma_mm_araddr),
+    .m_axi_aruser                         (axi_qdma_mm_aruser),
+    .m_axi_arlen                          (axi_qdma_mm_arlen),
+    .m_axi_arsize                         (axi_qdma_mm_arsize),
+    .m_axi_arburst                        (axi_qdma_mm_arburst),
+    .m_axi_arprot                         (axi_qdma_mm_arprot),
+    .m_axi_arvalid                        (axi_qdma_mm_arvalid),
+    .m_axi_arlock                         (axi_qdma_mm_arlock),
+    .m_axi_arcache                        (axi_qdma_mm_arcache),
+    .m_axi_rready                         (axi_qdma_mm_rready),
+
 `ifdef __synthesis__
     .pcie_rxp                             (pcie_rxp),
     .pcie_rxn                             (pcie_rxn),
@@ -649,9 +1272,67 @@ module open_nic_shell #(
     .m_axis_qdma_cpl_tready               (m_axis_qdma_cpl_sim_tready),
 `endif
 
+    .s_csr_prog_done                      (qdma_csr_prog_done),
+    .s_axil_csr_awaddr                    (axil_qdma_csr_awaddr),
+    .s_axil_csr_awprot                    (3'd0),
+    .s_axil_csr_awvalid                   (axil_qdma_csr_awvalid),
+    .s_axil_csr_awready                   (axil_qdma_csr_awready),
+    .s_axil_csr_wdata                     (axil_qdma_csr_wdata),
+    .s_axil_csr_wstrb                     (4'hf),
+    .s_axil_csr_wvalid                    (axil_qdma_csr_wvalid),
+    .s_axil_csr_wready                    (axil_qdma_csr_wready),
+    .s_axil_csr_bvalid                    (axil_qdma_csr_bvalid),
+    .s_axil_csr_bresp                     (axil_qdma_csr_bresp),
+    .s_axil_csr_bready                    (axil_qdma_csr_bready),
+    .s_axil_csr_araddr                    (axil_qdma_csr_araddr),
+    .s_axil_csr_arprot                    (3'd0),
+    .s_axil_csr_arvalid                   (axil_qdma_csr_arvalid),
+    .s_axil_csr_arready                   (axil_qdma_csr_arready),
+    .s_axil_csr_rdata                     (axil_qdma_csr_rdata),
+    .s_axil_csr_rresp                     (axil_qdma_csr_rresp),
+    .s_axil_csr_rvalid                    (axil_qdma_csr_rvalid),
+    .s_axil_csr_rready                    (axil_qdma_csr_rready),
+
+    .s_axib_awid                          ({1'd0,axi_sys_mem_awid}),
+    .s_axib_awaddr                        (axi_sys_mem_awaddr),
+    .s_axib_awregion                      (axi_sys_mem_awregion),
+    .s_axib_awlen                         (axi_sys_mem_awlen),
+    .s_axib_awsize                        (axi_sys_mem_awsize),
+    .s_axib_awburst                       (axi_sys_mem_awburst),
+    .s_axib_awvalid                       (axi_sys_mem_awvalid),
+    .s_axib_wdata                         (axi_sys_mem_wdata),
+    .s_axib_wstrb                         (axi_sys_mem_wstrb),
+    .s_axib_wlast                         (axi_sys_mem_wlast),
+    .s_axib_wvalid                        (axi_sys_mem_wvalid),
+    .s_axib_wuser                         (axi_sys_mem_wuser),
+    .s_axib_ruser                         (axi_sys_mem_ruser),
+    .s_axib_bready                        (axi_sys_mem_bready),
+    .s_axib_arid                          ({1'd0,axi_sys_mem_arid}),
+    .s_axib_araddr                        (axi_sys_mem_araddr),
+    .s_axib_aruser                        (axi_sys_mem_aruser),
+    .s_axib_awuser                        (axi_sys_mem_awuser),
+    .s_axib_arregion                      (axi_sys_mem_arregion),
+    .s_axib_arlen                         (axi_sys_mem_arlen),
+    .s_axib_arsize                        (axi_sys_mem_arsize),
+    .s_axib_arburst                       (axi_sys_mem_arburst),
+    .s_axib_arvalid                       (axi_sys_mem_arvalid),
+    .s_axib_rready                        (axi_sys_mem_rready),
+    .s_axib_awready                       (axi_sys_mem_awready),
+    .s_axib_wready                        (axi_sys_mem_wready),
+    .s_axib_bid                           (axi_sys_mem_bid),
+    .s_axib_bresp                         (axi_sys_mem_bresp),
+    .s_axib_bvalid                        (axi_sys_mem_bvalid),
+    .s_axib_arready                       (axi_sys_mem_arready),
+    .s_axib_rid                           (axi_sys_mem_rid),
+    .s_axib_rdata                         (axi_sys_mem_rdata),
+    .s_axib_rresp                         (axi_sys_mem_rresp),
+    .s_axib_rlast                         (axi_sys_mem_rlast),
+    .s_axib_rvalid                        (axi_sys_mem_rvalid),
+
     .mod_rstn                             (qdma_rstn),
     .mod_rst_done                         (qdma_rst_done),
 
+    .ref_clk_100mhz                       (hbm_ref_clk),
     .axil_aclk                            (axil_aclk),
     .axis_aclk                            (axis_aclk)
   );
@@ -786,6 +1467,809 @@ module open_nic_shell #(
   end: cmac_port
   endgenerate
 
+  // RDMA subsystem
+  // TODO: retry buffer and hardware handshaking are not supported at the moment
+  rdma_subsystem_wrapper rdma_subsystem_inst (
+    // AXIL interface for RDMA control register
+    .s_axil_awaddr    (axil_rdma_awaddr),
+    .s_axil_awvalid   (axil_rdma_awvalid),
+    .s_axil_awready   (axil_rdma_awready),
+    .s_axil_wdata     (axil_rdma_wdata),
+    .s_axil_wstrb     (4'hf),
+    .s_axil_wvalid    (axil_rdma_wvalid),
+    .s_axil_wready    (axil_rdma_wready),
+    .s_axil_araddr    (axil_rdma_araddr),
+    .s_axil_arvalid   (axil_rdma_arvalid),
+    .s_axil_arready   (axil_rdma_arready),
+    .s_axil_rdata     (axil_rdma_rdata),
+    .s_axil_rvalid    (axil_rdma_rvalid),
+    .s_axil_rresp     (axil_rdma_rresp),
+    .s_axil_rready    (axil_rdma_rready),
+    .s_axil_bresp     (axil_rdma_bresp),
+    .s_axil_bvalid    (axil_rdma_bvalid),
+    .s_axil_bready    (axil_rdma_bready),
+
+    // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+    .m_rdma2cmac_axis_tdata  (rdma2cmac_axis_tdata),
+    .m_rdma2cmac_axis_tkeep  (rdma2cmac_axis_tkeep),
+    .m_rdma2cmac_axis_tvalid (rdma2cmac_axis_tvalid),
+    .m_rdma2cmac_axis_tlast  (rdma2cmac_axis_tlast),
+    .m_rdma2cmac_axis_tready (rdma2cmac_axis_tready),
+
+    // Non-RDMA packets from QDMA TX bypassing RDMA TX
+    .s_qdma2rdma_non_roce_axis_tdata    (qdma2rdma_non_roce_axis_tdata),
+    .s_qdma2rdma_non_roce_axis_tkeep    (qdma2rdma_non_roce_axis_tkeep),
+    .s_qdma2rdma_non_roce_axis_tvalid   (qdma2rdma_non_roce_axis_tvalid),
+    .s_qdma2rdma_non_roce_axis_tlast    (qdma2rdma_non_roce_axis_tlast),
+    .s_qdma2rdma_non_roce_axis_tready   (qdma2rdma_non_roce_axis_tready),
+
+    // RDMA RX interface from CMAC RX, no rx backpressure
+    .s_cmac2rdma_roce_axis_tdata        (cmac2rdma_roce_axis_tdata),
+    .s_cmac2rdma_roce_axis_tkeep        (cmac2rdma_roce_axis_tkeep),
+    .s_cmac2rdma_roce_axis_tvalid       (cmac2rdma_roce_axis_tvalid),
+    .s_cmac2rdma_roce_axis_tlast        (cmac2rdma_roce_axis_tlast),
+    .s_cmac2rdma_roce_axis_tuser        (cmac2rdma_roce_axis_tuser),
+
+    // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+    .s_cmac2rdma_non_roce_axis_tdata    (512'd0),
+    .s_cmac2rdma_non_roce_axis_tkeep    (64'd0),
+    .s_cmac2rdma_non_roce_axis_tvalid   (1'b0),
+    .s_cmac2rdma_non_roce_axis_tlast    (1'b0),
+    .s_cmac2rdma_non_roce_axis_tuser    (1'b0),
+
+    // Non-RDMA packets bypassing RDMA to QDMA RX
+    .m_rdma2qdma_non_roce_axis_tdata    (),
+    .m_rdma2qdma_non_roce_axis_tkeep    (),
+    .m_rdma2qdma_non_roce_axis_tvalid   (),
+    .m_rdma2qdma_non_roce_axis_tlast    (),
+    .m_rdma2qdma_non_roce_axis_tready   (1'b1),
+
+    // invalidate or immediate data from roce IETH/IMMDT header
+    .m_rdma2user_ieth_immdt_axis_tdata  (rdma2user_ieth_immdt_axis_tdata),
+    .m_rdma2user_ieth_immdt_axis_tlast  (rdma2user_ieth_immdt_axis_tlast),
+    .m_rdma2user_ieth_immdt_axis_tvalid (rdma2user_ieth_immdt_axis_tvalid),
+    .m_rdma2user_ieth_immdt_axis_trdy   (rdma2user_ieth_immdt_axis_trdy),
+
+    // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+    .m_axi_rdma_send_write_payload_store_awid    (axi_rdma_send_write_payload_awid),
+    .m_axi_rdma_send_write_payload_store_awaddr  (axi_rdma_send_write_payload_awaddr),
+    .m_axi_rdma_send_write_payload_store_awuser  (axi_rdma_send_write_payload_awuser),
+    .m_axi_rdma_send_write_payload_store_awlen   (axi_rdma_send_write_payload_awlen),
+    .m_axi_rdma_send_write_payload_store_awsize  (axi_rdma_send_write_payload_awsize),
+    .m_axi_rdma_send_write_payload_store_awburst (axi_rdma_send_write_payload_awburst),
+    .m_axi_rdma_send_write_payload_store_awcache (axi_rdma_send_write_payload_awcache),
+    .m_axi_rdma_send_write_payload_store_awprot  (axi_rdma_send_write_payload_awprot),
+    .m_axi_rdma_send_write_payload_store_awvalid (axi_rdma_send_write_payload_awvalid),
+    .m_axi_rdma_send_write_payload_store_awready (axi_rdma_send_write_payload_awready),
+    .m_axi_rdma_send_write_payload_store_wdata   (axi_rdma_send_write_payload_wdata),
+    .m_axi_rdma_send_write_payload_store_wstrb   (axi_rdma_send_write_payload_wstrb),
+    .m_axi_rdma_send_write_payload_store_wlast   (axi_rdma_send_write_payload_wlast),
+    .m_axi_rdma_send_write_payload_store_wvalid  (axi_rdma_send_write_payload_wvalid),
+    .m_axi_rdma_send_write_payload_store_wready  (axi_rdma_send_write_payload_wready),
+    .m_axi_rdma_send_write_payload_store_awlock  (axi_rdma_send_write_payload_awlock),
+    .m_axi_rdma_send_write_payload_store_bid     (axi_rdma_send_write_payload_bid),
+    .m_axi_rdma_send_write_payload_store_bresp   (axi_rdma_send_write_payload_bresp),
+    .m_axi_rdma_send_write_payload_store_bvalid  (axi_rdma_send_write_payload_bvalid),
+    .m_axi_rdma_send_write_payload_store_bready  (axi_rdma_send_write_payload_bready),
+    .m_axi_rdma_send_write_payload_store_arid    (axi_rdma_send_write_payload_arid),
+    .m_axi_rdma_send_write_payload_store_araddr  (axi_rdma_send_write_payload_araddr),
+    .m_axi_rdma_send_write_payload_store_arlen   (axi_rdma_send_write_payload_arlen),
+    .m_axi_rdma_send_write_payload_store_arsize  (axi_rdma_send_write_payload_arsize),
+    .m_axi_rdma_send_write_payload_store_arburst (axi_rdma_send_write_payload_arburst),
+    .m_axi_rdma_send_write_payload_store_arcache (axi_rdma_send_write_payload_arcache),
+    .m_axi_rdma_send_write_payload_store_arprot  (axi_rdma_send_write_payload_arprot),
+    .m_axi_rdma_send_write_payload_store_arvalid (axi_rdma_send_write_payload_arvalid),
+    .m_axi_rdma_send_write_payload_store_arready (axi_rdma_send_write_payload_arready),
+    .m_axi_rdma_send_write_payload_store_rid     (axi_rdma_send_write_payload_rid),
+    .m_axi_rdma_send_write_payload_store_rdata   (axi_rdma_send_write_payload_rdata),
+    .m_axi_rdma_send_write_payload_store_rresp   (axi_rdma_send_write_payload_rresp),
+    .m_axi_rdma_send_write_payload_store_rlast   (axi_rdma_send_write_payload_rlast),
+    .m_axi_rdma_send_write_payload_store_rvalid  (axi_rdma_send_write_payload_rvalid),
+    .m_axi_rdma_send_write_payload_store_rready  (axi_rdma_send_write_payload_rready),
+    .m_axi_rdma_send_write_payload_store_arlock  (axi_rdma_send_write_payload_arlock),
+
+    // RDMA AXI MM interface used to store payload from RDMA Read response operation
+    .m_axi_rdma_rsp_payload_awid          (axi_rdma_rsp_payload_awid),
+    .m_axi_rdma_rsp_payload_awaddr        (axi_rdma_rsp_payload_awaddr),
+    .m_axi_rdma_rsp_payload_awlen         (axi_rdma_rsp_payload_awlen),
+    .m_axi_rdma_rsp_payload_awsize        (axi_rdma_rsp_payload_awsize),
+    .m_axi_rdma_rsp_payload_awburst       (axi_rdma_rsp_payload_awburst),
+    .m_axi_rdma_rsp_payload_awcache       (axi_rdma_rsp_payload_awcache),
+    .m_axi_rdma_rsp_payload_awprot        (axi_rdma_rsp_payload_awprot),
+    .m_axi_rdma_rsp_payload_awvalid       (axi_rdma_rsp_payload_awvalid),
+    .m_axi_rdma_rsp_payload_awready       (axi_rdma_rsp_payload_awready),
+    .m_axi_rdma_rsp_payload_wdata         (axi_rdma_rsp_payload_wdata),
+    .m_axi_rdma_rsp_payload_wstrb         (axi_rdma_rsp_payload_wstrb),
+    .m_axi_rdma_rsp_payload_wlast         (axi_rdma_rsp_payload_wlast),
+    .m_axi_rdma_rsp_payload_wvalid        (axi_rdma_rsp_payload_wvalid),
+    .m_axi_rdma_rsp_payload_wready        (axi_rdma_rsp_payload_wready),
+    .m_axi_rdma_rsp_payload_awlock        (axi_rdma_rsp_payload_awlock),
+    .m_axi_rdma_rsp_payload_bid           (axi_rdma_rsp_payload_bid),
+    .m_axi_rdma_rsp_payload_bresp         (axi_rdma_rsp_payload_bresp),
+    .m_axi_rdma_rsp_payload_bvalid        (axi_rdma_rsp_payload_bvalid),
+    .m_axi_rdma_rsp_payload_bready        (axi_rdma_rsp_payload_bready),
+    .m_axi_rdma_rsp_payload_arid          (axi_rdma_rsp_payload_arid),
+    .m_axi_rdma_rsp_payload_araddr        (axi_rdma_rsp_payload_araddr),
+    .m_axi_rdma_rsp_payload_arlen         (axi_rdma_rsp_payload_arlen),
+    .m_axi_rdma_rsp_payload_arsize        (axi_rdma_rsp_payload_arsize),
+    .m_axi_rdma_rsp_payload_arburst       (axi_rdma_rsp_payload_arburst),
+    .m_axi_rdma_rsp_payload_arcache       (axi_rdma_rsp_payload_arcache),
+    .m_axi_rdma_rsp_payload_arprot        (axi_rdma_rsp_payload_arprot),
+    .m_axi_rdma_rsp_payload_arvalid       (axi_rdma_rsp_payload_arvalid),
+    .m_axi_rdma_rsp_payload_arready       (axi_rdma_rsp_payload_arready),
+    .m_axi_rdma_rsp_payload_rid           (axi_rdma_rsp_payload_rid),
+    .m_axi_rdma_rsp_payload_rdata         (axi_rdma_rsp_payload_rdata),
+    .m_axi_rdma_rsp_payload_rresp         (axi_rdma_rsp_payload_rresp),
+    .m_axi_rdma_rsp_payload_rlast         (axi_rdma_rsp_payload_rlast),
+    .m_axi_rdma_rsp_payload_rvalid        (axi_rdma_rsp_payload_rvalid),
+    .m_axi_rdma_rsp_payload_rready        (axi_rdma_rsp_payload_rready),
+    .m_axi_rdma_rsp_payload_arlock        (axi_rdma_rsp_payload_arlock),
+
+    // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+    .m_axi_qp_get_wqe_awid                (axi_rdma_get_wqe_awid),
+    .m_axi_qp_get_wqe_awaddr              (axi_rdma_get_wqe_awaddr),
+    .m_axi_qp_get_wqe_awlen               (axi_rdma_get_wqe_awlen),
+    .m_axi_qp_get_wqe_awsize              (axi_rdma_get_wqe_awsize),
+    .m_axi_qp_get_wqe_awburst             (axi_rdma_get_wqe_awburst),
+    .m_axi_qp_get_wqe_awcache             (axi_rdma_get_wqe_awcache),
+    .m_axi_qp_get_wqe_awprot              (axi_rdma_get_wqe_awprot),
+    .m_axi_qp_get_wqe_awvalid             (axi_rdma_get_wqe_awvalid),
+    .m_axi_qp_get_wqe_awready             (axi_rdma_get_wqe_awready),
+    .m_axi_qp_get_wqe_wdata               (axi_rdma_get_wqe_wdata),
+    .m_axi_qp_get_wqe_wstrb               (axi_rdma_get_wqe_wstrb),
+    .m_axi_qp_get_wqe_wlast               (axi_rdma_get_wqe_wlast),
+    .m_axi_qp_get_wqe_wvalid              (axi_rdma_get_wqe_wvalid),
+    .m_axi_qp_get_wqe_wready              (axi_rdma_get_wqe_wready),
+    .m_axi_qp_get_wqe_awlock              (axi_rdma_get_wqe_awlock),
+    .m_axi_qp_get_wqe_bid                 (axi_rdma_get_wqe_bid),
+    .m_axi_qp_get_wqe_bresp               (axi_rdma_get_wqe_bresp),
+    .m_axi_qp_get_wqe_bvalid              (axi_rdma_get_wqe_bvalid),
+    .m_axi_qp_get_wqe_bready              (axi_rdma_get_wqe_bready),
+    .m_axi_qp_get_wqe_arid                (axi_rdma_get_wqe_arid),
+    .m_axi_qp_get_wqe_araddr              (axi_rdma_get_wqe_araddr),
+    .m_axi_qp_get_wqe_arlen               (axi_rdma_get_wqe_arlen),
+    .m_axi_qp_get_wqe_arsize              (axi_rdma_get_wqe_arsize),
+    .m_axi_qp_get_wqe_arburst             (axi_rdma_get_wqe_arburst),
+    .m_axi_qp_get_wqe_arcache             (axi_rdma_get_wqe_arcache),
+    .m_axi_qp_get_wqe_arprot              (axi_rdma_get_wqe_arprot),
+    .m_axi_qp_get_wqe_arvalid             (axi_rdma_get_wqe_arvalid),
+    .m_axi_qp_get_wqe_arready             (axi_rdma_get_wqe_arready),
+    .m_axi_qp_get_wqe_rid                 (axi_rdma_get_wqe_rid),
+    .m_axi_qp_get_wqe_rdata               (axi_rdma_get_wqe_rdata),
+    .m_axi_qp_get_wqe_rresp               (axi_rdma_get_wqe_rresp),
+    .m_axi_qp_get_wqe_rlast               (axi_rdma_get_wqe_rlast),
+    .m_axi_qp_get_wqe_rvalid              (axi_rdma_get_wqe_rvalid),
+    .m_axi_qp_get_wqe_rready              (axi_rdma_get_wqe_rready),
+    .m_axi_qp_get_wqe_arlock              (axi_rdma_get_wqe_arlock),
+
+    // TODO: In the current implementation, we do not consider retry buffer
+    // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+    .m_axi_payload_to_retry_buf_awid     (),
+    .m_axi_payload_to_retry_buf_awaddr   (),
+    .m_axi_payload_to_retry_buf_awlen    (),
+    .m_axi_payload_to_retry_buf_awsize   (),
+    .m_axi_payload_to_retry_buf_awburst  (),
+    .m_axi_payload_to_retry_buf_awcache  (),
+    .m_axi_payload_to_retry_buf_awprot   (),
+    .m_axi_payload_to_retry_buf_awvalid  (),
+    .m_axi_payload_to_retry_buf_awready  (1'b1),
+    .m_axi_payload_to_retry_buf_wdata    (),
+    .m_axi_payload_to_retry_buf_wstrb    (),
+    .m_axi_payload_to_retry_buf_wlast    (),
+    .m_axi_payload_to_retry_buf_wvalid   (),
+    .m_axi_payload_to_retry_buf_wready   (1'b1),
+    .m_axi_payload_to_retry_buf_awlock   (),
+    .m_axi_payload_to_retry_buf_bid      (1'b0),
+    .m_axi_payload_to_retry_buf_bresp    (2'd0),
+    .m_axi_payload_to_retry_buf_bvalid   (1'b0),
+    .m_axi_payload_to_retry_buf_bready   (),
+    .m_axi_payload_to_retry_buf_arid     (),
+    .m_axi_payload_to_retry_buf_araddr   (),
+    .m_axi_payload_to_retry_buf_arlen    (),
+    .m_axi_payload_to_retry_buf_arsize   (),
+    .m_axi_payload_to_retry_buf_arburst  (),
+    .m_axi_payload_to_retry_buf_arcache  (),
+    .m_axi_payload_to_retry_buf_arprot   (),
+    .m_axi_payload_to_retry_buf_arvalid  (),
+    .m_axi_payload_to_retry_buf_arready  (1'b1),
+    .m_axi_payload_to_retry_buf_rid      (1'b0),
+    .m_axi_payload_to_retry_buf_rdata    (512'd0),
+    .m_axi_payload_to_retry_buf_rresp    (2'd0),
+    .m_axi_payload_to_retry_buf_rlast    (1'b0),
+    .m_axi_payload_to_retry_buf_rvalid   (1'b0),
+    .m_axi_payload_to_retry_buf_rready   (),
+    .m_axi_payload_to_retry_buf_arlock   (),
+
+    // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+    .m_axi_pktgen_get_payload_awid       (axi_rdma_get_payload_awid),
+    .m_axi_pktgen_get_payload_awaddr     (axi_rdma_get_payload_awaddr),
+    .m_axi_pktgen_get_payload_awlen      (axi_rdma_get_payload_awlen),
+    .m_axi_pktgen_get_payload_awsize     (axi_rdma_get_payload_awsize),
+    .m_axi_pktgen_get_payload_awburst    (axi_rdma_get_payload_awburst),
+    .m_axi_pktgen_get_payload_awcache    (axi_rdma_get_payload_awcache),
+    .m_axi_pktgen_get_payload_awprot     (axi_rdma_get_payload_awprot),
+    .m_axi_pktgen_get_payload_awvalid    (axi_rdma_get_payload_awvalid),
+    .m_axi_pktgen_get_payload_awready    (axi_rdma_get_payload_awready),
+    .m_axi_pktgen_get_payload_wdata      (axi_rdma_get_payload_wdata),
+    .m_axi_pktgen_get_payload_wstrb      (axi_rdma_get_payload_wstrb),
+    .m_axi_pktgen_get_payload_wlast      (axi_rdma_get_payload_wlast),
+    .m_axi_pktgen_get_payload_wvalid     (axi_rdma_get_payload_wvalid),
+    .m_axi_pktgen_get_payload_wready     (axi_rdma_get_payload_wready),
+    .m_axi_pktgen_get_payload_awlock     (axi_rdma_get_payload_awlock),
+    .m_axi_pktgen_get_payload_bid        (axi_rdma_get_payload_bid),
+    .m_axi_pktgen_get_payload_bresp      (axi_rdma_get_payload_bresp),
+    .m_axi_pktgen_get_payload_bvalid     (axi_rdma_get_payload_bvalid),
+    .m_axi_pktgen_get_payload_bready     (axi_rdma_get_payload_bready),
+    .m_axi_pktgen_get_payload_arid       (axi_rdma_get_payload_arid),
+    .m_axi_pktgen_get_payload_araddr     (axi_rdma_get_payload_araddr),
+    .m_axi_pktgen_get_payload_arlen      (axi_rdma_get_payload_arlen),
+    .m_axi_pktgen_get_payload_arsize     (axi_rdma_get_payload_arsize),
+    .m_axi_pktgen_get_payload_arburst    (axi_rdma_get_payload_arburst),
+    .m_axi_pktgen_get_payload_arcache    (axi_rdma_get_payload_arcache),
+    .m_axi_pktgen_get_payload_arprot     (axi_rdma_get_payload_arprot),
+    .m_axi_pktgen_get_payload_arvalid    (axi_rdma_get_payload_arvalid),
+    .m_axi_pktgen_get_payload_arready    (axi_rdma_get_payload_arready),
+    .m_axi_pktgen_get_payload_rid        (axi_rdma_get_payload_rid),
+    .m_axi_pktgen_get_payload_rdata      (axi_rdma_get_payload_rdata),
+    .m_axi_pktgen_get_payload_rresp      (axi_rdma_get_payload_rresp),
+    .m_axi_pktgen_get_payload_rlast      (axi_rdma_get_payload_rlast),
+    .m_axi_pktgen_get_payload_rvalid     (axi_rdma_get_payload_rvalid),
+    .m_axi_pktgen_get_payload_rready     (axi_rdma_get_payload_rready),
+    .m_axi_pktgen_get_payload_arlock     (axi_rdma_get_payload_arlock),
+
+    // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+    .m_axi_write_completion_awid         (axi_rdma_completion_awid),
+    .m_axi_write_completion_awaddr       (axi_rdma_completion_awaddr),
+    .m_axi_write_completion_awlen        (axi_rdma_completion_awlen),
+    .m_axi_write_completion_awsize       (axi_rdma_completion_awsize),
+    .m_axi_write_completion_awburst      (axi_rdma_completion_awburst),
+    .m_axi_write_completion_awcache      (axi_rdma_completion_awcache),
+    .m_axi_write_completion_awprot       (axi_rdma_completion_awprot),
+    .m_axi_write_completion_awvalid      (axi_rdma_completion_awvalid),
+    .m_axi_write_completion_awready      (axi_rdma_completion_awready),
+    .m_axi_write_completion_wdata        (axi_rdma_completion_wdata),
+    .m_axi_write_completion_wstrb        (axi_rdma_completion_wstrb),
+    .m_axi_write_completion_wlast        (axi_rdma_completion_wlast),
+    .m_axi_write_completion_wvalid       (axi_rdma_completion_wvalid),
+    .m_axi_write_completion_wready       (axi_rdma_completion_wready),
+    .m_axi_write_completion_awlock       (axi_rdma_completion_awlock),
+    .m_axi_write_completion_bid          (axi_rdma_completion_bid),
+    .m_axi_write_completion_bresp        (axi_rdma_completion_bresp),
+    .m_axi_write_completion_bvalid       (axi_rdma_completion_bvalid),
+    .m_axi_write_completion_bready       (axi_rdma_completion_bready),
+    .m_axi_write_completion_arid         (axi_rdma_completion_arid),
+    .m_axi_write_completion_araddr       (axi_rdma_completion_araddr),
+    .m_axi_write_completion_arlen        (axi_rdma_completion_arlen),
+    .m_axi_write_completion_arsize       (axi_rdma_completion_arsize),
+    .m_axi_write_completion_arburst      (axi_rdma_completion_arburst),
+    .m_axi_write_completion_arcache      (axi_rdma_completion_arcache),
+    .m_axi_write_completion_arprot       (axi_rdma_completion_arprot),
+    .m_axi_write_completion_arvalid      (axi_rdma_completion_arvalid),
+    .m_axi_write_completion_arready      (axi_rdma_completion_arready),
+    .m_axi_write_completion_rid          (axi_rdma_completion_rid),
+    .m_axi_write_completion_rdata        (axi_rdma_completion_rdata),
+    .m_axi_write_completion_rresp        (axi_rdma_completion_rresp),
+    .m_axi_write_completion_rlast        (axi_rdma_completion_rlast),
+    .m_axi_write_completion_rvalid       (axi_rdma_completion_rvalid),
+    .m_axi_write_completion_rready       (axi_rdma_completion_rready),
+    .m_axi_write_completion_arlock       (axi_rdma_completion_arlock),
+
+    // TODO: In the current implementation, we do not consider hardware handshaking from user logic
+    // HW handshaking from user logic: Send WQE completion queue doorbell
+    .resp_hndler_o_send_cq_db_cnt_valid(resp_hndler_o_send_cq_db_cnt_valid),
+    .resp_hndler_o_send_cq_db_addr     (resp_hndler_o_send_cq_db_addr),
+    .resp_hndler_o_send_cq_db_cnt      (resp_hndler_o_send_cq_db_cnt),
+    .resp_hndler_i_send_cq_db_rdy      (resp_hndler_i_send_cq_db_rdy),
+
+    // HW handshaking from user logic: Send WQE producer index doorbell
+    .i_qp_sq_pidb_hndshk               (i_qp_sq_pidb_hndshk),
+    .i_qp_sq_pidb_wr_addr_hndshk       (i_qp_sq_pidb_wr_addr_hndshk),
+    .i_qp_sq_pidb_wr_valid_hndshk      (i_qp_sq_pidb_wr_valid_hndshk),
+    .o_qp_sq_pidb_wr_rdy               (o_qp_sq_pidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send consumer index doorbell
+    .i_qp_rq_cidb_hndshk               (i_qp_rq_cidb_hndshk),
+    .i_qp_rq_cidb_wr_addr_hndshk       (i_qp_rq_cidb_wr_addr_hndshk),
+    .i_qp_rq_cidb_wr_valid_hndshk      (i_qp_rq_cidb_wr_valid_hndshk),
+    .o_qp_rq_cidb_wr_rdy               (o_qp_rq_cidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send producer index doorbell
+    .rx_pkt_hndler_o_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+    .rx_pkt_hndler_o_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+    .rx_pkt_hndler_o_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+    .rx_pkt_hndler_i_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+    .rnic_intr    (rdma_intr),
+
+    .mod_rstn     (rdma_rstn),
+    .mod_rst_done (rdma_rst_done),
+    //.rdma_resetn_done (rdma_resetn_done),
+    .axil_clk     (axil_aclk),
+    .axis_clk     (axis_aclk)
+  );
+
+  axi_3to1_interconnect_to_dev_mem axi_interconnect_to_dev_mem_inst(
+    .s_axi_qdma_mm_awid                    ({1'd0,axi_qdma_mm_awid}),
+    .s_axi_qdma_mm_awaddr                  (axi_qdma_mm_awaddr),
+    .s_axi_qdma_mm_awqos                   (axi_qdma_mm_awqos),
+    .s_axi_qdma_mm_awlen                   (axi_qdma_mm_awlen),
+    .s_axi_qdma_mm_awsize                  (axi_qdma_mm_awsize),
+    .s_axi_qdma_mm_awburst                 (axi_qdma_mm_awburst),
+    .s_axi_qdma_mm_awcache                 (axi_qdma_mm_awcache),
+    .s_axi_qdma_mm_awprot                  (axi_qdma_mm_awprot),
+    .s_axi_qdma_mm_awvalid                 (axi_qdma_mm_awvalid),
+    .s_axi_qdma_mm_awready                 (axi_qdma_mm_awready),
+    .s_axi_qdma_mm_wdata                   (axi_qdma_mm_wdata),
+    .s_axi_qdma_mm_wstrb                   (axi_qdma_mm_wstrb),
+    .s_axi_qdma_mm_wlast                   (axi_qdma_mm_wlast),
+    .s_axi_qdma_mm_wvalid                  (axi_qdma_mm_wvalid),
+    .s_axi_qdma_mm_wready                  (axi_qdma_mm_wready),
+    .s_axi_qdma_mm_awlock                  (axi_qdma_mm_awlock),
+    .s_axi_qdma_mm_bid                     (axi_qdma_mm_bid),
+    .s_axi_qdma_mm_bresp                   (axi_qdma_mm_bresp),
+    .s_axi_qdma_mm_bvalid                  (axi_qdma_mm_bvalid),
+    .s_axi_qdma_mm_bready                  (axi_qdma_mm_bready),
+    .s_axi_qdma_mm_arid                    ({1'd0,axi_qdma_mm_arid}),
+    .s_axi_qdma_mm_araddr                  (axi_qdma_mm_araddr),
+    .s_axi_qdma_mm_arlen                   (axi_qdma_mm_arlen),
+    .s_axi_qdma_mm_arsize                  (axi_qdma_mm_arsize),
+    .s_axi_qdma_mm_arburst                 (axi_qdma_mm_arburst),
+    .s_axi_qdma_mm_arcache                 (axi_qdma_mm_arcache),
+    .s_axi_qdma_mm_arprot                  (axi_qdma_mm_arprot),
+    .s_axi_qdma_mm_arvalid                 (axi_qdma_mm_arvalid),
+    .s_axi_qdma_mm_arready                 (axi_qdma_mm_arready),
+    .s_axi_qdma_mm_rid                     (axi_qdma_mm_rid),
+    .s_axi_qdma_mm_rdata                   (axi_qdma_mm_rdata),
+    .s_axi_qdma_mm_rresp                   (axi_qdma_mm_rresp),
+    .s_axi_qdma_mm_rlast                   (axi_qdma_mm_rlast),
+    .s_axi_qdma_mm_rvalid                  (axi_qdma_mm_rvalid),
+    .s_axi_qdma_mm_rready                  (axi_qdma_mm_rready),
+    .s_axi_qdma_mm_arlock                  (axi_qdma_mm_arlock),
+    .s_axi_qdma_mm_arqos                   (axi_qdma_mm_arqos),
+
+    .s_axi_compute_logic_awid              (axi_compute_logic_awid),
+    .s_axi_compute_logic_awaddr            (axi_compute_logic_awaddr),
+    .s_axi_compute_logic_awqos             (axi_compute_logic_awqos),
+    .s_axi_compute_logic_awlen             (axi_compute_logic_awlen),
+    .s_axi_compute_logic_awsize            (axi_compute_logic_awsize),
+    .s_axi_compute_logic_awburst           (axi_compute_logic_awburst),
+    .s_axi_compute_logic_awcache           (axi_compute_logic_awcache),
+    .s_axi_compute_logic_awprot            (axi_compute_logic_awprot),
+    .s_axi_compute_logic_awvalid           (axi_compute_logic_awvalid),
+    .s_axi_compute_logic_awready           (axi_compute_logic_awready),
+    .s_axi_compute_logic_wdata             (axi_compute_logic_wdata),
+    .s_axi_compute_logic_wstrb             (axi_compute_logic_wstrb),
+    .s_axi_compute_logic_wlast             (axi_compute_logic_wlast),
+    .s_axi_compute_logic_wvalid            (axi_compute_logic_wvalid),
+    .s_axi_compute_logic_wready            (axi_compute_logic_wready),
+    .s_axi_compute_logic_awlock            (axi_compute_logic_awlock),
+    .s_axi_compute_logic_bid               (axi_compute_logic_bid),
+    .s_axi_compute_logic_bresp             (axi_compute_logic_bresp),
+    .s_axi_compute_logic_bvalid            (axi_compute_logic_bvalid),
+    .s_axi_compute_logic_bready            (axi_compute_logic_bready),
+    .s_axi_compute_logic_arid              (axi_compute_logic_arid),
+    .s_axi_compute_logic_araddr            (axi_compute_logic_araddr),
+    .s_axi_compute_logic_arlen             (axi_compute_logic_arlen),
+    .s_axi_compute_logic_arsize            (axi_compute_logic_arsize),
+    .s_axi_compute_logic_arburst           (axi_compute_logic_arburst),
+    .s_axi_compute_logic_arcache           (axi_compute_logic_arcache),
+    .s_axi_compute_logic_arprot            (axi_compute_logic_arprot),
+    .s_axi_compute_logic_arvalid           (axi_compute_logic_arvalid),
+    .s_axi_compute_logic_arready           (axi_compute_logic_arready),
+    .s_axi_compute_logic_rid               (axi_compute_logic_rid),
+    .s_axi_compute_logic_rdata             (axi_compute_logic_rdata),
+    .s_axi_compute_logic_rresp             (axi_compute_logic_rresp),
+    .s_axi_compute_logic_rlast             (axi_compute_logic_rlast),
+    .s_axi_compute_logic_rvalid            (axi_compute_logic_rvalid),
+    .s_axi_compute_logic_rready            (axi_compute_logic_rready),
+    .s_axi_compute_logic_arlock            (axi_compute_logic_arlock),
+    .s_axi_compute_logic_arqos             (axi_compute_logic_arqos),
+
+    .s_axi_from_sys_crossbar_awid          ({2'd0,axi_from_sys_to_dev_crossbar_awid}),
+    .s_axi_from_sys_crossbar_awaddr        (axi_from_sys_to_dev_crossbar_awaddr),
+    .s_axi_from_sys_crossbar_awqos         (axi_from_sys_to_dev_crossbar_awqos),
+    .s_axi_from_sys_crossbar_awlen         (axi_from_sys_to_dev_crossbar_awlen),
+    .s_axi_from_sys_crossbar_awsize        (axi_from_sys_to_dev_crossbar_awsize),
+    .s_axi_from_sys_crossbar_awburst       (axi_from_sys_to_dev_crossbar_awburst),
+    .s_axi_from_sys_crossbar_awcache       (axi_from_sys_to_dev_crossbar_awcache),
+    .s_axi_from_sys_crossbar_awprot        (axi_from_sys_to_dev_crossbar_awprot),
+    .s_axi_from_sys_crossbar_awvalid       (axi_from_sys_to_dev_crossbar_awvalid),
+    .s_axi_from_sys_crossbar_awready       (axi_from_sys_to_dev_crossbar_awready),
+    .s_axi_from_sys_crossbar_wdata         (axi_from_sys_to_dev_crossbar_wdata),
+    .s_axi_from_sys_crossbar_wstrb         (axi_from_sys_to_dev_crossbar_wstrb),
+    .s_axi_from_sys_crossbar_wlast         (axi_from_sys_to_dev_crossbar_wlast),
+    .s_axi_from_sys_crossbar_wvalid        (axi_from_sys_to_dev_crossbar_wvalid),
+    .s_axi_from_sys_crossbar_wready        (axi_from_sys_to_dev_crossbar_wready),
+    .s_axi_from_sys_crossbar_awlock        (axi_from_sys_to_dev_crossbar_awlock),
+    .s_axi_from_sys_crossbar_bid           (axi_from_sys_to_dev_crossbar_bid),
+    .s_axi_from_sys_crossbar_bresp         (axi_from_sys_to_dev_crossbar_bresp),
+    .s_axi_from_sys_crossbar_bvalid        (axi_from_sys_to_dev_crossbar_bvalid),
+    .s_axi_from_sys_crossbar_bready        (axi_from_sys_to_dev_crossbar_bready),
+    .s_axi_from_sys_crossbar_arid          ({2'd0,axi_from_sys_to_dev_crossbar_arid}),
+    .s_axi_from_sys_crossbar_araddr        (axi_from_sys_to_dev_crossbar_araddr),
+    .s_axi_from_sys_crossbar_arlen         (axi_from_sys_to_dev_crossbar_arlen),
+    .s_axi_from_sys_crossbar_arsize        (axi_from_sys_to_dev_crossbar_arsize),
+    .s_axi_from_sys_crossbar_arburst       (axi_from_sys_to_dev_crossbar_arburst),
+    .s_axi_from_sys_crossbar_arcache       (axi_from_sys_to_dev_crossbar_arcache),
+    .s_axi_from_sys_crossbar_arprot        (axi_from_sys_to_dev_crossbar_arprot),
+    .s_axi_from_sys_crossbar_arvalid       (axi_from_sys_to_dev_crossbar_arvalid),
+    .s_axi_from_sys_crossbar_arready       (axi_from_sys_to_dev_crossbar_arready),
+    .s_axi_from_sys_crossbar_rid           (axi_from_sys_to_dev_crossbar_rid),
+    .s_axi_from_sys_crossbar_rdata         (axi_from_sys_to_dev_crossbar_rdata),
+    .s_axi_from_sys_crossbar_rresp         (axi_from_sys_to_dev_crossbar_rresp),
+    .s_axi_from_sys_crossbar_rlast         (axi_from_sys_to_dev_crossbar_rlast),
+    .s_axi_from_sys_crossbar_rvalid        (axi_from_sys_to_dev_crossbar_rvalid),
+    .s_axi_from_sys_crossbar_rready        (axi_from_sys_to_dev_crossbar_rready),
+    .s_axi_from_sys_crossbar_arlock        (axi_from_sys_to_dev_crossbar_arlock),
+    .s_axi_from_sys_crossbar_arqos         (axi_from_sys_to_dev_crossbar_arqos),
+
+    .m_axi_dev_mem_awaddr                  (axi_dev_mem_awaddr),
+    .m_axi_dev_mem_awprot                  (axi_dev_mem_awprot),
+    .m_axi_dev_mem_awvalid                 (axi_dev_mem_awvalid),
+    .m_axi_dev_mem_awready                 (axi_dev_mem_awready),
+    .m_axi_dev_mem_awsize                  (axi_dev_mem_awsize),
+    .m_axi_dev_mem_awburst                 (axi_dev_mem_awburst),
+    .m_axi_dev_mem_awcache                 (axi_dev_mem_awcache),
+    .m_axi_dev_mem_awlen                   (axi_dev_mem_awlen),
+    .m_axi_dev_mem_awlock                  (axi_dev_mem_awlock),
+    .m_axi_dev_mem_awqos                   (axi_dev_mem_awqos),
+    .m_axi_dev_mem_awregion                (axi_dev_mem_awregion),
+    .m_axi_dev_mem_awid                    (axi_dev_mem_awid),
+    .m_axi_dev_mem_wdata                   (axi_dev_mem_wdata),
+    .m_axi_dev_mem_wstrb                   (axi_dev_mem_wstrb),
+    .m_axi_dev_mem_wvalid                  (axi_dev_mem_wvalid),
+    .m_axi_dev_mem_wready                  (axi_dev_mem_wready),
+    .m_axi_dev_mem_wlast                   (axi_dev_mem_wlast),
+    .m_axi_dev_mem_bresp                   (axi_dev_mem_bresp),
+    .m_axi_dev_mem_bvalid                  (axi_dev_mem_bvalid),
+    .m_axi_dev_mem_bready                  (axi_dev_mem_bready),
+    .m_axi_dev_mem_bid                     (axi_dev_mem_bid),
+    .m_axi_dev_mem_araddr                  (axi_dev_mem_araddr),
+    .m_axi_dev_mem_arprot                  (axi_dev_mem_arprot),
+    .m_axi_dev_mem_arvalid                 (axi_dev_mem_arvalid),
+    .m_axi_dev_mem_arready                 (axi_dev_mem_arready),
+    .m_axi_dev_mem_arsize                  (axi_dev_mem_arsize),
+    .m_axi_dev_mem_arburst                 (axi_dev_mem_arburst),
+    .m_axi_dev_mem_arcache                 (axi_dev_mem_arcache),
+    .m_axi_dev_mem_arlock                  (axi_dev_mem_arlock),
+    .m_axi_dev_mem_arlen                   (axi_dev_mem_arlen),
+    .m_axi_dev_mem_arqos                   (axi_dev_mem_arqos),
+    .m_axi_dev_mem_arregion                (axi_dev_mem_arregion),
+    .m_axi_dev_mem_arid                    (axi_dev_mem_arid),
+    .m_axi_dev_mem_rdata                   (axi_dev_mem_rdata),
+    .m_axi_dev_mem_rresp                   (axi_dev_mem_rresp),
+    .m_axi_dev_mem_rvalid                  (axi_dev_mem_rvalid),
+    .m_axi_dev_mem_rready                  (axi_dev_mem_rready),
+    .m_axi_dev_mem_rlast                   (axi_dev_mem_rlast),
+    .m_axi_dev_mem_rid                     (axi_dev_mem_rid),
+
+    .axis_aclk                             (axis_aclk),
+    .axis_arestn                           (qdma_rstn)
+);
+
+axi_5to2_interconnect_to_sys_mem axi_interconnect_to_sys_mem_inst(
+    .s_axi_rdma_get_wqe_awid               (axi_rdma_get_wqe_awid),
+    .s_axi_rdma_get_wqe_awaddr             (axi_rdma_get_wqe_awaddr),
+    .s_axi_rdma_get_wqe_awqos              (axi_rdma_get_wqe_awqos),
+    .s_axi_rdma_get_wqe_awlen              (axi_rdma_get_wqe_awlen),
+    .s_axi_rdma_get_wqe_awsize             (axi_rdma_get_wqe_awsize),
+    .s_axi_rdma_get_wqe_awburst            (axi_rdma_get_wqe_awburst),
+    .s_axi_rdma_get_wqe_awcache            (axi_rdma_get_wqe_awcache),
+    .s_axi_rdma_get_wqe_awprot             (axi_rdma_get_wqe_awprot),
+    .s_axi_rdma_get_wqe_awvalid            (axi_rdma_get_wqe_awvalid),
+    .s_axi_rdma_get_wqe_awready            (axi_rdma_get_wqe_awready),
+    .s_axi_rdma_get_wqe_wdata              (axi_rdma_get_wqe_wdata),
+    .s_axi_rdma_get_wqe_wstrb              (axi_rdma_get_wqe_wstrb),
+    .s_axi_rdma_get_wqe_wlast              (axi_rdma_get_wqe_wlast),
+    .s_axi_rdma_get_wqe_wvalid             (axi_rdma_get_wqe_wvalid),
+    .s_axi_rdma_get_wqe_wready             (axi_rdma_get_wqe_wready),
+    .s_axi_rdma_get_wqe_awlock             (axi_rdma_get_wqe_awlock),
+    .s_axi_rdma_get_wqe_bid                (axi_rdma_get_wqe_bid),
+    .s_axi_rdma_get_wqe_bresp              (axi_rdma_get_wqe_bresp),
+    .s_axi_rdma_get_wqe_bvalid             (axi_rdma_get_wqe_bvalid),
+    .s_axi_rdma_get_wqe_bready             (axi_rdma_get_wqe_bready),
+    .s_axi_rdma_get_wqe_arid               (axi_rdma_get_wqe_arid),
+    .s_axi_rdma_get_wqe_araddr             (axi_rdma_get_wqe_araddr),
+    .s_axi_rdma_get_wqe_arlen              (axi_rdma_get_wqe_arlen),
+    .s_axi_rdma_get_wqe_arsize             (axi_rdma_get_wqe_arsize),
+    .s_axi_rdma_get_wqe_arburst            (axi_rdma_get_wqe_arburst),
+    .s_axi_rdma_get_wqe_arcache            (axi_rdma_get_wqe_arcache),
+    .s_axi_rdma_get_wqe_arprot             (axi_rdma_get_wqe_arprot),
+    .s_axi_rdma_get_wqe_arvalid            (axi_rdma_get_wqe_arvalid),
+    .s_axi_rdma_get_wqe_arready            (axi_rdma_get_wqe_arready),
+    .s_axi_rdma_get_wqe_rid                (axi_rdma_get_wqe_rid),
+    .s_axi_rdma_get_wqe_rdata              (axi_rdma_get_wqe_rdata),
+    .s_axi_rdma_get_wqe_rresp              (axi_rdma_get_wqe_rresp),
+    .s_axi_rdma_get_wqe_rlast              (axi_rdma_get_wqe_rlast),
+    .s_axi_rdma_get_wqe_rvalid             (axi_rdma_get_wqe_rvalid),
+    .s_axi_rdma_get_wqe_rready             (axi_rdma_get_wqe_rready),
+    .s_axi_rdma_get_wqe_arlock             (axi_rdma_get_wqe_arlock),
+    .s_axi_rdma_get_wqe_arqos              (axi_rdma_get_wqe_arqos),
+
+    .s_axi_rdma_get_payload_awid           (axi_rdma_get_payload_awid),
+    .s_axi_rdma_get_payload_awaddr         (axi_rdma_get_payload_awaddr),
+    .s_axi_rdma_get_payload_awqos          (axi_rdma_get_payload_awqos),
+    .s_axi_rdma_get_payload_awlen          (axi_rdma_get_payload_awlen),
+    .s_axi_rdma_get_payload_awsize         (axi_rdma_get_payload_awsize),
+    .s_axi_rdma_get_payload_awburst        (axi_rdma_get_payload_awburst),
+    .s_axi_rdma_get_payload_awcache        (axi_rdma_get_payload_awcache),
+    .s_axi_rdma_get_payload_awprot         (axi_rdma_get_payload_awprot),
+    .s_axi_rdma_get_payload_awvalid        (axi_rdma_get_payload_awvalid),
+    .s_axi_rdma_get_payload_awready        (axi_rdma_get_payload_awready),
+    .s_axi_rdma_get_payload_wdata          (axi_rdma_get_payload_wdata),
+    .s_axi_rdma_get_payload_wstrb          (axi_rdma_get_payload_wstrb),
+    .s_axi_rdma_get_payload_wlast          (axi_rdma_get_payload_wlast),
+    .s_axi_rdma_get_payload_wvalid         (axi_rdma_get_payload_wvalid),
+    .s_axi_rdma_get_payload_wready         (axi_rdma_get_payload_wready),
+    .s_axi_rdma_get_payload_awlock         (axi_rdma_get_payload_awlock),
+    .s_axi_rdma_get_payload_bid            (axi_rdma_get_payload_bid),
+    .s_axi_rdma_get_payload_bresp          (axi_rdma_get_payload_bresp),
+    .s_axi_rdma_get_payload_bvalid         (axi_rdma_get_payload_bvalid),
+    .s_axi_rdma_get_payload_bready         (axi_rdma_get_payload_bready),
+    .s_axi_rdma_get_payload_arid           (axi_rdma_get_payload_arid),
+    .s_axi_rdma_get_payload_araddr         (axi_rdma_get_payload_araddr),
+    .s_axi_rdma_get_payload_arlen          (axi_rdma_get_payload_arlen),
+    .s_axi_rdma_get_payload_arsize         (axi_rdma_get_payload_arsize),
+    .s_axi_rdma_get_payload_arburst        (axi_rdma_get_payload_arburst),
+    .s_axi_rdma_get_payload_arcache        (axi_rdma_get_payload_arcache),
+    .s_axi_rdma_get_payload_arprot         (axi_rdma_get_payload_arprot),
+    .s_axi_rdma_get_payload_arvalid        (axi_rdma_get_payload_arvalid),
+    .s_axi_rdma_get_payload_arready        (axi_rdma_get_payload_arready),
+    .s_axi_rdma_get_payload_rid            (axi_rdma_get_payload_rid),
+    .s_axi_rdma_get_payload_rdata          (axi_rdma_get_payload_rdata),
+    .s_axi_rdma_get_payload_rresp          (axi_rdma_get_payload_rresp),
+    .s_axi_rdma_get_payload_rlast          (axi_rdma_get_payload_rlast),
+    .s_axi_rdma_get_payload_rvalid         (axi_rdma_get_payload_rvalid),
+    .s_axi_rdma_get_payload_rready         (axi_rdma_get_payload_rready),
+    .s_axi_rdma_get_payload_arlock         (axi_rdma_get_payload_arlock),
+    .s_axi_rdma_get_payload_arqos          (axi_rdma_get_payload_arqos),
+
+    .s_axi_rdma_completion_awid            (axi_rdma_completion_awid),
+    .s_axi_rdma_completion_awaddr          (axi_rdma_completion_awaddr),
+    .s_axi_rdma_completion_awqos           (axi_rdma_completion_awqos),
+    .s_axi_rdma_completion_awlen           (axi_rdma_completion_awlen),
+    .s_axi_rdma_completion_awsize          (axi_rdma_completion_awsize),
+    .s_axi_rdma_completion_awburst         (axi_rdma_completion_awburst),
+    .s_axi_rdma_completion_awcache         (axi_rdma_completion_awcache),
+    .s_axi_rdma_completion_awprot          (axi_rdma_completion_awprot),
+    .s_axi_rdma_completion_awvalid         (axi_rdma_completion_awvalid),
+    .s_axi_rdma_completion_awready         (axi_rdma_completion_awready),
+    .s_axi_rdma_completion_wdata           (axi_rdma_completion_wdata),
+    .s_axi_rdma_completion_wstrb           (axi_rdma_completion_wstrb),
+    .s_axi_rdma_completion_wlast           (axi_rdma_completion_wlast),
+    .s_axi_rdma_completion_wvalid          (axi_rdma_completion_wvalid),
+    .s_axi_rdma_completion_wready          (axi_rdma_completion_wready),
+    .s_axi_rdma_completion_awlock          (axi_rdma_completion_awlock),
+    .s_axi_rdma_completion_bid             (axi_rdma_completion_bid),
+    .s_axi_rdma_completion_bresp           (axi_rdma_completion_bresp),
+    .s_axi_rdma_completion_bvalid          (axi_rdma_completion_bvalid),
+    .s_axi_rdma_completion_bready          (axi_rdma_completion_bready),
+    .s_axi_rdma_completion_arid            (axi_rdma_completion_arid),
+    .s_axi_rdma_completion_araddr          (axi_rdma_completion_araddr),
+    .s_axi_rdma_completion_arlen           (axi_rdma_completion_arlen),
+    .s_axi_rdma_completion_arsize          (axi_rdma_completion_arsize),
+    .s_axi_rdma_completion_arburst         (axi_rdma_completion_arburst),
+    .s_axi_rdma_completion_arcache         (axi_rdma_completion_arcache),
+    .s_axi_rdma_completion_arprot          (axi_rdma_completion_arprot),
+    .s_axi_rdma_completion_arvalid         (axi_rdma_completion_arvalid),
+    .s_axi_rdma_completion_arready         (axi_rdma_completion_arready),
+    .s_axi_rdma_completion_rid             (axi_rdma_completion_rid),
+    .s_axi_rdma_completion_rdata           (axi_rdma_completion_rdata),
+    .s_axi_rdma_completion_rresp           (axi_rdma_completion_rresp),
+    .s_axi_rdma_completion_rlast           (axi_rdma_completion_rlast),
+    .s_axi_rdma_completion_rvalid          (axi_rdma_completion_rvalid),
+    .s_axi_rdma_completion_rready          (axi_rdma_completion_rready),
+    .s_axi_rdma_completion_arlock          (axi_rdma_completion_arlock),
+    .s_axi_rdma_completion_arqos           (axi_rdma_completion_arqos),
+
+    .s_axi_rdma_send_write_payload_awid    (axi_rdma_send_write_payload_awid),
+    .s_axi_rdma_send_write_payload_awaddr  (axi_rdma_send_write_payload_awaddr),
+    .s_axi_rdma_send_write_payload_awqos   (axi_rdma_send_write_payload_awqos),
+    .s_axi_rdma_send_write_payload_awlen   (axi_rdma_send_write_payload_awlen),
+    .s_axi_rdma_send_write_payload_awsize  (axi_rdma_send_write_payload_awsize),
+    .s_axi_rdma_send_write_payload_awburst (axi_rdma_send_write_payload_awburst),
+    .s_axi_rdma_send_write_payload_awcache (axi_rdma_send_write_payload_awcache),
+    .s_axi_rdma_send_write_payload_awprot  (axi_rdma_send_write_payload_awprot),
+    .s_axi_rdma_send_write_payload_awvalid (axi_rdma_send_write_payload_awvalid),
+    .s_axi_rdma_send_write_payload_awready (axi_rdma_send_write_payload_awready),
+    .s_axi_rdma_send_write_payload_wdata   (axi_rdma_send_write_payload_wdata),
+    .s_axi_rdma_send_write_payload_wstrb   (axi_rdma_send_write_payload_wstrb),
+    .s_axi_rdma_send_write_payload_wlast   (axi_rdma_send_write_payload_wlast),
+    .s_axi_rdma_send_write_payload_wvalid  (axi_rdma_send_write_payload_wvalid),
+    .s_axi_rdma_send_write_payload_wready  (axi_rdma_send_write_payload_wready),
+    .s_axi_rdma_send_write_payload_awlock  (axi_rdma_send_write_payload_awlock),
+    .s_axi_rdma_send_write_payload_bid     (axi_rdma_send_write_payload_bid),
+    .s_axi_rdma_send_write_payload_bresp   (axi_rdma_send_write_payload_bresp),
+    .s_axi_rdma_send_write_payload_bvalid  (axi_rdma_send_write_payload_bvalid),
+    .s_axi_rdma_send_write_payload_bready  (axi_rdma_send_write_payload_bready),
+    .s_axi_rdma_send_write_payload_arid    (axi_rdma_send_write_payload_arid),
+    .s_axi_rdma_send_write_payload_araddr  (axi_rdma_send_write_payload_araddr),
+    .s_axi_rdma_send_write_payload_arlen   (axi_rdma_send_write_payload_arlen),
+    .s_axi_rdma_send_write_payload_arsize  (axi_rdma_send_write_payload_arsize),
+    .s_axi_rdma_send_write_payload_arburst (axi_rdma_send_write_payload_arburst),
+    .s_axi_rdma_send_write_payload_arcache (axi_rdma_send_write_payload_arcache),
+    .s_axi_rdma_send_write_payload_arprot  (axi_rdma_send_write_payload_arprot),
+    .s_axi_rdma_send_write_payload_arvalid (axi_rdma_send_write_payload_arvalid),
+    .s_axi_rdma_send_write_payload_arready (axi_rdma_send_write_payload_arready),
+    .s_axi_rdma_send_write_payload_rid     (axi_rdma_send_write_payload_rid),
+    .s_axi_rdma_send_write_payload_rdata   (axi_rdma_send_write_payload_rdata),
+    .s_axi_rdma_send_write_payload_rresp   (axi_rdma_send_write_payload_rresp),
+    .s_axi_rdma_send_write_payload_rlast   (axi_rdma_send_write_payload_rlast),
+    .s_axi_rdma_send_write_payload_rvalid  (axi_rdma_send_write_payload_rvalid),
+    .s_axi_rdma_send_write_payload_rready  (axi_rdma_send_write_payload_rready),
+    .s_axi_rdma_send_write_payload_arlock  (axi_rdma_send_write_payload_arlock),
+    .s_axi_rdma_send_write_payload_arqos   (axi_rdma_send_write_payload_arqos),
+
+    .s_axi_rdma_rsp_payload_awid           (axi_rdma_rsp_payload_awid),
+    .s_axi_rdma_rsp_payload_awaddr         (axi_rdma_rsp_payload_awaddr),
+    .s_axi_rdma_rsp_payload_awqos          (axi_rdma_rsp_payload_awqos),
+    .s_axi_rdma_rsp_payload_awlen          (axi_rdma_rsp_payload_awlen),
+    .s_axi_rdma_rsp_payload_awsize         (axi_rdma_rsp_payload_awsize),
+    .s_axi_rdma_rsp_payload_awburst        (axi_rdma_rsp_payload_awburst),
+    .s_axi_rdma_rsp_payload_awcache        (axi_rdma_rsp_payload_awcache),
+    .s_axi_rdma_rsp_payload_awprot         (axi_rdma_rsp_payload_awprot),
+    .s_axi_rdma_rsp_payload_awvalid        (axi_rdma_rsp_payload_awvalid),
+    .s_axi_rdma_rsp_payload_awready        (axi_rdma_rsp_payload_awready),
+    .s_axi_rdma_rsp_payload_wdata          (axi_rdma_rsp_payload_wdata),
+    .s_axi_rdma_rsp_payload_wstrb          (axi_rdma_rsp_payload_wstrb),
+    .s_axi_rdma_rsp_payload_wlast          (axi_rdma_rsp_payload_wlast),
+    .s_axi_rdma_rsp_payload_wvalid         (axi_rdma_rsp_payload_wvalid),
+    .s_axi_rdma_rsp_payload_wready         (axi_rdma_rsp_payload_wready),
+    .s_axi_rdma_rsp_payload_awlock         (axi_rdma_rsp_payload_awlock),
+    .s_axi_rdma_rsp_payload_bid            (axi_rdma_rsp_payload_bid),
+    .s_axi_rdma_rsp_payload_bresp          (axi_rdma_rsp_payload_bresp),
+    .s_axi_rdma_rsp_payload_bvalid         (axi_rdma_rsp_payload_bvalid),
+    .s_axi_rdma_rsp_payload_bready         (axi_rdma_rsp_payload_bready),
+    .s_axi_rdma_rsp_payload_arid           (axi_rdma_rsp_payload_arid),
+    .s_axi_rdma_rsp_payload_araddr         (axi_rdma_rsp_payload_araddr),
+    .s_axi_rdma_rsp_payload_arlen          (axi_rdma_rsp_payload_arlen),
+    .s_axi_rdma_rsp_payload_arsize         (axi_rdma_rsp_payload_arsize),
+    .s_axi_rdma_rsp_payload_arburst        (axi_rdma_rsp_payload_arburst),
+    .s_axi_rdma_rsp_payload_arcache        (axi_rdma_rsp_payload_arcache),
+    .s_axi_rdma_rsp_payload_arprot         (axi_rdma_rsp_payload_arprot),
+    .s_axi_rdma_rsp_payload_arvalid        (axi_rdma_rsp_payload_arvalid),
+    .s_axi_rdma_rsp_payload_arready        (axi_rdma_rsp_payload_arready),
+    .s_axi_rdma_rsp_payload_rid            (axi_rdma_rsp_payload_rid),
+    .s_axi_rdma_rsp_payload_rdata          (axi_rdma_rsp_payload_rdata),
+    .s_axi_rdma_rsp_payload_rresp          (axi_rdma_rsp_payload_rresp),
+    .s_axi_rdma_rsp_payload_rlast          (axi_rdma_rsp_payload_rlast),
+    .s_axi_rdma_rsp_payload_rvalid         (axi_rdma_rsp_payload_rvalid),
+    .s_axi_rdma_rsp_payload_rready         (axi_rdma_rsp_payload_rready),
+    .s_axi_rdma_rsp_payload_arlock         (axi_rdma_rsp_payload_arlock),
+    .s_axi_rdma_rsp_payload_arqos          (axi_rdma_rsp_payload_arqos),
+
+    .m_axi_sys_mem_awaddr                  (axi_sys_mem_awaddr),
+    .m_axi_sys_mem_awprot                  (axi_sys_mem_awprot),
+    .m_axi_sys_mem_awvalid                 (axi_sys_mem_awvalid),
+    .m_axi_sys_mem_awready                 (axi_sys_mem_awready),
+    .m_axi_sys_mem_awsize                  (axi_sys_mem_awsize),
+    .m_axi_sys_mem_awburst                 (axi_sys_mem_awburst),
+    .m_axi_sys_mem_awcache                 (axi_sys_mem_awcache),
+    .m_axi_sys_mem_awlen                   (axi_sys_mem_awlen),
+    .m_axi_sys_mem_awlock                  (axi_sys_mem_awlock),
+    .m_axi_sys_mem_awqos                   (axi_sys_mem_awqos),
+    .m_axi_sys_mem_awregion                (axi_sys_mem_awregion),
+    .m_axi_sys_mem_awid                    (axi_sys_mem_awid),
+    .m_axi_sys_mem_wdata                   (axi_sys_mem_wdata),
+    .m_axi_sys_mem_wstrb                   (axi_sys_mem_wstrb),
+    .m_axi_sys_mem_wvalid                  (axi_sys_mem_wvalid),
+    .m_axi_sys_mem_wready                  (axi_sys_mem_wready),
+    .m_axi_sys_mem_wlast                   (axi_sys_mem_wlast),
+    .m_axi_sys_mem_bresp                   (axi_sys_mem_bresp),
+    .m_axi_sys_mem_bvalid                  (axi_sys_mem_bvalid),
+    .m_axi_sys_mem_bready                  (axi_sys_mem_bready),
+    .m_axi_sys_mem_bid                     (axi_sys_mem_bid[2:0]),
+    .m_axi_sys_mem_araddr                  (axi_sys_mem_araddr),
+    .m_axi_sys_mem_arprot                  (axi_sys_mem_arprot),
+    .m_axi_sys_mem_arvalid                 (axi_sys_mem_arvalid),
+    .m_axi_sys_mem_arready                 (axi_sys_mem_arready),
+    .m_axi_sys_mem_arsize                  (axi_sys_mem_arsize),
+    .m_axi_sys_mem_arburst                 (axi_sys_mem_arburst),
+    .m_axi_sys_mem_arcache                 (axi_sys_mem_arcache),
+    .m_axi_sys_mem_arlock                  (axi_sys_mem_arlock),
+    .m_axi_sys_mem_arlen                   (axi_sys_mem_arlen),
+    .m_axi_sys_mem_arqos                   (axi_sys_mem_arqos),
+    .m_axi_sys_mem_arregion                (axi_sys_mem_arregion),
+    .m_axi_sys_mem_arid                    (axi_sys_mem_arid),
+    .m_axi_sys_mem_rdata                   (axi_sys_mem_rdata),
+    .m_axi_sys_mem_rresp                   (axi_sys_mem_rresp),
+    .m_axi_sys_mem_rvalid                  (axi_sys_mem_rvalid),
+    .m_axi_sys_mem_rready                  (axi_sys_mem_rready),
+    .m_axi_sys_mem_rlast                   (axi_sys_mem_rlast),
+    .m_axi_sys_mem_rid                     (axi_sys_mem_rid[2:0]),
+
+    .m_axi_sys_to_dev_crossbar_awaddr      (axi_from_sys_to_dev_crossbar_awaddr),
+    .m_axi_sys_to_dev_crossbar_awprot      (axi_from_sys_to_dev_crossbar_awprot),
+    .m_axi_sys_to_dev_crossbar_awvalid     (axi_from_sys_to_dev_crossbar_awvalid),
+    .m_axi_sys_to_dev_crossbar_awready     (axi_from_sys_to_dev_crossbar_awready),
+    .m_axi_sys_to_dev_crossbar_awsize      (axi_from_sys_to_dev_crossbar_awsize),
+    .m_axi_sys_to_dev_crossbar_awburst     (axi_from_sys_to_dev_crossbar_awburst),
+    .m_axi_sys_to_dev_crossbar_awcache     (axi_from_sys_to_dev_crossbar_awcache),
+    .m_axi_sys_to_dev_crossbar_awlen       (axi_from_sys_to_dev_crossbar_awlen),
+    .m_axi_sys_to_dev_crossbar_awlock      (axi_from_sys_to_dev_crossbar_awlock),
+    .m_axi_sys_to_dev_crossbar_awqos       (axi_from_sys_to_dev_crossbar_awqos),
+    .m_axi_sys_to_dev_crossbar_awregion    (axi_from_sys_to_dev_crossbar_awregion),
+    .m_axi_sys_to_dev_crossbar_awid        (axi_from_sys_to_dev_crossbar_awid),
+    .m_axi_sys_to_dev_crossbar_wdata       (axi_from_sys_to_dev_crossbar_wdata),
+    .m_axi_sys_to_dev_crossbar_wstrb       (axi_from_sys_to_dev_crossbar_wstrb),
+    .m_axi_sys_to_dev_crossbar_wvalid      (axi_from_sys_to_dev_crossbar_wvalid),
+    .m_axi_sys_to_dev_crossbar_wready      (axi_from_sys_to_dev_crossbar_wready),
+    .m_axi_sys_to_dev_crossbar_wlast       (axi_from_sys_to_dev_crossbar_wlast),
+    .m_axi_sys_to_dev_crossbar_bresp       (axi_from_sys_to_dev_crossbar_bresp),
+    .m_axi_sys_to_dev_crossbar_bvalid      (axi_from_sys_to_dev_crossbar_bvalid),
+    .m_axi_sys_to_dev_crossbar_bready      (axi_from_sys_to_dev_crossbar_bready),
+    .m_axi_sys_to_dev_crossbar_bid         (axi_from_sys_to_dev_crossbar_bid[2:0]),
+    .m_axi_sys_to_dev_crossbar_araddr      (axi_from_sys_to_dev_crossbar_araddr),
+    .m_axi_sys_to_dev_crossbar_arprot      (axi_from_sys_to_dev_crossbar_arprot),
+    .m_axi_sys_to_dev_crossbar_arvalid     (axi_from_sys_to_dev_crossbar_arvalid),
+    .m_axi_sys_to_dev_crossbar_arready     (axi_from_sys_to_dev_crossbar_arready),
+    .m_axi_sys_to_dev_crossbar_arsize      (axi_from_sys_to_dev_crossbar_arsize),
+    .m_axi_sys_to_dev_crossbar_arburst     (axi_from_sys_to_dev_crossbar_arburst),
+    .m_axi_sys_to_dev_crossbar_arcache     (axi_from_sys_to_dev_crossbar_arcache),
+    .m_axi_sys_to_dev_crossbar_arlock      (axi_from_sys_to_dev_crossbar_arlock),
+    .m_axi_sys_to_dev_crossbar_arlen       (axi_from_sys_to_dev_crossbar_arlen),
+    .m_axi_sys_to_dev_crossbar_arqos       (axi_from_sys_to_dev_crossbar_arqos),
+    .m_axi_sys_to_dev_crossbar_arregion    (axi_from_sys_to_dev_crossbar_arregion),
+    .m_axi_sys_to_dev_crossbar_arid        (axi_from_sys_to_dev_crossbar_arid),
+    .m_axi_sys_to_dev_crossbar_rdata       (axi_from_sys_to_dev_crossbar_rdata),
+    .m_axi_sys_to_dev_crossbar_rresp       (axi_from_sys_to_dev_crossbar_rresp),
+    .m_axi_sys_to_dev_crossbar_rvalid      (axi_from_sys_to_dev_crossbar_rvalid),
+    .m_axi_sys_to_dev_crossbar_rready      (axi_from_sys_to_dev_crossbar_rready),
+    .m_axi_sys_to_dev_crossbar_rlast       (axi_from_sys_to_dev_crossbar_rlast),
+    .m_axi_sys_to_dev_crossbar_rid         (axi_from_sys_to_dev_crossbar_rid[2:0]),
+
+    .axis_aclk                             (axis_aclk),
+    .axis_arestn                           (qdma_rstn)
+);
+
+  hbm_bd_wrapper hbm_inst (
+    .s_axi_hbm_araddr                    (axi_dev_mem_araddr),
+    .s_axi_hbm_arburst                   (axi_dev_mem_arburst),
+    .s_axi_hbm_arcache                   (axi_dev_mem_arcache),
+    .s_axi_hbm_arid                      (axi_dev_mem_arid),
+    .s_axi_hbm_arlen                     (axi_dev_mem_arlen),
+    .s_axi_hbm_arlock                    (axi_dev_mem_arlock),
+    .s_axi_hbm_arprot                    (axi_dev_mem_arprot),
+    .s_axi_hbm_arqos                     (axi_dev_mem_arqos),
+    .s_axi_hbm_arready                   (axi_dev_mem_arready),
+    .s_axi_hbm_arsize                    (axi_dev_mem_arsize),
+    .s_axi_hbm_aruser                    (axi_dev_mem_aruser),
+    .s_axi_hbm_arvalid                   (axi_dev_mem_arvalid),
+    .s_axi_hbm_awaddr                    (axi_dev_mem_awaddr),
+    .s_axi_hbm_awburst                   (axi_dev_mem_awburst),
+    .s_axi_hbm_awcache                   (axi_dev_mem_awcache),
+    .s_axi_hbm_awid                      (axi_dev_mem_awid),
+    .s_axi_hbm_awlen                     (axi_dev_mem_awlen),
+    .s_axi_hbm_awlock                    (axi_dev_mem_awlock),
+    .s_axi_hbm_awprot                    (axi_dev_mem_awprot),
+    .s_axi_hbm_awqos                     (axi_dev_mem_awqos),
+    .s_axi_hbm_awready                   (axi_dev_mem_awready),
+    .s_axi_hbm_awsize                    (axi_dev_mem_awsize),
+    .s_axi_hbm_awuser                    (axi_dev_mem_awuser),
+    .s_axi_hbm_awvalid                   (axi_dev_mem_awvalid),
+    .s_axi_hbm_bid                       (axi_dev_mem_bid),
+    .s_axi_hbm_bready                    (axi_dev_mem_bready),
+    .s_axi_hbm_bresp                     (axi_dev_mem_bresp),
+    .s_axi_hbm_bvalid                    (axi_dev_mem_bvalid),
+    .s_axi_hbm_rdata                     (axi_dev_mem_rdata),
+    .s_axi_hbm_rid                       (axi_dev_mem_rid),
+    .s_axi_hbm_rlast                     (axi_dev_mem_rlast),
+    .s_axi_hbm_rready                    (axi_dev_mem_rready),
+    .s_axi_hbm_rresp                     (axi_dev_mem_rresp),
+    .s_axi_hbm_rvalid                    (axi_dev_mem_rvalid),
+    .s_axi_hbm_wdata                     (axi_dev_mem_wdata),
+    .s_axi_hbm_wlast                     (axi_dev_mem_wlast),
+    .s_axi_hbm_wready                    (axi_dev_mem_wready),
+    .s_axi_hbm_wstrb                     (axi_dev_mem_wstrb),
+    .s_axi_hbm_wuser                     (axi_dev_mem_wuser),
+    .s_axi_hbm_wvalid                    (axi_dev_mem_wvalid),
+
+    .axi_clk                             (axis_aclk),
+    .axi_resetn                          (powerup_rstn),
+    .hbm_ref_clk                         (hbm_ref_clk)
+  );
+
+  // User logic boxes
   box_250mhz #(
     .MIN_PKT_LEN   (MIN_PKT_LEN),
     .MAX_PKT_LEN   (MAX_PKT_LEN),
@@ -846,14 +2330,104 @@ module open_nic_shell #(
     .s_axis_adap_rx_250mhz_tuser_dst  (axis_adap_rx_250mhz_tuser_dst),
     .s_axis_adap_rx_250mhz_tready     (axis_adap_rx_250mhz_tready),
 
-    .mod_rstn                         (user_250mhz_rstn),
-    .mod_rst_done                     (user_250mhz_rst_done),
-
-    .box_rstn                         (box_250mhz_rstn),
-    .box_rst_done                     (box_250mhz_rst_done),
-
-    .axil_aclk                        (axil_aclk),
-    .axis_aclk                        (axis_aclk)
+    // RoCEv2 packets from user logic box to rdma
+    .m_axis_user2rdma_roce_from_cmac_rx_tvalid (cmac2rdma_roce_axis_tvalid),
+    .m_axis_user2rdma_roce_from_cmac_rx_tdata  (cmac2rdma_roce_axis_tdata),
+    .m_axis_user2rdma_roce_from_cmac_rx_tkeep  (cmac2rdma_roce_axis_tkeep),
+    .m_axis_user2rdma_roce_from_cmac_rx_tlast  (cmac2rdma_roce_axis_tlast),
+    .m_axis_user2rdma_roce_from_cmac_rx_tready (cmac2rdma_roce_axis_tready),
+
+    // packets from rdma to user logic
+    .s_axis_rdma2user_to_cmac_tx_tvalid        (rdma2cmac_axis_tvalid),
+    .s_axis_rdma2user_to_cmac_tx_tdata         (rdma2cmac_axis_tdata),
+    .s_axis_rdma2user_to_cmac_tx_tkeep         (rdma2cmac_axis_tkeep),
+    .s_axis_rdma2user_to_cmac_tx_tlast         (rdma2cmac_axis_tlast),
+    .s_axis_rdma2user_to_cmac_tx_tready        (rdma2cmac_axis_tready),
+
+    // packets from user logic to rdma
+    .m_axis_user2rdma_from_qdma_tx_tvalid      (qdma2rdma_non_roce_axis_tvalid),
+    .m_axis_user2rdma_from_qdma_tx_tdata       (qdma2rdma_non_roce_axis_tdata),
+    .m_axis_user2rdma_from_qdma_tx_tkeep       (qdma2rdma_non_roce_axis_tkeep),
+    .m_axis_user2rdma_from_qdma_tx_tlast       (qdma2rdma_non_roce_axis_tlast),
+    .m_axis_user2rdma_from_qdma_tx_tready      (qdma2rdma_non_roce_axis_tready),
+
+    // ieth or immdt data from rdma packets
+    .s_axis_rdma2user_ieth_immdt_tdata         (rdma2user_ieth_immdt_axis_tdata),
+    .s_axis_rdma2user_ieth_immdt_tlast         (rdma2user_ieth_immdt_axis_tlast),
+    .s_axis_rdma2user_ieth_immdt_tvalid        (rdma2user_ieth_immdt_axis_tvalid),
+    .s_axis_rdma2user_ieth_immdt_trdy          (rdma2user_ieth_immdt_axis_trdy),
+
+    // HW handshaking from user logic: Send WQE completion queue doorbell
+    .s_resp_hndler_i_send_cq_db_cnt_valid(resp_hndler_o_send_cq_db_cnt_valid),
+    .s_resp_hndler_i_send_cq_db_addr     (resp_hndler_o_send_cq_db_addr),
+    .s_resp_hndler_i_send_cq_db_cnt      (resp_hndler_o_send_cq_db_cnt),
+    .s_resp_hndler_o_send_cq_db_rdy      (resp_hndler_i_send_cq_db_rdy),
+
+    // HW handshaking from user logic: Send WQE producer index doorbell
+    .m_o_qp_sq_pidb_hndshk               (i_qp_sq_pidb_hndshk),
+    .m_o_qp_sq_pidb_wr_addr_hndshk       (i_qp_sq_pidb_wr_addr_hndshk),
+    .m_o_qp_sq_pidb_wr_valid_hndshk      (i_qp_sq_pidb_wr_valid_hndshk),
+    .m_i_qp_sq_pidb_wr_rdy               (o_qp_sq_pidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send consumer index doorbell
+    .m_o_qp_rq_cidb_hndshk               (i_qp_rq_cidb_hndshk),
+    .m_o_qp_rq_cidb_wr_addr_hndshk       (i_qp_rq_cidb_wr_addr_hndshk),
+    .m_o_qp_rq_cidb_wr_valid_hndshk      (i_qp_rq_cidb_wr_valid_hndshk),
+    .m_i_qp_rq_cidb_wr_rdy               (o_qp_rq_cidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send producer index doorbell
+    .s_rx_pkt_hndler_i_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+    .s_rx_pkt_hndler_i_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+    .s_rx_pkt_hndler_i_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+    .s_rx_pkt_hndler_o_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+    // AXI interface from the Compute Logic
+    .m_axi_compute_logic_awid            (axi_compute_logic_awid),
+    .m_axi_compute_logic_awaddr          (axi_compute_logic_awaddr),
+    .m_axi_compute_logic_awqos           (axi_compute_logic_awqos),
+    .m_axi_compute_logic_awlen           (axi_compute_logic_awlen),
+    .m_axi_compute_logic_awsize          (axi_compute_logic_awsize),
+    .m_axi_compute_logic_awburst         (axi_compute_logic_awburst),
+    .m_axi_compute_logic_awcache         (axi_compute_logic_awcache),
+    .m_axi_compute_logic_awprot          (axi_compute_logic_awprot),
+    .m_axi_compute_logic_awvalid         (axi_compute_logic_awvalid),
+    .m_axi_compute_logic_awready         (axi_compute_logic_awready),
+    .m_axi_compute_logic_wdata           (axi_compute_logic_wdata),
+    .m_axi_compute_logic_wstrb           (axi_compute_logic_wstrb),
+    .m_axi_compute_logic_wlast           (axi_compute_logic_wlast),
+    .m_axi_compute_logic_wvalid          (axi_compute_logic_wvalid),
+    .m_axi_compute_logic_wready          (axi_compute_logic_wready),
+    .m_axi_compute_logic_awlock          (axi_compute_logic_awlock),
+    .m_axi_compute_logic_bid             (axi_compute_logic_bid),
+    .m_axi_compute_logic_bresp           (axi_compute_logic_bresp),
+    .m_axi_compute_logic_bvalid          (axi_compute_logic_bvalid),
+    .m_axi_compute_logic_bready          (axi_compute_logic_bready),
+    .m_axi_compute_logic_arid            (axi_compute_logic_arid),
+    .m_axi_compute_logic_araddr          (axi_compute_logic_araddr),
+    .m_axi_compute_logic_arlen           (axi_compute_logic_arlen),
+    .m_axi_compute_logic_arsize          (axi_compute_logic_arsize),
+    .m_axi_compute_logic_arburst         (axi_compute_logic_arburst),
+    .m_axi_compute_logic_arcache         (axi_compute_logic_arcache),
+    .m_axi_compute_logic_arprot          (axi_compute_logic_arprot),
+    .m_axi_compute_logic_arvalid         (axi_compute_logic_arvalid),
+    .m_axi_compute_logic_arready         (axi_compute_logic_arready),
+    .m_axi_compute_logic_rid             (axi_compute_logic_rid),
+    .m_axi_compute_logic_rdata           (axi_compute_logic_rdata),
+    .m_axi_compute_logic_rresp           (axi_compute_logic_rresp),
+    .m_axi_compute_logic_rlast           (axi_compute_logic_rlast),
+    .m_axi_compute_logic_rvalid          (axi_compute_logic_rvalid),
+    .m_axi_compute_logic_rready          (axi_compute_logic_rready),
+    .m_axi_compute_logic_arlock          (axi_compute_logic_arlock),
+    .m_axi_compute_logic_arqos           (axi_compute_logic_arqos),
+
+    .mod_rstn     (user_250mhz_rstn),
+    .mod_rst_done (user_250mhz_rst_done),
+
+    .box_rstn     (box_250mhz_rstn),
+    .box_rst_done (box_250mhz_rst_done),
+
+    .axil_aclk    (axil_aclk),
+    .axis_aclk    (axis_aclk)
   );
 
   box_322mhz #(
@@ -914,4 +2488,25 @@ module open_nic_shell #(
     .cmac_clk                        (cmac_clk)
   );
 
-endmodule: open_nic_shell
+  assign axi_rdma_send_write_payload_awqos = 16'd0;
+  assign axi_rdma_send_write_payload_arqos = 16'd0;
+  assign axi_rdma_rsp_payload_awqos = 4'd0;
+  assign axi_rdma_rsp_payload_arqos = 4'd0;
+  assign axi_qdma_mm_awqos  = 4'd0;
+  assign axi_qdma_mm_arqos  = 4'd0;
+
+  assign axi_rdma_get_wqe_awqos     = 4'd0;
+  assign axi_rdma_get_wqe_arqos     = 4'd0;
+  assign axi_rdma_get_payload_awqos = 4'd0;
+  assign axi_rdma_get_payload_arqos = 4'd0;
+  assign axi_rdma_completion_awqos  = 4'd0;
+  assign axi_rdma_completion_arqos  = 4'd0;
+
+  assign cmac2rdma_roce_axis_tready = 1'b1;
+  assign cmac2rdma_roce_axis_tuser  = 1'b1;
+
+  assign axi_sys_mem_wuser  = 64'd0;
+  assign axi_sys_mem_aruser = 12'd0;
+  assign axi_sys_mem_awuser = 12'd0;
+
+endmodule: open_nic_shell
\ No newline at end of file
diff --git a/src/packet_adapter/packet_adapter_register.v b/src/packet_adapter/packet_adapter_register.v
index 7ce55e9..2543c1a 100644
--- a/src/packet_adapter/packet_adapter_register.v
+++ b/src/packet_adapter/packet_adapter_register.v
@@ -140,7 +140,7 @@ module packet_adapter_register (
     .DATA_W        (32)
   ) axil_reg_inst (
     .s_axil_awvalid (s_axil_awvalid),
-    .s_axil_awaddr  (s_axil_awaddr),
+    .s_axil_awaddr  (s_axil_awaddr[C_ADDR_W-1:0]),
     .s_axil_awready (s_axil_awready),
     .s_axil_wvalid  (s_axil_wvalid),
     .s_axil_wdata   (s_axil_wdata),
@@ -149,7 +149,7 @@ module packet_adapter_register (
     .s_axil_bresp   (s_axil_bresp),
     .s_axil_bready  (s_axil_bready),
     .s_axil_arvalid (s_axil_arvalid),
-    .s_axil_araddr  (s_axil_araddr),
+    .s_axil_araddr  (s_axil_araddr[C_ADDR_W-1:0]),
     .s_axil_arready (s_axil_arready),
     .s_axil_rvalid  (s_axil_rvalid),
     .s_axil_rdata   (s_axil_rdata),
diff --git a/src/qdma_subsystem/qdma_subsystem.sv b/src/qdma_subsystem/qdma_subsystem.sv
index e46dcb9..0bf27b5 100644
--- a/src/qdma_subsystem/qdma_subsystem.sv
+++ b/src/qdma_subsystem/qdma_subsystem.sv
@@ -59,6 +59,46 @@ module qdma_subsystem #(
   input   [16*NUM_PHYS_FUNC-1:0] s_axis_c2h_tuser_dst,
   output     [NUM_PHYS_FUNC-1:0] s_axis_c2h_tready,
 
+  // QDMA DMA Engine - AXI MM interface
+  input                          m_axi_awready,
+  input                          m_axi_wready,
+  input                  [3:0]   m_axi_bid,
+  input                  [1:0]   m_axi_bresp,
+  input                          m_axi_bvalid,
+  input                          m_axi_arready,
+  input                  [3:0]   m_axi_rid,
+  input                  [511:0] m_axi_rdata,
+  input                  [1:0]   m_axi_rresp,
+  input                          m_axi_rlast,
+  input                          m_axi_rvalid,
+  output                 [3:0]   m_axi_awid,
+  output                 [63:0]  m_axi_awaddr,
+  output                 [31:0]  m_axi_awuser,
+  output                 [7:0]   m_axi_awlen,
+  output                 [2:0]   m_axi_awsize,
+  output                 [1:0]   m_axi_awburst,
+  output                 [2:0]   m_axi_awprot,
+  output                         m_axi_awvalid,
+  output                         m_axi_awlock,
+  output                 [3:0]   m_axi_awcache,
+  output                 [511:0] m_axi_wdata,
+  output                 [63:0]  m_axi_wuser,
+  output                 [63:0]  m_axi_wstrb,
+  output                         m_axi_wlast,
+  output                         m_axi_wvalid,
+  output                         m_axi_bready,
+  output                 [3:0]   m_axi_arid,
+  output                 [63:0]  m_axi_araddr,
+  output                 [31:0]  m_axi_aruser,
+  output                 [7:0]   m_axi_arlen,
+  output                 [2:0]   m_axi_arsize,
+  output                 [1:0]   m_axi_arburst,
+  output                 [2:0]   m_axi_arprot,
+  output                         m_axi_arvalid,
+  output                         m_axi_arlock,
+  output                 [3:0]   m_axi_arcache,
+  output                         m_axi_rready,
+
 `ifdef __synthesis__
   input                   [15:0] pcie_rxp,
   input                   [15:0] pcie_rxn,
@@ -135,9 +175,78 @@ module qdma_subsystem #(
   input                          m_axis_qdma_cpl_tready,
 `endif
 
+  // QDMA control/status register interface
+  output                         s_csr_prog_done,
+  input                   [31:0] s_axil_csr_awaddr,
+  input                    [2:0] s_axil_csr_awprot,
+  input                          s_axil_csr_awvalid,
+  output                         s_axil_csr_awready,
+  input                   [31:0] s_axil_csr_wdata,
+  input                   [3:0]  s_axil_csr_wstrb,
+  input                          s_axil_csr_wvalid,
+  output                         s_axil_csr_wready,
+  output                         s_axil_csr_bvalid,
+  output                   [1:0] s_axil_csr_bresp,
+  input                          s_axil_csr_bready,
+  input                   [31:0] s_axil_csr_araddr,
+  input                    [2:0] s_axil_csr_arprot,
+  input                          s_axil_csr_arvalid,
+  output                         s_axil_csr_arready,
+  output                  [31:0] s_axil_csr_rdata,
+  output                   [1:0] s_axil_csr_rresp,
+  output                         s_axil_csr_rvalid,
+  input                          s_axil_csr_rready,
+
+  // QDMA bridge slave interface
+  input                    [3:0] s_axib_awid,
+  input                   [63:0] s_axib_awaddr,
+  input                    [3:0] s_axib_awregion,
+  input                    [7:0] s_axib_awlen,
+  input                    [2:0] s_axib_awsize,
+  input                    [1:0] s_axib_awburst,
+  input                          s_axib_awvalid,
+  input                  [511:0] s_axib_wdata,
+  input                   [63:0] s_axib_wstrb,
+  input                          s_axib_wlast,
+  input                          s_axib_wvalid,
+  input                   [63:0] s_axib_wuser,
+  output                  [63:0] s_axib_ruser,
+  input                          s_axib_bready,
+  input                    [3:0] s_axib_arid,
+  input                   [63:0] s_axib_araddr,
+  input                   [11:0] s_axib_aruser,
+  input                   [11:0] s_axib_awuser,
+  input                    [3:0] s_axib_arregion,
+  input                    [7:0] s_axib_arlen,
+  input                    [2:0] s_axib_arsize,
+  input                    [1:0] s_axib_arburst,
+  input                          s_axib_arvalid,
+  input                          s_axib_rready,
+  output                         s_axib_awready,
+  output                         s_axib_wready,
+  output                   [3:0] s_axib_bid,
+  output                   [1:0] s_axib_bresp,
+  output                         s_axib_bvalid,
+  output                         s_axib_arready,
+  output                   [3:0] s_axib_rid,
+  output                 [511:0] s_axib_rdata,
+  output                   [1:0] s_axib_rresp,
+  output                         s_axib_rlast,
+  output                         s_axib_rvalid,
+
   input                          mod_rstn,
   output                         mod_rst_done,
 
+`ifdef __au55n__
+  output                        ref_clk_100mhz,
+`elsif __au55c__
+  output                        ref_clk_100mhz,
+`elsif __au50__
+  output                        ref_clk_100mhz,
+`elsif __au280__
+  output                        ref_clk_100mhz,
+`endif
+
 `ifdef __synthesis__
   output                         axil_aclk,
   output                         axis_aclk
@@ -172,6 +281,47 @@ module qdma_subsystem #(
   wire   [5:0] axis_qdma_c2h_mty;
   wire         axis_qdma_c2h_tready;
 
+  /*
+  wire         axi_qdma_mm_awready;
+  wire         axi_qdma_mm_wready;
+  wire [3:0]   axi_qdma_mm_bid;
+  wire [1:0]   axi_qdma_mm_bresp;
+  wire         axi_qdma_mm_bvalid;
+  wire         axi_qdma_mm_arready;
+  wire [3:0]   axi_qdma_mm_rid;
+  wire [511:0] axi_qdma_mm_rdata;
+  wire [1:0]   axi_qdma_mm_rresp;
+  wire         axi_qdma_mm_rlast;
+  wire         axi_qdma_mm_rvalid;
+  wire [3:0]   axi_qdma_mm_awid;
+  wire [63:0]  axi_qdma_mm_awaddr;
+  wire [31:0]  axi_qdma_mm_awuser;
+  wire [7:0]   axi_qdma_mm_awlen;
+  wire [2:0]   axi_qdma_mm_awsize;
+  wire [1:0]   axi_qdma_mm_awburst;
+  wire [2:0]   axi_qdma_mm_awprot;
+  wire         axi_qdma_mm_awvalid;
+  wire         axi_qdma_mm_awlock;
+  wire [3:0]   axi_qdma_mm_awcache;
+  wire [511:0] axi_qdma_mm_wdata;
+  wire [63:0]  axi_qdma_mm_wuser;
+  wire [63:0]  axi_qdma_mm_wstrb;
+  wire         axi_qdma_mm_wlast;
+  wire         axi_qdma_mm_wvalid;
+  wire         axi_qdma_mm_bready;
+  wire [3:0]   axi_qdma_mm_arid;
+  wire [63:0]  axi_qdma_mm_araddr;
+  wire [31:0]  axi_qdma_mm_aruser;
+  wire [7:0]   axi_qdma_mm_arlen;
+  wire [2:0]   axi_qdma_mm_arsize;
+  wire [1:0]   axi_qdma_mm_arburst;
+  wire [2:0]   axi_qdma_mm_arprot;
+  wire         axi_qdma_mm_arvalid;
+  wire         axi_qdma_mm_arlock;
+  wire [3:0]   axi_qdma_mm_arcache;
+  wire         axi_qdma_mm_rready;
+  */
+
   wire         axis_qdma_cpl_tvalid;
   wire [511:0] axis_qdma_cpl_tdata;
   wire   [1:0] axis_qdma_cpl_size;
@@ -214,6 +364,20 @@ module qdma_subsystem #(
   wire         h2c_byp_in_st_no_dma;
   wire         h2c_byp_in_st_rdy;
 
+  wire  [63:0] h2c_byp_in_mm_radr;
+  wire  [63:0] h2c_byp_in_mm_wadr;
+  wire  [15:0] h2c_byp_in_mm_len;
+  wire         h2c_byp_in_mm_mrkr_req;
+  wire  [2:0]  h2c_byp_in_mm_port_id;
+  wire         h2c_byp_in_mm_sdi;
+  wire  [10:0] h2c_byp_in_mm_qid;
+  wire         h2c_byp_in_mm_error;
+  wire  [7:0]  h2c_byp_in_mm_func;
+  wire  [15:0] h2c_byp_in_mm_cidx;
+  wire         h2c_byp_in_mm_no_dma;
+  wire         h2c_byp_in_mm_vld;
+  wire         h2c_byp_in_mm_rdy;
+
   wire         c2h_byp_out_vld;
   wire [255:0] c2h_byp_out_dsc;
   wire         c2h_byp_out_st_mm;
@@ -236,6 +400,20 @@ module qdma_subsystem #(
   wire   [6:0] c2h_byp_in_st_csh_pfch_tag;
   wire         c2h_byp_in_st_csh_rdy;
 
+  wire  [63:0] c2h_byp_in_mm_radr;
+  wire  [63:0] c2h_byp_in_mm_wadr;
+  wire  [15:0] c2h_byp_in_mm_len;
+  wire         c2h_byp_in_mm_mrkr_req;
+  wire  [2:0]  c2h_byp_in_mm_port_id;
+  wire         c2h_byp_in_mm_sdi;
+  wire  [10:0] c2h_byp_in_mm_qid;
+  wire         c2h_byp_in_mm_error;
+  wire  [7:0]  c2h_byp_in_mm_func;
+  wire  [15:0] c2h_byp_in_mm_cidx;
+  wire         c2h_byp_in_mm_vld;
+  wire         c2h_byp_in_mm_no_dma;
+  wire         c2h_byp_in_mm_rdy;
+
   wire         axil_aresetn;
 
   // Reset is clocked by the 125MHz AXI-Lite clock
@@ -276,6 +454,19 @@ module qdma_subsystem #(
   assign h2c_byp_in_st_cidx         = 0;
   assign h2c_byp_in_st_no_dma       = 1'b0;
 
+  assign h2c_byp_in_mm_radr         = 0;
+  assign h2c_byp_in_mm_wadr         = 0;
+  assign h2c_byp_in_mm_len          = 0;
+  assign h2c_byp_in_mm_mrkr_req     = 1'b0;
+  assign h2c_byp_in_mm_port_id      = 0;
+  assign h2c_byp_in_mm_sdi          = 1'b0;
+  assign h2c_byp_in_mm_qid          = 0;
+  assign h2c_byp_in_mm_error        = 1'b0;
+  assign h2c_byp_in_mm_func         = 0;
+  assign h2c_byp_in_mm_cidx         = 0;
+  assign h2c_byp_in_mm_no_dma       = 1'b0;
+  assign h2c_byp_in_mm_vld          = 1'b0;
+
   assign c2h_byp_out_rdy            = 1'b1;
   assign c2h_byp_in_st_csh_vld      = 1'b0;
   assign c2h_byp_in_st_csh_addr     = 0;
@@ -285,6 +476,19 @@ module qdma_subsystem #(
   assign c2h_byp_in_st_csh_func     = 0;
   assign c2h_byp_in_st_csh_pfch_tag = 0;
 
+  assign c2h_byp_in_mm_radr         = 0;
+  assign c2h_byp_in_mm_wadr         = 0;
+  assign c2h_byp_in_mm_len          = 0;
+  assign c2h_byp_in_mm_mrkr_req     = 1'b0;
+  assign c2h_byp_in_mm_port_id      = 0;
+  assign c2h_byp_in_mm_sdi          = 1'b0;
+  assign c2h_byp_in_mm_qid          = 0;
+  assign c2h_byp_in_mm_error        = 1'b0;
+  assign c2h_byp_in_mm_func         = 0;
+  assign c2h_byp_in_mm_cidx         = 0;
+  assign c2h_byp_in_mm_vld          = 1'b0;
+  assign c2h_byp_in_mm_no_dma       = 1'b0;
+
   qdma_subsystem_qdma_wrapper qdma_wrapper_inst (
     .pcie_rxp                        (pcie_rxp),
     .pcie_rxn                        (pcie_rxn),
@@ -308,6 +512,45 @@ module qdma_subsystem #(
     .m_axil_rresp                    (m_axil_pcie_rresp),
     .m_axil_rready                   (m_axil_pcie_rready),
 
+    .m_axi_awready                   (m_axi_awready),
+    .m_axi_wready                    (m_axi_wready),
+    .m_axi_bid                       (m_axi_bid),
+    .m_axi_bresp                     (m_axi_bresp),
+    .m_axi_bvalid                    (m_axi_bvalid),
+    .m_axi_arready                   (m_axi_arready),
+    .m_axi_rid                       (m_axi_rid),
+    .m_axi_rdata                     (m_axi_rdata),
+    .m_axi_rresp                     (m_axi_rresp),
+    .m_axi_rlast                     (m_axi_rlast),
+    .m_axi_rvalid                    (m_axi_rvalid),
+    .m_axi_awid                      (m_axi_awid),
+    .m_axi_awaddr                    (m_axi_awaddr),
+    .m_axi_awuser                    (m_axi_awuser),
+    .m_axi_awlen                     (m_axi_awlen),
+    .m_axi_awsize                    (m_axi_awsize),
+    .m_axi_awburst                   (m_axi_awburst),
+    .m_axi_awprot                    (m_axi_awprot),
+    .m_axi_awvalid                   (m_axi_awvalid),
+    .m_axi_awlock                    (m_axi_awlock),
+    .m_axi_awcache                   (m_axi_awcache),
+    .m_axi_wdata                     (m_axi_wdata),
+    .m_axi_wuser                     (m_axi_wuser),
+    .m_axi_wstrb                     (m_axi_wstrb),
+    .m_axi_wlast                     (m_axi_wlast),
+    .m_axi_wvalid                    (m_axi_wvalid),
+    .m_axi_bready                    (m_axi_bready),
+    .m_axi_arid                      (m_axi_arid),
+    .m_axi_araddr                    (m_axi_araddr),
+    .m_axi_aruser                    (m_axi_aruser),
+    .m_axi_arlen                     (m_axi_arlen),
+    .m_axi_arsize                    (m_axi_arsize),
+    .m_axi_arburst                   (m_axi_arburst),
+    .m_axi_arprot                    (m_axi_arprot),
+    .m_axi_arvalid                   (m_axi_arvalid),
+    .m_axi_arlock                    (m_axi_arlock),
+    .m_axi_arcache                   (m_axi_arcache),
+    .m_axi_rready                    (m_axi_rready),
+
     .m_axis_h2c_tvalid               (axis_qdma_h2c_tvalid),
     .m_axis_h2c_tdata                (axis_qdma_h2c_tdata),
     .m_axis_h2c_tcrc                 (axis_qdma_h2c_tcrc),
@@ -375,6 +618,20 @@ module qdma_subsystem #(
     .h2c_byp_in_st_no_dma            (h2c_byp_in_st_no_dma),
     .h2c_byp_in_st_rdy               (h2c_byp_in_st_rdy),
 
+    .h2c_byp_in_mm_radr              (h2c_byp_in_mm_radr),
+    .h2c_byp_in_mm_wadr              (h2c_byp_in_mm_wadr),
+    .h2c_byp_in_mm_len               (h2c_byp_in_mm_len),
+    .h2c_byp_in_mm_mrkr_req          (h2c_byp_in_mm_mrkr_req),
+    .h2c_byp_in_mm_port_id           (h2c_byp_in_mm_port_id),
+    .h2c_byp_in_mm_sdi               (h2c_byp_in_mm_sdi),
+    .h2c_byp_in_mm_qid               (h2c_byp_in_mm_qid),
+    .h2c_byp_in_mm_error             (h2c_byp_in_mm_error),
+    .h2c_byp_in_mm_func              (h2c_byp_in_mm_func),
+    .h2c_byp_in_mm_cidx              (h2c_byp_in_mm_cidx),
+    .h2c_byp_in_mm_no_dma            (h2c_byp_in_mm_no_dma),
+    .h2c_byp_in_mm_vld               (h2c_byp_in_mm_vld),
+    .h2c_byp_in_mm_rdy               (h2c_byp_in_mm_rdy),
+
     .c2h_byp_out_vld                 (c2h_byp_out_vld),
     .c2h_byp_out_dsc                 (c2h_byp_out_dsc),
     .c2h_byp_out_st_mm               (c2h_byp_out_st_mm),
@@ -397,6 +654,77 @@ module qdma_subsystem #(
     .c2h_byp_in_st_csh_pfch_tag      (c2h_byp_in_st_csh_pfch_tag),
     .c2h_byp_in_st_csh_rdy           (c2h_byp_in_st_csh_rdy),
 
+    .c2h_byp_in_mm_radr              (c2h_byp_in_mm_radr),
+    .c2h_byp_in_mm_wadr              (c2h_byp_in_mm_wadr),
+    .c2h_byp_in_mm_len               (c2h_byp_in_mm_len),
+    .c2h_byp_in_mm_mrkr_req          (c2h_byp_in_mm_mrkr_req),
+    .c2h_byp_in_mm_port_id           (c2h_byp_in_mm_port_id),
+    .c2h_byp_in_mm_sdi               (c2h_byp_in_mm_sdi),
+    .c2h_byp_in_mm_qid               (c2h_byp_in_mm_qid),
+    .c2h_byp_in_mm_error             (c2h_byp_in_mm_error),
+    .c2h_byp_in_mm_func              (c2h_byp_in_mm_func),
+    .c2h_byp_in_mm_cidx              (c2h_byp_in_mm_cidx),
+    .c2h_byp_in_mm_vld               (c2h_byp_in_mm_vld),
+    .c2h_byp_in_mm_no_dma            (c2h_byp_in_mm_no_dma),
+    .c2h_byp_in_mm_rdy               (c2h_byp_in_mm_rdy),
+
+    .s_csr_prog_done                 (s_csr_prog_done),
+    .s_axil_csr_awaddr               (s_axil_csr_awaddr),
+    .s_axil_csr_awprot               (s_axil_csr_awprot),
+    .s_axil_csr_awvalid              (s_axil_csr_awvalid),
+    .s_axil_csr_awready              (s_axil_csr_awready),
+    .s_axil_csr_wdata                (s_axil_csr_wdata),
+    .s_axil_csr_wstrb                (s_axil_csr_wstrb),
+    .s_axil_csr_wvalid               (s_axil_csr_wvalid),
+    .s_axil_csr_wready               (s_axil_csr_wready),
+    .s_axil_csr_bvalid               (s_axil_csr_bvalid),
+    .s_axil_csr_bresp                (s_axil_csr_bresp),
+    .s_axil_csr_bready               (s_axil_csr_bready),
+    .s_axil_csr_araddr               (s_axil_csr_araddr),
+    .s_axil_csr_arprot               (s_axil_csr_arprot),
+    .s_axil_csr_arvalid              (s_axil_csr_arvalid),
+    .s_axil_csr_arready              (s_axil_csr_arready),
+    .s_axil_csr_rdata                (s_axil_csr_rdata),
+    .s_axil_csr_rresp                (s_axil_csr_rresp),
+    .s_axil_csr_rvalid               (s_axil_csr_rvalid),
+    .s_axil_csr_rready               (s_axil_csr_rready),
+
+    .s_axib_awid                     (s_axib_awid),
+    .s_axib_awaddr                   (s_axib_awaddr),
+    .s_axib_awregion                 (s_axib_awregion),
+    .s_axib_awlen                    (s_axib_awlen),
+    .s_axib_awsize                   (s_axib_awsize),
+    .s_axib_awburst                  (s_axib_awburst),
+    .s_axib_awvalid                  (s_axib_awvalid),
+    .s_axib_wdata                    (s_axib_wdata),
+    .s_axib_wstrb                    (s_axib_wstrb),
+    .s_axib_wlast                    (s_axib_wlast),
+    .s_axib_wvalid                   (s_axib_wvalid),
+    .s_axib_wuser                    (s_axib_wuser),
+    .s_axib_ruser                    (s_axib_ruser),
+    .s_axib_bready                   (s_axib_bready),
+    .s_axib_arid                     (s_axib_arid),
+    .s_axib_araddr                   (s_axib_araddr),
+    .s_axib_aruser                   (s_axib_aruser),
+    .s_axib_awuser                   (s_axib_awuser),
+    .s_axib_arregion                 (s_axib_arregion),
+    .s_axib_arlen                    (s_axib_arlen),
+    .s_axib_arsize                   (s_axib_arsize),
+    .s_axib_arburst                  (s_axib_arburst),
+    .s_axib_arvalid                  (s_axib_arvalid),
+    .s_axib_rready                   (s_axib_rready),
+    .s_axib_awready                  (s_axib_awready),
+    .s_axib_wready                   (s_axib_wready),
+    .s_axib_bid                      (s_axib_bid),
+    .s_axib_bresp                    (s_axib_bresp),
+    .s_axib_bvalid                   (s_axib_bvalid),
+    .s_axib_arready                  (s_axib_arready),
+    .s_axib_rid                      (s_axib_rid),
+    .s_axib_rdata                    (s_axib_rdata),
+    .s_axib_rresp                    (s_axib_rresp),
+    .s_axib_rlast                    (s_axib_rlast),
+    .s_axib_rvalid                   (s_axib_rvalid),
+
     .pcie_refclk                     (pcie_refclk),
     .pcie_refclk_gt                  (pcie_refclk_gt),
     .pcie_rstn                       (pcie_rstn),
@@ -407,6 +735,17 @@ module qdma_subsystem #(
 
     .axil_aclk                       (axil_aclk),
     .axis_aclk                       (axis_aclk),
+
+  `ifdef __au55n__
+    .ref_clk_100mhz                  (ref_clk_100mhz),
+  `elsif __au55c__
+    .ref_clk_100mhz                  (ref_clk_100mhz),
+  `elsif __au50__
+    .ref_clk_100mhz                  (ref_clk_100mhz),
+  `elsif __au280__
+    .ref_clk_100mhz                  (ref_clk_100mhz),
+  `endif
+
     .aresetn                         (powerup_rstn)
   );
 `else // !`ifdef __synthesis__
@@ -801,7 +1140,26 @@ module qdma_subsystem #(
         .axil_aresetn          (axil_aresetn)
       );
     end
-  end
+
+    (* mark_debug = "true" *) logic [47:0] qdma_h2c_pkt_cnt;
+    (* mark_debug = "true" *) logic [47:0] qdma_c2h_pkt_cnt;
+
+    always_ff @(posedge axis_aclk)
+      if(!axil_aresetn) begin
+        qdma_h2c_pkt_cnt <= 0;
+        qdma_c2h_pkt_cnt <= 0;
+      end
+      else begin
+        if ((m_axis_h2c_tvalid != 0) && (m_axis_h2c_tready != 0) && (m_axis_h2c_tlast != 0)) begin
+          qdma_h2c_pkt_cnt <= qdma_h2c_pkt_cnt + 1;
+        end
+
+        if ((s_axis_c2h_tvalid != 0) && (s_axis_c2h_tready != 0) && (axis_c2h_tlast !=0)) begin
+          qdma_c2h_pkt_cnt <= qdma_c2h_pkt_cnt + 1;
+        end
+      end
+    end
+
   endgenerate
 
 endmodule: qdma_subsystem
diff --git a/src/qdma_subsystem/qdma_subsystem_c2h.sv b/src/qdma_subsystem/qdma_subsystem_c2h.sv
index 50e9082..b230c82 100644
--- a/src/qdma_subsystem/qdma_subsystem_c2h.sv
+++ b/src/qdma_subsystem/qdma_subsystem_c2h.sv
@@ -277,10 +277,14 @@ module qdma_subsystem_c2h #(
   assign m_axis_qdma_cpl_tdata[511:256]       = 0;
   assign m_axis_qdma_cpl_tdata[255:128]       = 0;
   assign m_axis_qdma_cpl_tdata[127:64]        = 0;
-  assign m_axis_qdma_cpl_tdata[63:32]         = cpl_fifo_dout[31:0];
+  // patch
+  assign m_axis_qdma_cpl_tdata[63:20]         = 0;
+  assign m_axis_qdma_cpl_tdata[19:4]          = cpl_fifo_dout[15:0];
+  assign m_axis_qdma_cpl_tdata[3:0]           = 4'b1000;
+/*  assign m_axis_qdma_cpl_tdata[63:32]         = cpl_fifo_dout[31:0];
   assign m_axis_qdma_cpl_tdata[31:27]         = 0;
   assign m_axis_qdma_cpl_tdata[26:16]         = cpl_fifo_dout[42:32];
-  assign m_axis_qdma_cpl_tdata[15:0]          = 0;
+  assign m_axis_qdma_cpl_tdata[15:0]          = 0;*/
 
   assign m_axis_qdma_cpl_ctrl_no_wrb_marker   = 1'b0;
   assign m_axis_qdma_cpl_ctrl_col_idx         = 0;
diff --git a/src/qdma_subsystem/qdma_subsystem_h2c.sv b/src/qdma_subsystem/qdma_subsystem_h2c.sv
index 6a7ee26..4b183c5 100644
--- a/src/qdma_subsystem/qdma_subsystem_h2c.sv
+++ b/src/qdma_subsystem/qdma_subsystem_h2c.sv
@@ -71,7 +71,8 @@ module qdma_subsystem_h2c #(
     .s_axis_tdata  (s_axis_qdma_h2c_tdata),
     .s_axis_tkeep  ({64{1'b1}}),
     .s_axis_tlast  (s_axis_qdma_h2c_tlast),
-    .s_axis_tuser  ({s_axis_qdma_h2c_tuser_mdata[15:0],
+  .s_axis_tuser  ({s_axis_qdma_h2c_tuser_mdata[31:16], // patch
+//    .s_axis_tuser  ({s_axis_qdma_h2c_tuser_mdata[15:0],
                      s_axis_qdma_h2c_tuser_mty,
                      s_axis_qdma_h2c_tuser_qid}),
     .s_axis_tid    (0),
diff --git a/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v b/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
index cfd0dca..6cfbf05 100644
--- a/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
+++ b/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
@@ -42,6 +42,45 @@ module qdma_subsystem_qdma_wrapper (
   input    [1:0] m_axil_rresp,
   output         m_axil_rready,
 
+  input          m_axi_awready,
+  input          m_axi_wready,
+  input  [3:0]   m_axi_bid,
+  input  [1:0]   m_axi_bresp,
+  input          m_axi_bvalid,
+  input          m_axi_arready,
+  input  [3:0]   m_axi_rid,
+  input  [511:0] m_axi_rdata,
+  input  [1:0]   m_axi_rresp,
+  input          m_axi_rlast,
+  input          m_axi_rvalid,
+  output [3:0]   m_axi_awid,
+  output [63:0]  m_axi_awaddr,
+  output [31:0]  m_axi_awuser,
+  output [7:0]   m_axi_awlen,
+  output [2:0]   m_axi_awsize,
+  output [1:0]   m_axi_awburst,
+  output [2:0]   m_axi_awprot,
+  output         m_axi_awvalid,
+  output         m_axi_awlock,
+  output [3:0]   m_axi_awcache,
+  output [511:0] m_axi_wdata,
+  output [63:0]  m_axi_wuser,
+  output [63:0]  m_axi_wstrb,
+  output         m_axi_wlast,
+  output         m_axi_wvalid,
+  output         m_axi_bready,
+  output [3:0]   m_axi_arid,
+  output [63:0]  m_axi_araddr,
+  output [31:0]  m_axi_aruser,
+  output [7:0]   m_axi_arlen,
+  output [2:0]   m_axi_arsize,
+  output [1:0]   m_axi_arburst,
+  output [2:0]   m_axi_arprot,
+  output         m_axi_arvalid,
+  output         m_axi_arlock,
+  output [3:0]   m_axi_arcache,
+  output         m_axi_rready,
+
   output         m_axis_h2c_tvalid,
   output [511:0] m_axis_h2c_tdata,
   output  [31:0] m_axis_h2c_tcrc,
@@ -109,6 +148,20 @@ module qdma_subsystem_qdma_wrapper (
   input          h2c_byp_in_st_no_dma,
   output         h2c_byp_in_st_rdy,
 
+  input  [63:0]  h2c_byp_in_mm_radr,
+  input  [63:0]  h2c_byp_in_mm_wadr,
+  input  [15:0]  h2c_byp_in_mm_len,
+  input          h2c_byp_in_mm_mrkr_req,
+  input  [2:0]   h2c_byp_in_mm_port_id,
+  input          h2c_byp_in_mm_sdi,
+  input  [10:0]  h2c_byp_in_mm_qid,
+  input          h2c_byp_in_mm_error,
+  input  [7:0]   h2c_byp_in_mm_func,
+  input  [15:0]  h2c_byp_in_mm_cidx,
+  input          h2c_byp_in_mm_no_dma,
+  input          h2c_byp_in_mm_vld,
+  output         h2c_byp_in_mm_rdy,
+
   output         c2h_byp_out_vld,
   output [255:0] c2h_byp_out_dsc,
   output         c2h_byp_out_st_mm,
@@ -131,6 +184,79 @@ module qdma_subsystem_qdma_wrapper (
   input    [6:0] c2h_byp_in_st_csh_pfch_tag,
   output         c2h_byp_in_st_csh_rdy,
 
+  input   [63:0] c2h_byp_in_mm_radr,
+  input   [63:0] c2h_byp_in_mm_wadr,
+  input   [15:0] c2h_byp_in_mm_len,
+  input          c2h_byp_in_mm_mrkr_req,
+  input   [2:0]  c2h_byp_in_mm_port_id,
+  input          c2h_byp_in_mm_sdi,
+  input   [10:0] c2h_byp_in_mm_qid,
+  input          c2h_byp_in_mm_error,
+  input   [7:0]  c2h_byp_in_mm_func,
+  input   [15:0] c2h_byp_in_mm_cidx,
+  input          c2h_byp_in_mm_vld,
+  input          c2h_byp_in_mm_no_dma,
+  output         c2h_byp_in_mm_rdy,
+
+  // QDMA control/status register interface
+  output         s_csr_prog_done,
+  input   [31:0] s_axil_csr_awaddr,
+  input    [2:0] s_axil_csr_awprot,
+  input          s_axil_csr_awvalid,
+  output         s_axil_csr_awready,
+  input   [31:0] s_axil_csr_wdata,
+  input   [3:0]  s_axil_csr_wstrb,
+  input          s_axil_csr_wvalid,
+  output         s_axil_csr_wready,
+  output         s_axil_csr_bvalid,
+  output   [1:0] s_axil_csr_bresp,
+  input          s_axil_csr_bready,
+  input   [31:0] s_axil_csr_araddr,
+  input    [2:0] s_axil_csr_arprot,
+  input          s_axil_csr_arvalid,
+  output         s_axil_csr_arready,
+  output  [31:0] s_axil_csr_rdata,
+  output   [1:0] s_axil_csr_rresp,
+  output         s_axil_csr_rvalid,
+  input          s_axil_csr_rready,
+
+  // QDMA bridge slave interface
+  (* mark_debug = "true" *) input    [3:0] s_axib_awid,
+  (* mark_debug = "true" *) input   [63:0] s_axib_awaddr,
+  (* mark_debug = "true" *) input    [3:0] s_axib_awregion,
+  (* mark_debug = "true" *) input    [7:0] s_axib_awlen,
+  (* mark_debug = "true" *) input    [2:0] s_axib_awsize,
+  (* mark_debug = "true" *) input    [1:0] s_axib_awburst,
+  (* mark_debug = "true" *) input          s_axib_awvalid,
+  (* mark_debug = "true" *) input  [511:0] s_axib_wdata,
+  (* mark_debug = "true" *) input   [63:0] s_axib_wstrb,
+  (* mark_debug = "true" *) input          s_axib_wlast,
+  (* mark_debug = "true" *) input          s_axib_wvalid,
+  (* mark_debug = "true" *) input   [63:0] s_axib_wuser,
+  (* mark_debug = "true" *) output  [63:0] s_axib_ruser,
+  (* mark_debug = "true" *) input          s_axib_bready,
+  (* mark_debug = "true" *) input    [3:0] s_axib_arid,
+  (* mark_debug = "true" *) input   [63:0] s_axib_araddr,
+  (* mark_debug = "true" *) input   [11:0] s_axib_aruser,
+  (* mark_debug = "true" *) input   [11:0] s_axib_awuser,
+  (* mark_debug = "true" *) input    [3:0] s_axib_arregion,
+  (* mark_debug = "true" *) input    [7:0] s_axib_arlen,
+  (* mark_debug = "true" *) input    [2:0] s_axib_arsize,
+  (* mark_debug = "true" *) input    [1:0] s_axib_arburst,
+  (* mark_debug = "true" *) input          s_axib_arvalid,
+  (* mark_debug = "true" *) input          s_axib_rready,
+  (* mark_debug = "true" *) output         s_axib_awready,
+  (* mark_debug = "true" *) output         s_axib_wready,
+  (* mark_debug = "true" *) output   [3:0] s_axib_bid,
+  (* mark_debug = "true" *) output   [1:0] s_axib_bresp,
+  (* mark_debug = "true" *) output         s_axib_bvalid,
+  (* mark_debug = "true" *) output         s_axib_arready,
+  (* mark_debug = "true" *) output   [3:0] s_axib_rid,
+  (* mark_debug = "true" *) output [511:0] s_axib_rdata,
+  (* mark_debug = "true" *) output   [1:0] s_axib_rresp,
+  (* mark_debug = "true" *) output         s_axib_rlast,
+  (* mark_debug = "true" *) output         s_axib_rvalid,
+
   input          pcie_refclk,
   input          pcie_refclk_gt,
   input          pcie_rstn,
@@ -141,6 +267,19 @@ module qdma_subsystem_qdma_wrapper (
 
   output         axis_aclk,
   output         axil_aclk,
+
+  // For AU55N, AU55C, AU50, and AU280, we generate 100MHz reference clock which is needed when HBM IP is instantiated
+  // in user-defined logic.
+  `ifdef __au55n__
+    output         ref_clk_100mhz,
+  `elsif __au55c__
+    output         ref_clk_100mhz,
+  `elsif __au50__
+    output         ref_clk_100mhz,
+  `elsif __au280__
+    output         ref_clk_100mhz,
+  `endif
+
   output         aresetn
 );
 
@@ -150,6 +289,27 @@ module qdma_subsystem_qdma_wrapper (
 
   reg   [1:0] aresetn_sync = 2'b11;
 
+  (* mark_debug = "true" *) wire         qdma_csr_prog_done;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_awaddr;
+  (* mark_debug = "true" *) wire   [2:0] qdma_axil_csr_awprot;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_awvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_awready;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_wdata;
+  (* mark_debug = "true" *) wire  [3:0]  qdma_axil_csr_wstrb;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_wvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_wready;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_bvalid;
+  (* mark_debug = "true" *) wire   [1:0] qdma_axil_csr_bresp;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_bready;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_araddr;
+  (* mark_debug = "true" *) wire   [2:0] qdma_axil_csr_arprot;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_arvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_arready;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_rdata;
+  (* mark_debug = "true" *) wire   [1:0] qdma_axil_csr_rresp;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_rvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_rready;
+
   wire        qdma_axil_awvalid;
   wire [31:0] qdma_axil_awaddr;
   wire  [2:0] qdma_axil_awprot;
@@ -198,11 +358,11 @@ module qdma_subsystem_qdma_wrapper (
 
   assign axis_aclk = aclk_250mhz;
 
-  // Generate 125MHz 'axil_aclk'
+  // Generate 125MHz 'axil_aclk' and 100MHz 'ref_clk_100mhz'.
   qdma_subsystem_clk_div clk_div_inst (
     .clk_in1  (axis_aclk),
     .clk_out1 (axil_aclk),
-    .locked   ()
+    .clk_out2 (ref_clk_100mhz)
   );
 
   // Generate reset w.r.t. the 125MHz clock
@@ -260,6 +420,66 @@ module qdma_subsystem_qdma_wrapper (
     .m_axi_aresetn (aresetn)
   );
 
+  qdma_subsystem_axi_csr_cdc axi_csr_cdc_inst (
+    .s_axi_awvalid (s_axil_csr_awvalid),
+    .s_axi_awaddr  (s_axil_csr_awaddr),
+    .s_axi_awprot  (s_axil_csr_awprot),
+    .s_axi_awready (s_axil_csr_awready),
+    .s_axi_wvalid  (s_axil_csr_wvalid),
+    .s_axi_wdata   (s_axil_csr_wdata),
+    .s_axi_wstrb   (s_axil_csr_wstrb),
+    .s_axi_wready  (s_axil_csr_wready),
+    .s_axi_bvalid  (s_axil_csr_bvalid),
+    .s_axi_bresp   (s_axil_csr_bresp),
+    .s_axi_bready  (s_axil_csr_bready),
+    .s_axi_arvalid (s_axil_csr_arvalid),
+    .s_axi_araddr  (s_axil_csr_araddr),
+    .s_axi_arprot  (s_axil_csr_arprot),
+    .s_axi_arready (s_axil_csr_arready),
+    .s_axi_rvalid  (s_axil_csr_rvalid),
+    .s_axi_rdata   (s_axil_csr_rdata),
+    .s_axi_rresp   (s_axil_csr_rresp),
+    .s_axi_rready  (s_axil_csr_rready),
+
+    .m_axi_awvalid (qdma_axil_csr_awvalid),
+    .m_axi_awaddr  (qdma_axil_csr_awaddr),
+    .m_axi_awprot  (qdma_axil_csr_awprot),
+    .m_axi_awready (qdma_axil_csr_awready),
+    .m_axi_wvalid  (qdma_axil_csr_wvalid),
+    .m_axi_wdata   (qdma_axil_csr_wdata),
+    .m_axi_wstrb   (qdma_axil_csr_wstrb),
+    .m_axi_wready  (qdma_axil_csr_wready),
+    .m_axi_bvalid  (qdma_axil_csr_bvalid),
+    .m_axi_bresp   (qdma_axil_csr_bresp),
+    .m_axi_bready  (qdma_axil_csr_bready),
+    .m_axi_arvalid (qdma_axil_csr_arvalid),
+    .m_axi_araddr  (qdma_axil_csr_araddr),
+    .m_axi_arprot  (qdma_axil_csr_arprot),
+    .m_axi_arready (qdma_axil_csr_arready),
+    .m_axi_rvalid  (qdma_axil_csr_rvalid),
+    .m_axi_rdata   (qdma_axil_csr_rdata),
+    .m_axi_rresp   (qdma_axil_csr_rresp),
+    .m_axi_rready  (qdma_axil_csr_rready),
+
+    .s_axi_aclk    (axil_aclk),
+    .s_axi_aresetn (aresetn),
+    .m_axi_aclk    (axis_aclk),
+    .m_axi_aresetn (aresetn_250mhz)
+  );
+
+  // Convert signals @ axis_aclk to axil_aclk
+  xpm_cdc_single #(
+    .DEST_SYNC_FF(4), // DECIMAL; range: 2-10
+    .INIT_SYNC_FF(0), // DECIMAL; 0=disable simulation init values, 1=enable simulation init values
+    .SIM_ASSERT_CHK(1), // DECIMAL; 0=disable simulation messages, 1=enable simulation messages
+    .SRC_INPUT_REG(1) // DECIMAL; 0=do not register input, 1=register input
+  ) roce_pkt_recved_cdc (
+    .dest_out(s_csr_prog_done),
+    .dest_clk(axil_aclk),
+    .src_clk(axis_aclk),
+    .src_in(qdma_csr_prog_done)
+  );
+
   assign usr_irq_in_vld    = 1'b0;
   assign usr_irq_in_vec    = 0;
   assign usr_irq_in_fnc    = 0;
@@ -335,6 +555,20 @@ module qdma_subsystem_qdma_wrapper (
     .h2c_byp_in_st_no_dma                 (h2c_byp_in_st_no_dma),
     .h2c_byp_in_st_rdy                    (h2c_byp_in_st_rdy),
 
+    .h2c_byp_in_mm_radr                   (h2c_byp_in_mm_radr),
+    .h2c_byp_in_mm_wadr                   (h2c_byp_in_mm_wadr),
+    .h2c_byp_in_mm_len                    (h2c_byp_in_mm_len),
+    .h2c_byp_in_mm_mrkr_req               (h2c_byp_in_mm_mrkr_req),
+    .h2c_byp_in_mm_port_id                (h2c_byp_in_mm_port_id),
+    .h2c_byp_in_mm_sdi                    (h2c_byp_in_mm_sdi),
+    .h2c_byp_in_mm_qid                    (h2c_byp_in_mm_qid),
+    .h2c_byp_in_mm_error                  (h2c_byp_in_mm_error),
+    .h2c_byp_in_mm_func                   (h2c_byp_in_mm_func),
+    .h2c_byp_in_mm_cidx                   (h2c_byp_in_mm_cidx),
+    .h2c_byp_in_mm_no_dma                 (h2c_byp_in_mm_no_dma),
+    .h2c_byp_in_mm_vld                    (h2c_byp_in_mm_vld),
+    .h2c_byp_in_mm_rdy                    (h2c_byp_in_mm_rdy),
+
     .c2h_byp_out_vld                      (c2h_byp_out_vld),
     .c2h_byp_out_dsc                      (c2h_byp_out_dsc),
     .c2h_byp_out_st_mm                    (c2h_byp_out_st_mm),
@@ -357,12 +591,31 @@ module qdma_subsystem_qdma_wrapper (
     .c2h_byp_in_st_csh_pfch_tag           (c2h_byp_in_st_csh_pfch_tag),
     .c2h_byp_in_st_csh_rdy                (c2h_byp_in_st_csh_rdy),
 
+    .c2h_byp_in_mm_radr                   (c2h_byp_in_mm_radr),
+    .c2h_byp_in_mm_wadr                   (c2h_byp_in_mm_wadr),
+    .c2h_byp_in_mm_len                    (c2h_byp_in_mm_len),
+    .c2h_byp_in_mm_mrkr_req               (c2h_byp_in_mm_mrkr_req),
+    .c2h_byp_in_mm_port_id                (c2h_byp_in_mm_port_id),
+    .c2h_byp_in_mm_sdi                    (c2h_byp_in_mm_sdi),
+    .c2h_byp_in_mm_qid                    (c2h_byp_in_mm_qid),
+    .c2h_byp_in_mm_error                  (c2h_byp_in_mm_error),
+    .c2h_byp_in_mm_func                   (c2h_byp_in_mm_func),
+    .c2h_byp_in_mm_cidx                   (c2h_byp_in_mm_cidx),
+    .c2h_byp_in_mm_vld                    (c2h_byp_in_mm_vld),
+    .c2h_byp_in_mm_no_dma                 (c2h_byp_in_mm_no_dma),
+    .c2h_byp_in_mm_rdy                    (c2h_byp_in_mm_rdy),
+
     .usr_irq_in_vld                       (usr_irq_in_vld),
     .usr_irq_in_vec                       (usr_irq_in_vec),
     .usr_irq_in_fnc                       (usr_irq_in_fnc),
     .usr_irq_out_ack                      (usr_irq_out_ack),
     .usr_irq_out_fail                     (usr_irq_out_fail),
 
+    .st_rx_msg_rdy                        (1'b1),
+    .st_rx_msg_valid                      (),
+    .st_rx_msg_last                       (),
+    .st_rx_msg_data                       (),
+
     .tm_dsc_sts_vld                       (tm_dsc_sts_vld),
     .tm_dsc_sts_port_id                   (tm_dsc_sts_port_id),
     .tm_dsc_sts_qen                       (tm_dsc_sts_qen),
@@ -384,6 +637,86 @@ module qdma_subsystem_qdma_wrapper (
     .dsc_crdt_in_fence                    (dsc_crdt_in_fence),
     .dsc_crdt_in_rdy                      (dsc_crdt_in_rdy),
 
+    .m_axi_awready                        (m_axi_awready),
+    .m_axi_wready                         (m_axi_wready),
+    .m_axi_bid                            (m_axi_bid),
+    .m_axi_bresp                          (m_axi_bresp),
+    .m_axi_bvalid                         (m_axi_bvalid),
+    .m_axi_arready                        (m_axi_arready),
+    .m_axi_rid                            (m_axi_rid),
+    .m_axi_rdata                          (m_axi_rdata),
+    .m_axi_rresp                          (m_axi_rresp),
+    .m_axi_rlast                          (m_axi_rlast),
+    .m_axi_rvalid                         (m_axi_rvalid),
+    .m_axi_awid                           (m_axi_awid),
+    .m_axi_awaddr                         (m_axi_awaddr),
+    .m_axi_awuser                         (m_axi_awuser),
+    .m_axi_awlen                          (m_axi_awlen),
+    .m_axi_awsize                         (m_axi_awsize),
+    .m_axi_awburst                        (m_axi_awburst),
+    .m_axi_awprot                         (m_axi_awprot),
+    .m_axi_awvalid                        (m_axi_awvalid),
+    .m_axi_awlock                         (m_axi_awlock),
+    .m_axi_awcache                        (m_axi_awcache),
+    .m_axi_wdata                          (m_axi_wdata),
+    .m_axi_wuser                          (m_axi_wuser),
+    .m_axi_wstrb                          (m_axi_wstrb),
+    .m_axi_wlast                          (m_axi_wlast),
+    .m_axi_wvalid                         (m_axi_wvalid),
+    .m_axi_bready                         (m_axi_bready),
+    .m_axi_arid                           (m_axi_arid),
+    .m_axi_araddr                         (m_axi_araddr),
+    .m_axi_aruser                         (m_axi_aruser),
+    .m_axi_arlen                          (m_axi_arlen),
+    .m_axi_arsize                         (m_axi_arsize),
+    .m_axi_arburst                        (m_axi_arburst),
+    .m_axi_arprot                         (m_axi_arprot),
+    .m_axi_arvalid                        (m_axi_arvalid),
+    .m_axi_arlock                         (m_axi_arlock),
+    .m_axi_arcache                        (m_axi_arcache),
+    .m_axi_rready                         (m_axi_rready),
+
+    /*
+    // No need to connect Master AXI Bridge signals
+    .m_axib_awid                          (),
+    .m_axib_awaddr                        (),
+    .m_axib_awlen                         (),
+    .m_axib_awuser                        (),
+    .m_axib_awsize                        (),
+    .m_axib_awburst                       (),
+    .m_axib_awprot                        (),
+    .m_axib_awvalid                       (),
+    .m_axib_awready                       (1'b0),
+    .m_axib_awlock                        (),
+    .m_axib_awcache                       (),
+    .m_axib_wdata                         (),
+    .m_axib_wstrb                         (),
+    .m_axib_wlast                         (),
+    .m_axib_wvalid                        (),
+    .m_axib_wready                        (1'b0),
+    .m_axib_bid                           (4'd0),
+    .m_axib_bresp                         (2'd0),
+    .m_axib_bvalid                        (1'b0),
+    .m_axib_bready                        (),
+    .m_axib_arid                          (),
+    .m_axib_araddr                        (),
+    .m_axib_arlen                         (),
+    .m_axib_aruser                        (),
+    .m_axib_arsize                        (),
+    .m_axib_arburst                       (),
+    .m_axib_arprot                        (),
+    .m_axib_arvalid                       (),
+    .m_axib_arready                       (1'b0),
+    .m_axib_arlock                        (),
+    .m_axib_arcache                       (),
+    .m_axib_rid                           (4'd0),
+    .m_axib_rdata                         (512'd0),
+    .m_axib_rresp                         (2'd0),
+    .m_axib_rlast                         (1'b0),
+    .m_axib_rvalid                        (1'b0),
+    .m_axib_rready                        (),
+    */
+
     .m_axis_h2c_tvalid                    (m_axis_h2c_tvalid),
     .m_axis_h2c_tdata                     (m_axis_h2c_tdata),
     .m_axis_h2c_tcrc                      (m_axis_h2c_tcrc),
@@ -424,6 +757,65 @@ module qdma_subsystem_qdma_wrapper (
     .s_axis_c2h_cmpt_ctrl_no_wrb_marker   (s_axis_cpl_ctrl_no_wrb_marker),
     .s_axis_c2h_cmpt_tready               (s_axis_cpl_tready),
 
+    // Control status register interface
+    .csr_prog_done                        (qdma_csr_prog_done),
+    .s_axil_csr_awaddr                    (qdma_axil_csr_awaddr),
+    .s_axil_csr_awprot                    (qdma_axil_csr_awprot),
+    .s_axil_csr_awvalid                   (qdma_axil_csr_awvalid),
+    .s_axil_csr_awready                   (qdma_axil_csr_awready),
+    .s_axil_csr_wdata                     (qdma_axil_csr_wdata),
+    .s_axil_csr_wstrb                     (qdma_axil_csr_wstrb),
+    .s_axil_csr_wvalid                    (qdma_axil_csr_wvalid),
+    .s_axil_csr_wready                    (qdma_axil_csr_wready),
+    .s_axil_csr_bvalid                    (qdma_axil_csr_bvalid),
+    .s_axil_csr_bresp                     (qdma_axil_csr_bresp),
+    .s_axil_csr_bready                    (qdma_axil_csr_bready),
+    .s_axil_csr_araddr                    (qdma_axil_csr_araddr),
+    .s_axil_csr_arprot                    (qdma_axil_csr_arprot),
+    .s_axil_csr_arvalid                   (qdma_axil_csr_arvalid),
+    .s_axil_csr_arready                   (qdma_axil_csr_arready),
+    .s_axil_csr_rdata                     (qdma_axil_csr_rdata),
+    .s_axil_csr_rresp                     (qdma_axil_csr_rresp),
+    .s_axil_csr_rvalid                    (qdma_axil_csr_rvalid),
+    .s_axil_csr_rready                    (qdma_axil_csr_rready),
+
+    // AXI bridge interface used to access host memory
+    .s_axib_awid                          (s_axib_awid),
+    .s_axib_awaddr                        (s_axib_awaddr),
+    .s_axib_awregion                      (s_axib_awregion),
+    .s_axib_awlen                         (s_axib_awlen),
+    .s_axib_awsize                        (s_axib_awsize),
+    .s_axib_awburst                       (s_axib_awburst),
+    .s_axib_awvalid                       (s_axib_awvalid),
+    .s_axib_wdata                         (s_axib_wdata),
+    .s_axib_wstrb                         (s_axib_wstrb),
+    .s_axib_wlast                         (s_axib_wlast),
+    .s_axib_wvalid                        (s_axib_wvalid),
+    .s_axib_wuser                         (s_axib_wuser),
+    .s_axib_ruser                         (s_axib_ruser),
+    .s_axib_bready                        (s_axib_bready),
+    .s_axib_arid                          (s_axib_arid),
+    .s_axib_araddr                        (s_axib_araddr),
+    .s_axib_aruser                        (s_axib_aruser),
+    .s_axib_awuser                        (s_axib_awuser),
+    .s_axib_arregion                      (s_axib_arregion),
+    .s_axib_arlen                         (s_axib_arlen),
+    .s_axib_arsize                        (s_axib_arsize),
+    .s_axib_arburst                       (s_axib_arburst),
+    .s_axib_arvalid                       (s_axib_arvalid),
+    .s_axib_rready                        (s_axib_rready),
+    .s_axib_awready                       (s_axib_awready),
+    .s_axib_wready                        (s_axib_wready),
+    .s_axib_bid                           (s_axib_bid),
+    .s_axib_bresp                         (s_axib_bresp),
+    .s_axib_bvalid                        (s_axib_bvalid),
+    .s_axib_arready                       (s_axib_arready),
+    .s_axib_rid                           (s_axib_rid),
+    .s_axib_rdata                         (s_axib_rdata),
+    .s_axib_rresp                         (s_axib_rresp),
+    .s_axib_rlast                         (s_axib_rlast),
+    .s_axib_rvalid                        (s_axib_rvalid),
+
     .axis_c2h_status_drop                 (),     // output wire axis_c2h_status_drop
     .axis_c2h_status_valid                (),     // output wire axis_c2h_status_valid
     .axis_c2h_status_cmp                  (),     // output wire axis_c2h_status_cmp
diff --git a/src/qdma_subsystem/vivado_ip/axi_mm_bram.tcl b/src/qdma_subsystem/vivado_ip/axi_mm_bram.tcl
new file mode 100755
index 0000000..50220a1
--- /dev/null
+++ b/src/qdma_subsystem/vivado_ip/axi_mm_bram.tcl
@@ -0,0 +1,30 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set axi_mm_mem axi_mm_bram
+create_ip -name axi_bram_ctrl -vendor xilinx.com -library ip -module_name $axi_mm_mem -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.SUPPORTS_NARROW_BURST {1}
+    CONFIG.SINGLE_PORT_BRAM {0}
+    CONFIG.ECC_TYPE {0}
+    CONFIG.Component_Name {$axi_mm_mem}
+    CONFIG.BMG_INSTANCE {INTERNAL}
+    CONFIG.MEM_DEPTH {8192}
+    CONFIG.ID_WIDTH {5}
+    CONFIG.RD_CMD_OPTIMIZATION {0}
+} [get_ips $axi_mm_mem]
\ No newline at end of file
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl
index 07b1095..2e1c63e 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl
@@ -17,7 +17,7 @@
 # *************************************************************************
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.mode_selection {Advanced}
     CONFIG.pl_link_cap_max_link_width {X16}
     CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl
index 9a87ceb..206b760 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl
@@ -17,34 +17,23 @@
 # *************************************************************************
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.mode_selection {Advanced}
-    CONFIG.pl_link_cap_max_link_width {X16}
-    CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
-    CONFIG.en_transceiver_status_ports {false}
+    CONFIG.en_gt_selection {true}
+    CONFIG.csr_axilite_slave {true}
     CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal}
-    CONFIG.testname {st}
-    CONFIG.pf1_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.pf2_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.pf3_pciebar2axibar_2 {0x0000000000000000}
+    CONFIG.axibar_highaddr_0 {0x000000FFFFFFFFFF}
     CONFIG.dma_reset_source_sel {Phy_Ready}
     CONFIG.pf0_bar2_scale_qdma {Megabytes}
-    CONFIG.pf0_bar2_size_qdma {4}
     CONFIG.pf1_bar2_scale_qdma {Megabytes}
-    CONFIG.pf1_bar2_size_qdma {4}
     CONFIG.pf2_bar2_scale_qdma {Megabytes}
-    CONFIG.pf2_bar2_size_qdma {4}
     CONFIG.pf3_bar2_scale_qdma {Megabytes}
-    CONFIG.pf3_bar2_size_qdma {4}
-    CONFIG.PF0_MSIX_CAP_TABLE_SIZE_qdma {009}
-    CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.dma_intf_sel_qdma {AXI_Stream_with_Completion}
-    CONFIG.en_axi_mm_qdma {false}
-    CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn}
-    CONFIG.PCIE_BOARD_INTERFACE {pci_express_x16}
-    CONFIG.xlnx_ref_board {AU250}
+    CONFIG.en_bridge_slv {true}
+    CONFIG.dma_intf_sel_qdma {AXI_MM_and_AXI_Stream_with_Completion}
+    CONFIG.en_axi_mm_qdma {true}
+    CONFIG.axibar_notranslate {false}
+    CONFIG.vdm_en {1}
 } [get_ips $qdma]
+
 set_property CONFIG.tl_pf_enable_reg $num_phys_func [get_ips $qdma]
 set_property CONFIG.num_queues $num_queue [get_ips $qdma]
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl
index 5bb9b5c..4b7e1f7 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl
@@ -23,7 +23,7 @@ set_property -dict {
     CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
     CONFIG.en_transceiver_status_ports {false}
     CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal}
-    CONFIG.testname {st}
+    CONFIG.testname {mm_st}
     CONFIG.pf1_pciebar2axibar_2 {0x0000000000000000}
     CONFIG.pf2_pciebar2axibar_2 {0x0000000000000000}
     CONFIG.pf3_pciebar2axibar_2 {0x0000000000000000}
@@ -40,8 +40,8 @@ set_property -dict {
     CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {008}
     CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {008}
     CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.dma_intf_sel_qdma {AXI_Stream_with_Completion}
-    CONFIG.en_axi_mm_qdma {false}
+    CONFIG.dma_intf_sel_qdma {AXI_MM_and_AXI_Stream_with_Completion}
+    CONFIG.en_axi_mm_qdma {true}
     CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn}
     CONFIG.PCIE_BOARD_INTERFACE {pci_express_x16}
     CONFIG.xlnx_ref_board {AU280}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl
new file mode 100644
index 0000000..1f5c3df
--- /dev/null
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au55c.tcl
@@ -0,0 +1,40 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set qdma qdma_no_sriov
+create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.mode_selection {Advanced}
+    CONFIG.en_gt_selection {true}
+    CONFIG.csr_axilite_slave {true}
+    CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal}
+    CONFIG.axibar_highaddr_0 {0x000000FFFFFFFFFF}
+    CONFIG.dma_reset_source_sel {Phy_Ready}
+    CONFIG.pf0_bar2_scale_qdma {Megabytes}
+    CONFIG.pf1_bar2_scale_qdma {Megabytes}
+    CONFIG.pf2_bar2_scale_qdma {Megabytes}
+    CONFIG.pf3_bar2_scale_qdma {Megabytes}
+    CONFIG.en_bridge_slv {true}
+    CONFIG.dma_intf_sel_qdma {AXI_MM_and_AXI_Stream_with_Completion}
+    CONFIG.en_axi_mm_qdma {true}
+    CONFIG.axibar_notranslate {false}
+    CONFIG.vdm_en {1}
+    CONFIG.xlnx_ref_board {AU55C}
+} [get_ips $qdma]
+
+set_property CONFIG.tl_pf_enable_reg $num_phys_func [get_ips $qdma]
+set_property CONFIG.num_queues $num_queue [get_ips $qdma]
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl
index 20082af..6a88fca 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl
@@ -24,7 +24,7 @@ for {set i 0} {$i < $num_phys_func} {incr i} {
 }
 set_property "CONFIG.M0${num_phys_func}_A00_BASE_ADDR" {0x0000000000004000} [get_ips $axi_crossbar]
 set_property "CONFIG.M0${num_phys_func}_A00_ADDR_WIDTH" {12} [get_ips $axi_crossbar]
-set_property -dict { 
+set_property -dict {
     CONFIG.PROTOCOL {AXI4LITE}
     CONFIG.CONNECTIVITY_MODE {SASD}
     CONFIG.R_REGISTER {1}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_csr_cdc.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_csr_cdc.tcl
new file mode 100755
index 0000000..7ee3692
--- /dev/null
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_csr_cdc.tcl
@@ -0,0 +1,34 @@
+# *************************************************************************
+#
+# Copyright 2020 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set axi_clock_converter qdma_subsystem_axi_csr_cdc
+create_ip -name axi_clock_converter -vendor xilinx.com -library ip -module_name $axi_clock_converter -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.PROTOCOL {AXI4LITE}
+    CONFIG.DATA_WIDTH {32}
+    CONFIG.ID_WIDTH {0}
+    CONFIG.AWUSER_WIDTH {0}
+    CONFIG.ARUSER_WIDTH {0}
+    CONFIG.RUSER_WIDTH {0}
+    CONFIG.WUSER_WIDTH {0}
+    CONFIG.BUSER_WIDTH {0}
+    CONFIG.SI_CLK.FREQ_HZ {125000000}
+    CONFIG.MI_CLK.FREQ_HZ {250000000}
+    CONFIG.ACLK_ASYNC {1}
+    CONFIG.SYNCHRONIZATION_STAGES {2}
+    CONFIG.ACLK_RATIO {1:2}
+} [get_ips $axi_clock_converter]
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl
index 0922cba..511ceec 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl
@@ -51,7 +51,7 @@
 # *************************************************************************
 set ecc qdma_subsystem_c2h_ecc
 create_ip -name ecc -vendor xilinx.com -library ip -module_name $ecc -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.C_USE_CLK_ENABLE {true}
     CONFIG.C_REG_OUTPUT {true}
     CONFIG.C_REG_INPUT {false}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl
index ee5a370..bba9cd6 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl
@@ -18,30 +18,39 @@
 set clk_wiz qdma_subsystem_clk_div
 create_ip -name clk_wiz -vendor xilinx.com -library ip -module_name $clk_wiz -dir ${ip_build_dir}
 set_property -dict {
-  CONFIG.PRIMITIVE {Auto}
-  CONFIG.USE_PHASE_ALIGNMENT {true}
-  CONFIG.PRIM_IN_FREQ {250}
-  CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin}
-  CONFIG.CLKIN1_JITTER_PS {40.0}
-  CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {125}
-  CONFIG.CLKOUT1_DRIVES {Buffer}
-  CONFIG.CLKOUT2_DRIVES {Buffer}
-  CONFIG.CLKOUT3_DRIVES {Buffer}
-  CONFIG.CLKOUT4_DRIVES {Buffer}
-  CONFIG.CLKOUT5_DRIVES {Buffer}
-  CONFIG.CLKOUT6_DRIVES {Buffer}
-  CONFIG.CLKOUT7_DRIVES {Buffer}
-  CONFIG.FEEDBACK_SOURCE {FDBK_AUTO}
-  CONFIG.USE_LOCKED {true}
-  CONFIG.USE_RESET {false}
-  CONFIG.MMCM_DIVCLK_DIVIDE {2}
-  CONFIG.MMCM_BANDWIDTH {OPTIMIZED}
-  CONFIG.MMCM_CLKFBOUT_MULT_F {9.625}
-  CONFIG.MMCM_CLKIN1_PERIOD {4.000}
-  CONFIG.MMCM_CLKIN2_PERIOD {10.0}
-  CONFIG.MMCM_COMPENSATION {AUTO}
-  CONFIG.MMCM_CLKOUT0_DIVIDE_F {9.625}
-  CONFIG.AUTO_PRIMITIVE {MMCM}
-  CONFIG.CLKOUT1_JITTER {106.624}
-  CONFIG.CLKOUT1_PHASE_ERROR {85.285}
+    CONFIG.PRIMITIVE {Auto}
+    CONFIG.USE_FREQ_SYNTH {true}
+    CONFIG.USE_PHASE_ALIGNMENT {true}
+    CONFIG.PRIM_IN_FREQ {250.000}
+    CONFIG.JITTER_OPTIONS {PS}
+    CONFIG.CLKOUT2_USED {true}
+    CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {125.000}
+    CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {100.000}
+    CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin}
+    CONFIG.CLKIN1_JITTER_PS {40.000}
+    CONFIG.CLKOUT1_DRIVES {Buffer}
+    CONFIG.CLKOUT2_DRIVES {Buffer}
+    CONFIG.CLKOUT3_DRIVES {Buffer}
+    CONFIG.CLKOUT4_DRIVES {Buffer}
+    CONFIG.CLKOUT5_DRIVES {Buffer}
+    CONFIG.CLKOUT6_DRIVES {Buffer}
+    CONFIG.CLKOUT7_DRIVES {Buffer}
+    CONFIG.FEEDBACK_SOURCE {FDBK_AUTO}
+    CONFIG.USE_LOCKED {false}
+    CONFIG.USE_RESET {false}
+    CONFIG.MMCM_DIVCLK_DIVIDE {1}
+    CONFIG.MMCM_BANDWIDTH {OPTIMIZED}
+    CONFIG.MMCM_CLKFBOUT_MULT_F {4.000}
+    CONFIG.MMCM_CLKIN1_PERIOD {4.000}
+    CONFIG.MMCM_CLKIN2_PERIOD {10.0}
+    CONFIG.MMCM_COMPENSATION {AUTO}
+    CONFIG.MMCM_REF_JITTER2 {0.010}
+    CONFIG.MMCM_CLKOUT0_DIVIDE_F {8.000}
+    CONFIG.MMCM_CLKOUT1_DIVIDE {10}
+    CONFIG.NUM_OUT_CLKS {2}
+    CONFIG.CLKOUT1_JITTER {102.531}
+    CONFIG.CLKOUT1_PHASE_ERROR {85.928}
+    CONFIG.CLKOUT2_JITTER {107.111}
+    CONFIG.CLKOUT2_PHASE_ERROR {85.928}
+    CONFIG.AUTO_PRIMITIVE {MMCM}
 } [get_ips $clk_wiz]
diff --git a/src/qdma_subsystem/vivado_ip/vivado_ip.tcl b/src/qdma_subsystem/vivado_ip/vivado_ip.tcl
index 1159969..3f0c1b7 100644
--- a/src/qdma_subsystem/vivado_ip/vivado_ip.tcl
+++ b/src/qdma_subsystem/vivado_ip/vivado_ip.tcl
@@ -19,6 +19,8 @@ set ips {
     qdma_no_sriov
     qdma_subsystem_clk_div
     qdma_subsystem_axi_cdc
+    qdma_subsystem_axi_csr_cdc
     qdma_subsystem_axi_crossbar
     qdma_subsystem_c2h_ecc
+    axi_mm_bram
 }
diff --git a/src/rdma_subsystem/rdma_subsystem.sv b/src/rdma_subsystem/rdma_subsystem.sv
new file mode 100644
index 0000000..e4b5e7d
--- /dev/null
+++ b/src/rdma_subsystem/rdma_subsystem.sv
@@ -0,0 +1,672 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module rdma_subsystem #(
+  parameter  C_AXIS_DATA_WIDTH = 512,
+  parameter  C_AXIS_KEEP_WIDTH = 64,
+  parameter C_AXIS_IMMDT_WIDTH = 64
+) (
+  // AXIL interface for RDMA control register
+  input  [31:0] s_axil_awaddr,
+  input         s_axil_awvalid,
+  output        s_axil_awready,
+  input  [31:0] s_axil_wdata,
+  input   [3:0] s_axil_wstrb,
+  input         s_axil_wvalid,
+  output        s_axil_wready,
+  input  [31:0] s_axil_araddr,
+  input         s_axil_arvalid,
+  output        s_axil_arready,
+  output [31:0] s_axil_rdata,
+  output        s_axil_rvalid,
+  output  [1:0] s_axil_rresp,
+  input         s_axil_rready,
+  output  [1:0] s_axil_bresp,
+  output        s_axil_bvalid,
+  input         s_axil_bready,
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2cmac_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2cmac_axis_tkeep,
+  output                         m_rdma2cmac_axis_tvalid,
+  output                         m_rdma2cmac_axis_tlast,
+  input                          m_rdma2cmac_axis_tready,
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  input  [C_AXIS_DATA_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tkeep,
+  input                          s_qdma2rdma_non_roce_axis_tvalid,
+  input                          s_qdma2rdma_non_roce_axis_tlast,
+  output                         s_qdma2rdma_non_roce_axis_tready,
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_roce_axis_tkeep,
+  input                          s_cmac2rdma_roce_axis_tvalid,
+  input                          s_cmac2rdma_roce_axis_tlast,
+  input                          s_cmac2rdma_roce_axis_tuser,
+
+  // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tkeep,
+  input                          s_cmac2rdma_non_roce_axis_tvalid,
+  input                          s_cmac2rdma_non_roce_axis_tlast,
+  input                          s_cmac2rdma_non_roce_axis_tuser,
+
+  // Non-RDMA packets bypassing RDMA to QDMA RX
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tkeep,
+  output                         m_rdma2qdma_non_roce_axis_tvalid,
+  output                         m_rdma2qdma_non_roce_axis_tlast,
+  input                          m_rdma2qdma_non_roce_axis_tready,
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  output [C_AXIS_IMMDT_WIDTH-1:0] m_rdma2user_ieth_immdt_axis_tdata,
+  output                          m_rdma2user_ieth_immdt_axis_tlast,
+  output                          m_rdma2user_ieth_immdt_axis_tvalid,
+  input                           m_rdma2user_ieth_immdt_axis_trdy,
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  output           m_axi_rdma_send_write_payload_store_awid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_awaddr,
+  output  [31 : 0] m_axi_rdma_send_write_payload_store_awuser,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_awlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_awburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_awcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awprot,
+  output           m_axi_rdma_send_write_payload_store_awvalid,
+  input            m_axi_rdma_send_write_payload_store_awready,
+  output [511 : 0] m_axi_rdma_send_write_payload_store_wdata,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_wstrb,
+  output           m_axi_rdma_send_write_payload_store_wlast,
+  output           m_axi_rdma_send_write_payload_store_wvalid,
+  input            m_axi_rdma_send_write_payload_store_wready,
+  output           m_axi_rdma_send_write_payload_store_awlock,
+  input            m_axi_rdma_send_write_payload_store_bid,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_bresp,
+  input            m_axi_rdma_send_write_payload_store_bvalid,
+  output           m_axi_rdma_send_write_payload_store_bready,
+  output           m_axi_rdma_send_write_payload_store_arid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_araddr,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_arlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_arburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_arcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arprot,
+  output           m_axi_rdma_send_write_payload_store_arvalid,
+  input            m_axi_rdma_send_write_payload_store_arready,
+  input            m_axi_rdma_send_write_payload_store_rid,
+  input  [511 : 0] m_axi_rdma_send_write_payload_store_rdata,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_rresp,
+  input            m_axi_rdma_send_write_payload_store_rlast,
+  input            m_axi_rdma_send_write_payload_store_rvalid,
+  output           m_axi_rdma_send_write_payload_store_rready,
+  output           m_axi_rdma_send_write_payload_store_arlock,
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  output           m_axi_rdma_rsp_payload_awid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_awaddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_awlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_awburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_awcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awprot,
+  output           m_axi_rdma_rsp_payload_awvalid,
+  input            m_axi_rdma_rsp_payload_awready,
+  output [511 : 0] m_axi_rdma_rsp_payload_wdata,
+  output  [63 : 0] m_axi_rdma_rsp_payload_wstrb,
+  output           m_axi_rdma_rsp_payload_wlast,
+  output           m_axi_rdma_rsp_payload_wvalid,
+  input            m_axi_rdma_rsp_payload_wready,
+  output           m_axi_rdma_rsp_payload_awlock,
+  input            m_axi_rdma_rsp_payload_bid,
+  input    [1 : 0] m_axi_rdma_rsp_payload_bresp,
+  input            m_axi_rdma_rsp_payload_bvalid,
+  output           m_axi_rdma_rsp_payload_bready,
+  output           m_axi_rdma_rsp_payload_arid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_araddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_arlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_arburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_arcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arprot,
+  output           m_axi_rdma_rsp_payload_arvalid,
+  input            m_axi_rdma_rsp_payload_arready,
+  input            m_axi_rdma_rsp_payload_rid,
+  input  [511 : 0] m_axi_rdma_rsp_payload_rdata,
+  input    [1 : 0] m_axi_rdma_rsp_payload_rresp,
+  input            m_axi_rdma_rsp_payload_rlast,
+  input            m_axi_rdma_rsp_payload_rvalid,
+  output           m_axi_rdma_rsp_payload_rready,
+  output           m_axi_rdma_rsp_payload_arlock,
+
+  // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+  output           m_axi_qp_get_wqe_awid,
+  output  [63 : 0] m_axi_qp_get_wqe_awaddr,
+  output   [7 : 0] m_axi_qp_get_wqe_awlen,
+  output   [2 : 0] m_axi_qp_get_wqe_awsize,
+  output   [1 : 0] m_axi_qp_get_wqe_awburst,
+  output   [3 : 0] m_axi_qp_get_wqe_awcache,
+  output   [2 : 0] m_axi_qp_get_wqe_awprot,
+  output           m_axi_qp_get_wqe_awvalid,
+  input            m_axi_qp_get_wqe_awready,
+  output [511 : 0] m_axi_qp_get_wqe_wdata,
+  output  [63 : 0] m_axi_qp_get_wqe_wstrb,
+  output           m_axi_qp_get_wqe_wlast,
+  output           m_axi_qp_get_wqe_wvalid,
+  input            m_axi_qp_get_wqe_wready,
+  output           m_axi_qp_get_wqe_awlock,
+  input            m_axi_qp_get_wqe_bid,
+  input    [1 : 0] m_axi_qp_get_wqe_bresp,
+  input            m_axi_qp_get_wqe_bvalid,
+  output           m_axi_qp_get_wqe_bready,
+  output           m_axi_qp_get_wqe_arid,
+  output  [63 : 0] m_axi_qp_get_wqe_araddr,
+  output   [7 : 0] m_axi_qp_get_wqe_arlen,
+  output   [2 : 0] m_axi_qp_get_wqe_arsize,
+  output   [1 : 0] m_axi_qp_get_wqe_arburst,
+  output   [3 : 0] m_axi_qp_get_wqe_arcache,
+  output   [2 : 0] m_axi_qp_get_wqe_arprot,
+  output           m_axi_qp_get_wqe_arvalid,
+  input            m_axi_qp_get_wqe_arready,
+  input            m_axi_qp_get_wqe_rid,
+  input  [511 : 0] m_axi_qp_get_wqe_rdata,
+  input    [1 : 0] m_axi_qp_get_wqe_rresp,
+  input            m_axi_qp_get_wqe_rlast,
+  input            m_axi_qp_get_wqe_rvalid,
+  output           m_axi_qp_get_wqe_rready,
+  output           m_axi_qp_get_wqe_arlock,
+
+  // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+  output           m_axi_payload_to_retry_buf_awid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_awaddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_awlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_awburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_awcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awprot,
+  output           m_axi_payload_to_retry_buf_awvalid,
+  input            m_axi_payload_to_retry_buf_awready,
+  output [511 : 0] m_axi_payload_to_retry_buf_wdata,
+  output  [63 : 0] m_axi_payload_to_retry_buf_wstrb,
+  output           m_axi_payload_to_retry_buf_wlast,
+  output           m_axi_payload_to_retry_buf_wvalid,
+  input            m_axi_payload_to_retry_buf_wready,
+  output           m_axi_payload_to_retry_buf_awlock,
+  input            m_axi_payload_to_retry_buf_bid,
+  input    [1 : 0] m_axi_payload_to_retry_buf_bresp,
+  input            m_axi_payload_to_retry_buf_bvalid,
+  output           m_axi_payload_to_retry_buf_bready,
+  output           m_axi_payload_to_retry_buf_arid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_araddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_arlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_arburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_arcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arprot,
+  output           m_axi_payload_to_retry_buf_arvalid,
+  input            m_axi_payload_to_retry_buf_arready,
+  input            m_axi_payload_to_retry_buf_rid,
+  input  [511 : 0] m_axi_payload_to_retry_buf_rdata,
+  input    [1 : 0] m_axi_payload_to_retry_buf_rresp,
+  input            m_axi_payload_to_retry_buf_rlast,
+  input            m_axi_payload_to_retry_buf_rvalid,
+  output           m_axi_payload_to_retry_buf_rready,
+  output           m_axi_payload_to_retry_buf_arlock,
+
+  // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+  output           m_axi_pktgen_get_payload_awid,
+  output  [63 : 0] m_axi_pktgen_get_payload_awaddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_awlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_awsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_awburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_awcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_awprot,
+  output           m_axi_pktgen_get_payload_awvalid,
+  input            m_axi_pktgen_get_payload_awready,
+  output [511 : 0] m_axi_pktgen_get_payload_wdata,
+  output  [63 : 0] m_axi_pktgen_get_payload_wstrb,
+  output           m_axi_pktgen_get_payload_wlast,
+  output           m_axi_pktgen_get_payload_wvalid,
+  input            m_axi_pktgen_get_payload_wready,
+  output           m_axi_pktgen_get_payload_awlock,
+  input            m_axi_pktgen_get_payload_bid,
+  input    [1 : 0] m_axi_pktgen_get_payload_bresp,
+  input            m_axi_pktgen_get_payload_bvalid,
+  output           m_axi_pktgen_get_payload_bready,
+  output           m_axi_pktgen_get_payload_arid,
+  output  [63 : 0] m_axi_pktgen_get_payload_araddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_arlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_arsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_arburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_arcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_arprot,
+  output           m_axi_pktgen_get_payload_arvalid,
+  input            m_axi_pktgen_get_payload_arready,
+  input            m_axi_pktgen_get_payload_rid,
+  input  [511 : 0] m_axi_pktgen_get_payload_rdata,
+  input    [1 : 0] m_axi_pktgen_get_payload_rresp,
+  input            m_axi_pktgen_get_payload_rlast,
+  input            m_axi_pktgen_get_payload_rvalid,
+  output           m_axi_pktgen_get_payload_rready,
+  output           m_axi_pktgen_get_payload_arlock,
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  output           m_axi_write_completion_awid,
+  output  [63 : 0] m_axi_write_completion_awaddr,
+  output   [7 : 0] m_axi_write_completion_awlen,
+  output   [2 : 0] m_axi_write_completion_awsize,
+  output   [1 : 0] m_axi_write_completion_awburst,
+  output   [3 : 0] m_axi_write_completion_awcache,
+  output   [2 : 0] m_axi_write_completion_awprot,
+  output           m_axi_write_completion_awvalid,
+  input            m_axi_write_completion_awready,
+  output [511 : 0] m_axi_write_completion_wdata,
+  output  [63 : 0] m_axi_write_completion_wstrb,
+  output           m_axi_write_completion_wlast,
+  output           m_axi_write_completion_wvalid,
+  input            m_axi_write_completion_wready,
+  output           m_axi_write_completion_awlock,
+  input            m_axi_write_completion_bid,
+  input    [1 : 0] m_axi_write_completion_bresp,
+  input            m_axi_write_completion_bvalid,
+  output           m_axi_write_completion_bready,
+  output           m_axi_write_completion_arid,
+  output  [63 : 0] m_axi_write_completion_araddr,
+  output   [7 : 0] m_axi_write_completion_arlen,
+  output   [2 : 0] m_axi_write_completion_arsize,
+  output   [1 : 0] m_axi_write_completion_arburst,
+  output   [3 : 0] m_axi_write_completion_arcache,
+  output   [2 : 0] m_axi_write_completion_arprot,
+  output           m_axi_write_completion_arvalid,
+  input            m_axi_write_completion_arready,
+  input            m_axi_write_completion_rid,
+  input  [511 : 0] m_axi_write_completion_rdata,
+  input    [1 : 0] m_axi_write_completion_rresp,
+  input            m_axi_write_completion_rlast,
+  input            m_axi_write_completion_rvalid,
+  output           m_axi_write_completion_rready,
+  output           m_axi_write_completion_arlock,
+
+  // Send WQE completion queue doorbell
+  output           resp_hndler_o_send_cq_db_cnt_valid,
+  output     [9:0] resp_hndler_o_send_cq_db_addr,
+  output    [31:0] resp_hndler_o_send_cq_db_cnt,
+  input            resp_hndler_i_send_cq_db_rdy,
+
+  // Send WQE producer index doorbell
+  input     [15:0] i_qp_sq_pidb_hndshk,
+  input     [31:0] i_qp_sq_pidb_wr_addr_hndshk,
+  input            i_qp_sq_pidb_wr_valid_hndshk,
+  output           o_qp_sq_pidb_wr_rdy,
+
+  // RDMA-Send consumer index doorbell
+  input     [15:0] i_qp_rq_cidb_hndshk,
+  input     [31:0] i_qp_rq_cidb_wr_addr_hndshk,
+  input            i_qp_rq_cidb_wr_valid_hndshk,
+  output           o_qp_rq_cidb_wr_rdy,
+
+  // RDMA-Send producer index doorbell
+  output    [31:0] rx_pkt_hndler_o_rq_db_data,
+  output     [9:0] rx_pkt_hndler_o_rq_db_addr,
+  output           rx_pkt_hndler_o_rq_db_data_valid,
+  input            rx_pkt_hndler_i_rq_db_rdy,
+
+  output           rnic_intr,
+  input      [8:0] stat_rx_pause_req,
+  output     [8:0] ctl_tx_pause_req,
+  output           ctl_tx_resend_pause,
+
+  output           o_global_dbg_cnt_en,
+  output           o_global_dbg_cnt_clr,
+
+  input  axil_rstn,
+  input  axis_rstn,
+  input  axil_clk,
+  input  axis_clk,
+  output rdma_resetn_done
+);
+
+rdma_core rdma_inst (
+  .s_axi_lite_aclk                   (axil_clk),
+  .s_axi_lite_aresetn                (axil_rstn),
+  .m_axi_aclk                        (axis_clk),
+  .m_axi_aresetn                     (axis_rstn),
+  .cmac_rx_clk                       (axis_clk),
+  .cmac_rx_rst                       (~axis_rstn),
+  .cmac_tx_clk                       (axis_clk),
+  .cmac_tx_rst                       (~axis_rstn),
+  .system_resetn                     (rdma_resetn_done),
+
+  .s_axi_lite_awaddr                 (s_axil_awaddr),
+  .s_axi_lite_awready                (s_axil_awready),
+  .s_axi_lite_awvalid                (s_axil_awvalid),
+  .s_axi_lite_araddr                 (s_axil_araddr),
+  .s_axi_lite_arready                (s_axil_arready),
+  .s_axi_lite_arvalid                (s_axil_arvalid),
+  .s_axi_lite_wdata                  (s_axil_wdata),
+  .s_axi_lite_wstrb                  (s_axil_wstrb),
+  .s_axi_lite_wready                 (s_axil_wready),
+  .s_axi_lite_wvalid                 (s_axil_wvalid),
+  .s_axi_lite_rdata                  (s_axil_rdata),
+  .s_axi_lite_rresp                  (s_axil_rresp),
+  .s_axi_lite_rready                 (s_axil_rready),
+  .s_axi_lite_rvalid                 (s_axil_rvalid),
+  .s_axi_lite_bresp                  (s_axil_bresp),
+  .s_axi_lite_bready                 (s_axil_bready),
+  .s_axi_lite_bvalid                 (s_axil_bvalid),
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  .rx_pkt_hndler_ddr_m_axi_awid      (m_axi_rdma_send_write_payload_store_awid),
+  .rx_pkt_hndler_ddr_m_axi_awaddr    (m_axi_rdma_send_write_payload_store_awaddr),
+  .rx_pkt_hndler_ddr_m_axi_awuser    (m_axi_rdma_send_write_payload_store_awuser),
+  .rx_pkt_hndler_ddr_m_axi_awlen     (m_axi_rdma_send_write_payload_store_awlen),
+  .rx_pkt_hndler_ddr_m_axi_awsize    (m_axi_rdma_send_write_payload_store_awsize),
+  .rx_pkt_hndler_ddr_m_axi_awburst   (m_axi_rdma_send_write_payload_store_awburst),
+  .rx_pkt_hndler_ddr_m_axi_awcache   (m_axi_rdma_send_write_payload_store_awcache),
+  .rx_pkt_hndler_ddr_m_axi_awprot    (m_axi_rdma_send_write_payload_store_awprot),
+  .rx_pkt_hndler_ddr_m_axi_awvalid   (m_axi_rdma_send_write_payload_store_awvalid),
+  .rx_pkt_hndler_ddr_m_axi_awready   (m_axi_rdma_send_write_payload_store_awready),
+  .rx_pkt_hndler_ddr_m_axi_wdata     (m_axi_rdma_send_write_payload_store_wdata),
+  .rx_pkt_hndler_ddr_m_axi_wstrb     (m_axi_rdma_send_write_payload_store_wstrb),
+  .rx_pkt_hndler_ddr_m_axi_wlast     (m_axi_rdma_send_write_payload_store_wlast),
+  .rx_pkt_hndler_ddr_m_axi_wvalid    (m_axi_rdma_send_write_payload_store_wvalid),
+  .rx_pkt_hndler_ddr_m_axi_wready    (m_axi_rdma_send_write_payload_store_wready),
+  .rx_pkt_hndler_ddr_m_axi_awlock    (m_axi_rdma_send_write_payload_store_awlock),
+  .rx_pkt_hndler_ddr_m_axi_bid       (m_axi_rdma_send_write_payload_store_bid),
+  .rx_pkt_hndler_ddr_m_axi_bresp     (m_axi_rdma_send_write_payload_store_bresp),
+  .rx_pkt_hndler_ddr_m_axi_bvalid    (m_axi_rdma_send_write_payload_store_bvalid),
+  .rx_pkt_hndler_ddr_m_axi_bready    (m_axi_rdma_send_write_payload_store_bready),
+  .rx_pkt_hndler_ddr_m_axi_arid      (m_axi_rdma_send_write_payload_store_arid),
+  .rx_pkt_hndler_ddr_m_axi_araddr    (m_axi_rdma_send_write_payload_store_araddr),
+  .rx_pkt_hndler_ddr_m_axi_arlen     (m_axi_rdma_send_write_payload_store_arlen),
+  .rx_pkt_hndler_ddr_m_axi_arsize    (m_axi_rdma_send_write_payload_store_arsize),
+  .rx_pkt_hndler_ddr_m_axi_arburst   (m_axi_rdma_send_write_payload_store_arburst),
+  .rx_pkt_hndler_ddr_m_axi_arcache   (m_axi_rdma_send_write_payload_store_arcache),
+  .rx_pkt_hndler_ddr_m_axi_arprot    (m_axi_rdma_send_write_payload_store_arprot),
+  .rx_pkt_hndler_ddr_m_axi_arvalid   (m_axi_rdma_send_write_payload_store_arvalid),
+  .rx_pkt_hndler_ddr_m_axi_arready   (m_axi_rdma_send_write_payload_store_arready),
+  .rx_pkt_hndler_ddr_m_axi_rid       (m_axi_rdma_send_write_payload_store_rid),
+  .rx_pkt_hndler_ddr_m_axi_rdata     (m_axi_rdma_send_write_payload_store_rdata),
+  .rx_pkt_hndler_ddr_m_axi_rresp     (m_axi_rdma_send_write_payload_store_rresp),
+  .rx_pkt_hndler_ddr_m_axi_rlast     (m_axi_rdma_send_write_payload_store_rlast),
+  .rx_pkt_hndler_ddr_m_axi_rvalid    (m_axi_rdma_send_write_payload_store_rvalid),
+  .rx_pkt_hndler_ddr_m_axi_rready    (m_axi_rdma_send_write_payload_store_rready),
+  .rx_pkt_hndler_ddr_m_axi_arlock    (m_axi_rdma_send_write_payload_store_arlock),
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  .rx_pkt_hndler_rdrsp_m_axi_awid    (m_axi_rdma_rsp_payload_awid),
+  .rx_pkt_hndler_rdrsp_m_axi_awaddr  (m_axi_rdma_rsp_payload_awaddr),
+  .rx_pkt_hndler_rdrsp_m_axi_awlen   (m_axi_rdma_rsp_payload_awlen),
+  .rx_pkt_hndler_rdrsp_m_axi_awsize  (m_axi_rdma_rsp_payload_awsize),
+  .rx_pkt_hndler_rdrsp_m_axi_awburst (m_axi_rdma_rsp_payload_awburst),
+  .rx_pkt_hndler_rdrsp_m_axi_awcache (m_axi_rdma_rsp_payload_awcache),
+  .rx_pkt_hndler_rdrsp_m_axi_awprot  (m_axi_rdma_rsp_payload_awprot),
+  .rx_pkt_hndler_rdrsp_m_axi_awvalid (m_axi_rdma_rsp_payload_awvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_awready (m_axi_rdma_rsp_payload_awready),
+  .rx_pkt_hndler_rdrsp_m_axi_wdata   (m_axi_rdma_rsp_payload_wdata),
+  .rx_pkt_hndler_rdrsp_m_axi_wstrb   (m_axi_rdma_rsp_payload_wstrb),
+  .rx_pkt_hndler_rdrsp_m_axi_wlast   (m_axi_rdma_rsp_payload_wlast),
+  .rx_pkt_hndler_rdrsp_m_axi_wvalid  (m_axi_rdma_rsp_payload_wvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_wready  (m_axi_rdma_rsp_payload_wready),
+  .rx_pkt_hndler_rdrsp_m_axi_awlock  (m_axi_rdma_rsp_payload_awlock),
+  .rx_pkt_hndler_rdrsp_m_axi_bid     (m_axi_rdma_rsp_payload_bid),
+  .rx_pkt_hndler_rdrsp_m_axi_bresp   (m_axi_rdma_rsp_payload_bresp),
+  .rx_pkt_hndler_rdrsp_m_axi_bvalid  (m_axi_rdma_rsp_payload_bvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_bready  (m_axi_rdma_rsp_payload_bready),
+  .rx_pkt_hndler_rdrsp_m_axi_arid    (m_axi_rdma_rsp_payload_arid),
+  .rx_pkt_hndler_rdrsp_m_axi_araddr  (m_axi_rdma_rsp_payload_araddr),
+  .rx_pkt_hndler_rdrsp_m_axi_arlen   (m_axi_rdma_rsp_payload_arlen),
+  .rx_pkt_hndler_rdrsp_m_axi_arsize  (m_axi_rdma_rsp_payload_arsize),
+  .rx_pkt_hndler_rdrsp_m_axi_arburst (m_axi_rdma_rsp_payload_arburst),
+  .rx_pkt_hndler_rdrsp_m_axi_arcache (m_axi_rdma_rsp_payload_arcache),
+  .rx_pkt_hndler_rdrsp_m_axi_arprot  (m_axi_rdma_rsp_payload_arprot),
+  .rx_pkt_hndler_rdrsp_m_axi_arvalid (m_axi_rdma_rsp_payload_arvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_arready (m_axi_rdma_rsp_payload_arready),
+  .rx_pkt_hndler_rdrsp_m_axi_rid     (m_axi_rdma_rsp_payload_rid),
+  .rx_pkt_hndler_rdrsp_m_axi_rdata   (m_axi_rdma_rsp_payload_rdata),
+  .rx_pkt_hndler_rdrsp_m_axi_rresp   (m_axi_rdma_rsp_payload_rresp),
+  .rx_pkt_hndler_rdrsp_m_axi_rlast   (m_axi_rdma_rsp_payload_rlast),
+  .rx_pkt_hndler_rdrsp_m_axi_rvalid  (m_axi_rdma_rsp_payload_rvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_rready  (m_axi_rdma_rsp_payload_rready),
+  .rx_pkt_hndler_rdrsp_m_axi_arlock  (m_axi_rdma_rsp_payload_arlock),
+
+  // RDMA AXI MM interface used to fetch WQE entries in the send queue from DDR by the QP manage
+  .qp_mgr_m_axi_awid                 (m_axi_qp_get_wqe_awid),
+  .qp_mgr_m_axi_awaddr               (m_axi_qp_get_wqe_awaddr),
+  .qp_mgr_m_axi_awlen                (m_axi_qp_get_wqe_awlen),
+  .qp_mgr_m_axi_awsize               (m_axi_qp_get_wqe_awsize),
+  .qp_mgr_m_axi_awburst              (m_axi_qp_get_wqe_awburst),
+  .qp_mgr_m_axi_awcache              (m_axi_qp_get_wqe_awcache),
+  .qp_mgr_m_axi_awprot               (m_axi_qp_get_wqe_awprot),
+  .qp_mgr_m_axi_awvalid              (m_axi_qp_get_wqe_awvalid),
+  .qp_mgr_m_axi_awready              (m_axi_qp_get_wqe_awready),
+  .qp_mgr_m_axi_wdata                (m_axi_qp_get_wqe_wdata),
+  .qp_mgr_m_axi_wstrb                (m_axi_qp_get_wqe_wstrb),
+  .qp_mgr_m_axi_wlast                (m_axi_qp_get_wqe_wlast),
+  .qp_mgr_m_axi_wvalid               (m_axi_qp_get_wqe_wvalid),
+  .qp_mgr_m_axi_wready               (m_axi_qp_get_wqe_wready),
+  .qp_mgr_m_axi_awlock               (m_axi_qp_get_wqe_awlock),
+  .qp_mgr_m_axi_bid                  (m_axi_qp_get_wqe_bid),
+  .qp_mgr_m_axi_bresp                (m_axi_qp_get_wqe_bresp),
+  .qp_mgr_m_axi_bvalid               (m_axi_qp_get_wqe_bvalid),
+  .qp_mgr_m_axi_bready               (m_axi_qp_get_wqe_bready),
+  .qp_mgr_m_axi_arid                 (m_axi_qp_get_wqe_arid),
+  .qp_mgr_m_axi_araddr               (m_axi_qp_get_wqe_araddr),
+  .qp_mgr_m_axi_arlen                (m_axi_qp_get_wqe_arlen),
+  .qp_mgr_m_axi_arsize               (m_axi_qp_get_wqe_arsize),
+  .qp_mgr_m_axi_arburst              (m_axi_qp_get_wqe_arburst),
+  .qp_mgr_m_axi_arcache              (m_axi_qp_get_wqe_arcache),
+  .qp_mgr_m_axi_arprot               (m_axi_qp_get_wqe_arprot),
+  .qp_mgr_m_axi_arvalid              (m_axi_qp_get_wqe_arvalid),
+  .qp_mgr_m_axi_arready              (m_axi_qp_get_wqe_arready),
+  .qp_mgr_m_axi_rid                  (m_axi_qp_get_wqe_rid),
+  .qp_mgr_m_axi_rdata                (m_axi_qp_get_wqe_rdata),
+  .qp_mgr_m_axi_rresp                (m_axi_qp_get_wqe_rresp),
+  .qp_mgr_m_axi_rlast                (m_axi_qp_get_wqe_rlast),
+  .qp_mgr_m_axi_rvalid               (m_axi_qp_get_wqe_rvalid),
+  .qp_mgr_m_axi_rready               (m_axi_qp_get_wqe_rready),
+  .qp_mgr_m_axi_arlock               (m_axi_qp_get_wqe_arlock),
+
+  // RDMA TX interface to CMAC TX path in AXIS format
+  .cmac_m_axis_tdata                 (m_rdma2cmac_axis_tdata),
+  .cmac_m_axis_tkeep                 (m_rdma2cmac_axis_tkeep),
+  .cmac_m_axis_tvalid                (m_rdma2cmac_axis_tvalid),
+  .cmac_m_axis_tlast                 (m_rdma2cmac_axis_tlast),
+  .cmac_m_axis_tready                (m_rdma2cmac_axis_tready),
+
+  // store payload of an outgoing RDMA write packet to a retry buffer
+  // .wqe_proc_wr_ddr_m_axi_awid        (m_axi_payload_to_retry_buf_awid),
+  // .wqe_proc_wr_ddr_m_axi_awaddr      (m_axi_payload_to_retry_buf_awaddr),
+  // .wqe_proc_wr_ddr_m_axi_awlen       (m_axi_payload_to_retry_buf_awlen),
+  // .wqe_proc_wr_ddr_m_axi_awsize      (m_axi_payload_to_retry_buf_awsize),
+  // .wqe_proc_wr_ddr_m_axi_awburst     (m_axi_payload_to_retry_buf_awburst),
+  // .wqe_proc_wr_ddr_m_axi_awcache     (m_axi_payload_to_retry_buf_awcache),
+  // .wqe_proc_wr_ddr_m_axi_awprot      (m_axi_payload_to_retry_buf_awprot),
+  // .wqe_proc_wr_ddr_m_axi_awvalid     (m_axi_payload_to_retry_buf_awvalid),
+  // .wqe_proc_wr_ddr_m_axi_awready     (m_axi_payload_to_retry_buf_awready),
+  // .wqe_proc_wr_ddr_m_axi_wdata       (m_axi_payload_to_retry_buf_wdata),
+  // .wqe_proc_wr_ddr_m_axi_wstrb       (m_axi_payload_to_retry_buf_wstrb),
+  // .wqe_proc_wr_ddr_m_axi_wlast       (m_axi_payload_to_retry_buf_wlast),
+  // .wqe_proc_wr_ddr_m_axi_wvalid      (m_axi_payload_to_retry_buf_wvalid),
+  // .wqe_proc_wr_ddr_m_axi_wready      (m_axi_payload_to_retry_buf_wready),
+  // .wqe_proc_wr_ddr_m_axi_awlock      (m_axi_payload_to_retry_buf_awlock),
+  // .wqe_proc_wr_ddr_m_axi_bid         (m_axi_payload_to_retry_buf_bid),
+  // .wqe_proc_wr_ddr_m_axi_bresp       (m_axi_payload_to_retry_buf_bresp),
+  // .wqe_proc_wr_ddr_m_axi_bvalid      (m_axi_payload_to_retry_buf_bvalid),
+  // .wqe_proc_wr_ddr_m_axi_bready      (m_axi_payload_to_retry_buf_bready),
+  // .wqe_proc_wr_ddr_m_axi_arid        (m_axi_payload_to_retry_buf_arid),
+  // .wqe_proc_wr_ddr_m_axi_araddr      (m_axi_payload_to_retry_buf_araddr),
+  // .wqe_proc_wr_ddr_m_axi_arlen       (m_axi_payload_to_retry_buf_arlen),
+  // .wqe_proc_wr_ddr_m_axi_arsize      (m_axi_payload_to_retry_buf_arsize),
+  // .wqe_proc_wr_ddr_m_axi_arburst     (m_axi_payload_to_retry_buf_arburst),
+  // .wqe_proc_wr_ddr_m_axi_arcache     (m_axi_payload_to_retry_buf_arcache),
+  // .wqe_proc_wr_ddr_m_axi_arprot      (m_axi_payload_to_retry_buf_arprot),
+  // .wqe_proc_wr_ddr_m_axi_arvalid     (m_axi_payload_to_retry_buf_arvalid),
+  // .wqe_proc_wr_ddr_m_axi_arready     (m_axi_payload_to_retry_buf_arready),
+  // .wqe_proc_wr_ddr_m_axi_rid         (m_axi_payload_to_retry_buf_rid),
+  // .wqe_proc_wr_ddr_m_axi_rdata       (m_axi_payload_to_retry_buf_rdata),
+  // .wqe_proc_wr_ddr_m_axi_rresp       (m_axi_payload_to_retry_buf_rresp),
+  // .wqe_proc_wr_ddr_m_axi_rlast       (m_axi_payload_to_retry_buf_rlast),
+  // .wqe_proc_wr_ddr_m_axi_rvalid      (m_axi_payload_to_retry_buf_rvalid),
+  // .wqe_proc_wr_ddr_m_axi_rready      (m_axi_payload_to_retry_buf_rready),
+  // .wqe_proc_wr_ddr_m_axi_arlock      (m_axi_payload_to_retry_buf_arlock),
+
+  // Acquire payload data for RDMA send/write/read response packet generation
+  .wqe_proc_top_m_axi_awid           (m_axi_pktgen_get_payload_awid),
+  .wqe_proc_top_m_axi_awaddr         (m_axi_pktgen_get_payload_awaddr),
+  .wqe_proc_top_m_axi_awlen          (m_axi_pktgen_get_payload_awlen),
+  .wqe_proc_top_m_axi_awsize         (m_axi_pktgen_get_payload_awsize),
+  .wqe_proc_top_m_axi_awburst        (m_axi_pktgen_get_payload_awburst),
+  .wqe_proc_top_m_axi_awcache        (m_axi_pktgen_get_payload_awcache),
+  .wqe_proc_top_m_axi_awprot         (m_axi_pktgen_get_payload_awprot),
+  .wqe_proc_top_m_axi_awvalid        (m_axi_pktgen_get_payload_awvalid),
+  .wqe_proc_top_m_axi_awready        (m_axi_pktgen_get_payload_awready),
+  .wqe_proc_top_m_axi_wdata          (m_axi_pktgen_get_payload_wdata),
+  .wqe_proc_top_m_axi_wstrb          (m_axi_pktgen_get_payload_wstrb),
+  .wqe_proc_top_m_axi_wlast          (m_axi_pktgen_get_payload_wlast),
+  .wqe_proc_top_m_axi_wvalid         (m_axi_pktgen_get_payload_wvalid),
+  .wqe_proc_top_m_axi_wready         (m_axi_pktgen_get_payload_wready),
+  .wqe_proc_top_m_axi_awlock         (m_axi_pktgen_get_payload_awlock),
+  .wqe_proc_top_m_axi_bid            (m_axi_pktgen_get_payload_bid),
+  .wqe_proc_top_m_axi_bresp          (m_axi_pktgen_get_payload_bresp),
+  .wqe_proc_top_m_axi_bvalid         (m_axi_pktgen_get_payload_bvalid),
+  .wqe_proc_top_m_axi_bready         (m_axi_pktgen_get_payload_bready),
+  .wqe_proc_top_m_axi_arid           (m_axi_pktgen_get_payload_arid),
+  .wqe_proc_top_m_axi_araddr         (m_axi_pktgen_get_payload_araddr),
+  .wqe_proc_top_m_axi_arlen          (m_axi_pktgen_get_payload_arlen),
+  .wqe_proc_top_m_axi_arsize         (m_axi_pktgen_get_payload_arsize),
+  .wqe_proc_top_m_axi_arburst        (m_axi_pktgen_get_payload_arburst),
+  .wqe_proc_top_m_axi_arcache        (m_axi_pktgen_get_payload_arcache),
+  .wqe_proc_top_m_axi_arprot         (m_axi_pktgen_get_payload_arprot),
+  .wqe_proc_top_m_axi_arvalid        (m_axi_pktgen_get_payload_arvalid),
+  .wqe_proc_top_m_axi_arready        (m_axi_pktgen_get_payload_arready),
+  .wqe_proc_top_m_axi_rid            (m_axi_pktgen_get_payload_rid),
+  .wqe_proc_top_m_axi_rdata          (m_axi_pktgen_get_payload_rdata),
+  .wqe_proc_top_m_axi_rresp          (m_axi_pktgen_get_payload_rresp),
+  .wqe_proc_top_m_axi_rlast          (m_axi_pktgen_get_payload_rlast),
+  .wqe_proc_top_m_axi_rvalid         (m_axi_pktgen_get_payload_rvalid),
+  .wqe_proc_top_m_axi_rready         (m_axi_pktgen_get_payload_rready),
+  .wqe_proc_top_m_axi_arlock         (m_axi_pktgen_get_payload_arlock),
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  .resp_hndler_m_axi_awid            (m_axi_write_completion_awid),
+  .resp_hndler_m_axi_awaddr          (m_axi_write_completion_awaddr),
+  .resp_hndler_m_axi_awlen           (m_axi_write_completion_awlen),
+  .resp_hndler_m_axi_awsize          (m_axi_write_completion_awsize),
+  .resp_hndler_m_axi_awburst         (m_axi_write_completion_awburst),
+  .resp_hndler_m_axi_awcache         (m_axi_write_completion_awcache),
+  .resp_hndler_m_axi_awprot          (m_axi_write_completion_awprot),
+  .resp_hndler_m_axi_awvalid         (m_axi_write_completion_awvalid),
+  .resp_hndler_m_axi_awready         (m_axi_write_completion_awready),
+  .resp_hndler_m_axi_wdata           (m_axi_write_completion_wdata),
+  .resp_hndler_m_axi_wstrb           (m_axi_write_completion_wstrb),
+  .resp_hndler_m_axi_wlast           (m_axi_write_completion_wlast),
+  .resp_hndler_m_axi_wvalid          (m_axi_write_completion_wvalid),
+  .resp_hndler_m_axi_wready          (m_axi_write_completion_wready),
+  .resp_hndler_m_axi_awlock          (m_axi_write_completion_awlock),
+  .resp_hndler_m_axi_bid             (m_axi_write_completion_bid),
+  .resp_hndler_m_axi_bresp           (m_axi_write_completion_bresp),
+  .resp_hndler_m_axi_bvalid          (m_axi_write_completion_bvalid),
+  .resp_hndler_m_axi_bready          (m_axi_write_completion_bready),
+  .resp_hndler_m_axi_arid            (m_axi_write_completion_arid),
+  .resp_hndler_m_axi_araddr          (m_axi_write_completion_araddr),
+  .resp_hndler_m_axi_arlen           (m_axi_write_completion_arlen),
+  .resp_hndler_m_axi_arsize          (m_axi_write_completion_arsize),
+  .resp_hndler_m_axi_arburst         (m_axi_write_completion_arburst),
+  .resp_hndler_m_axi_arcache         (m_axi_write_completion_arcache),
+  .resp_hndler_m_axi_arprot          (m_axi_write_completion_arprot),
+  .resp_hndler_m_axi_arvalid         (m_axi_write_completion_arvalid),
+  .resp_hndler_m_axi_arready         (m_axi_write_completion_arready),
+  .resp_hndler_m_axi_rid             (m_axi_write_completion_rid),
+  .resp_hndler_m_axi_rdata           (m_axi_write_completion_rdata),
+  .resp_hndler_m_axi_rresp           (m_axi_write_completion_rresp),
+  .resp_hndler_m_axi_rlast           (m_axi_write_completion_rlast),
+  .resp_hndler_m_axi_rvalid          (m_axi_write_completion_rvalid),
+  .resp_hndler_m_axi_rready          (m_axi_write_completion_rready),
+  .resp_hndler_m_axi_arlock          (m_axi_write_completion_arlock),
+
+  // Send WQE completion queue doorbell
+  .resp_hndler_o_send_cq_db_cnt_valid(resp_hndler_o_send_cq_db_cnt_valid),
+  .resp_hndler_o_send_cq_db_addr     (resp_hndler_o_send_cq_db_addr),
+  .resp_hndler_o_send_cq_db_cnt      (resp_hndler_o_send_cq_db_cnt),
+  .resp_hndler_i_send_cq_db_rdy      (resp_hndler_i_send_cq_db_rdy),
+
+  // RDMA-Send consumer index doorbell
+  .i_qp_rq_cidb_hndshk               (i_qp_rq_cidb_hndshk),
+  .i_qp_rq_cidb_wr_addr_hndshk       (i_qp_rq_cidb_wr_addr_hndshk),
+  .i_qp_rq_cidb_wr_valid_hndshk      (i_qp_rq_cidb_wr_valid_hndshk),
+  .o_qp_rq_cidb_wr_rdy               (o_qp_rq_cidb_wr_rdy),
+
+  // Send WQE producer index doorbell
+  .i_qp_sq_pidb_hndshk               (i_qp_sq_pidb_hndshk),
+  .i_qp_sq_pidb_wr_addr_hndshk       (i_qp_sq_pidb_wr_addr_hndshk),
+  .i_qp_sq_pidb_wr_valid_hndshk      (i_qp_sq_pidb_wr_valid_hndshk),
+  .o_qp_sq_pidb_wr_rdy               (o_qp_sq_pidb_wr_rdy),
+
+  // RDMA-Send producer index doorbell
+  .rx_pkt_hndler_o_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+  .rx_pkt_hndler_o_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+  .rx_pkt_hndler_o_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+  .rx_pkt_hndler_i_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+  // RDMA RX interface from CMAC RX path in AXIS format
+  .roce_cmac_s_axis_tvalid           (s_cmac2rdma_roce_axis_tvalid),
+  .roce_cmac_s_axis_tdata            (s_cmac2rdma_roce_axis_tdata),
+  .roce_cmac_s_axis_tkeep            (s_cmac2rdma_roce_axis_tkeep),
+  .roce_cmac_s_axis_tlast            (s_cmac2rdma_roce_axis_tlast),
+  .roce_cmac_s_axis_tuser            (s_cmac2rdma_roce_axis_tuser),
+
+  // Non-RDMA packets from CMAC RX path in AXIS format
+  .non_roce_cmac_s_axis_tvalid       (s_cmac2rdma_non_roce_axis_tvalid),
+  .non_roce_cmac_s_axis_tdata        (s_cmac2rdma_non_roce_axis_tdata),
+  .non_roce_cmac_s_axis_tkeep        (s_cmac2rdma_non_roce_axis_tkeep),
+  .non_roce_cmac_s_axis_tlast        (s_cmac2rdma_non_roce_axis_tlast),
+  .non_roce_cmac_s_axis_tuser        (s_cmac2rdma_non_roce_axis_tuser),
+
+  // Non-RDMA packets from QDMA TX path in AXIS format bypassing RDMA core
+  .non_roce_dma_s_axis_tvalid        (s_qdma2rdma_non_roce_axis_tvalid),
+  .non_roce_dma_s_axis_tdata         (s_qdma2rdma_non_roce_axis_tdata),
+  .non_roce_dma_s_axis_tkeep         (s_qdma2rdma_non_roce_axis_tkeep),
+  .non_roce_dma_s_axis_tlast         (s_qdma2rdma_non_roce_axis_tlast),
+  .non_roce_dma_s_axis_tready        (s_qdma2rdma_non_roce_axis_tready),
+
+  // Non-RDMA packets in AXIS format from CMAC RX path bypassing RDMA core to QDMA RX
+  .non_roce_dma_m_axis_tvalid        (m_rdma2qdma_non_roce_axis_tvalid),
+  .non_roce_dma_m_axis_tdata         (m_rdma2qdma_non_roce_axis_tdata),
+  .non_roce_dma_m_axis_tkeep         (m_rdma2qdma_non_roce_axis_tkeep),
+  .non_roce_dma_m_axis_tlast         (m_rdma2qdma_non_roce_axis_tlast),
+  .non_roce_dma_m_axis_tready        (m_rdma2qdma_non_roce_axis_tready),
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  .ieth_immdt_axis_tvalid            (m_rdma2user_ieth_immdt_axis_tvalid),
+  .ieth_immdt_axis_tlast             (m_rdma2user_ieth_immdt_axis_tlast),
+  .ieth_immdt_axis_tdata             (m_rdma2user_ieth_immdt_axis_tdata),
+  .ieth_immdt_axis_trdy              (m_rdma2user_ieth_immdt_axis_trdy),
+
+  .rnic_intr                         (rnic_intr),
+  .stat_rx_pause_req                 (stat_rx_pause_req),
+  .ctl_tx_pause_req                  (ctl_tx_pause_req),
+  .ctl_tx_resend_pause               (ctl_tx_resend_pause),
+  .o_global_dbg_cnt_en               (o_global_dbg_cnt_en),
+  .o_global_dbg_cnt_clr              (o_global_dbg_cnt_clr)
+);
+
+endmodule : rdma_subsystem
diff --git a/src/rdma_subsystem/rdma_subsystem_wrapper.sv b/src/rdma_subsystem/rdma_subsystem_wrapper.sv
new file mode 100644
index 0000000..a927ab4
--- /dev/null
+++ b/src/rdma_subsystem/rdma_subsystem_wrapper.sv
@@ -0,0 +1,701 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+//
+// rdma_subsystem_wrapper
+// -- wrapper for the rdma subsystem
+// -- retry buffer and doorbell update from user logic are disabled at the
+//    moment. We will add these features in the future version
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module rdma_subsystem_wrapper #(
+  parameter C_AXIS_DATA_WIDTH  = 512,
+  parameter C_AXIS_KEEP_WIDTH  = 64,
+  parameter C_AXIS_IMMDT_WIDTH = 64
+) (
+  // AXIL interface for RDMA control register
+  (* mark_debug = "true" *) input  [31:0] s_axil_awaddr,
+  (* mark_debug = "true" *) input         s_axil_awvalid,
+  (* mark_debug = "true" *) output        s_axil_awready,
+  (* mark_debug = "true" *) input  [31:0] s_axil_wdata,
+  (* mark_debug = "true" *) input   [3:0] s_axil_wstrb,
+  (* mark_debug = "true" *) input         s_axil_wvalid,
+  (* mark_debug = "true" *) output        s_axil_wready,
+  (* mark_debug = "true" *) input  [31:0] s_axil_araddr,
+  (* mark_debug = "true" *) input         s_axil_arvalid,
+  (* mark_debug = "true" *) output        s_axil_arready,
+  (* mark_debug = "true" *) output [31:0] s_axil_rdata,
+  (* mark_debug = "true" *) output        s_axil_rvalid,
+  (* mark_debug = "true" *) output  [1:0] s_axil_rresp,
+  (* mark_debug = "true" *) input         s_axil_rready,
+  (* mark_debug = "true" *) output  [1:0] s_axil_bresp,
+  (* mark_debug = "true" *) output        s_axil_bvalid,
+  (* mark_debug = "true" *) input         s_axil_bready,
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2cmac_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2cmac_axis_tkeep,
+  output                         m_rdma2cmac_axis_tvalid,
+  output                         m_rdma2cmac_axis_tlast,
+  input                          m_rdma2cmac_axis_tready,
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  input  [C_AXIS_DATA_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tkeep,
+  input                          s_qdma2rdma_non_roce_axis_tvalid,
+  input                          s_qdma2rdma_non_roce_axis_tlast,
+  output                         s_qdma2rdma_non_roce_axis_tready,
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_roce_axis_tkeep,
+  input                          s_cmac2rdma_roce_axis_tvalid,
+  input                          s_cmac2rdma_roce_axis_tlast,
+  input                          s_cmac2rdma_roce_axis_tuser,
+
+  // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tkeep,
+  input                          s_cmac2rdma_non_roce_axis_tvalid,
+  input                          s_cmac2rdma_non_roce_axis_tlast,
+  input                          s_cmac2rdma_non_roce_axis_tuser,
+
+  // Non-RDMA packets bypassing RDMA to QDMA RX
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tkeep,
+  output                         m_rdma2qdma_non_roce_axis_tvalid,
+  output                         m_rdma2qdma_non_roce_axis_tlast,
+  input                          m_rdma2qdma_non_roce_axis_tready,
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  output [C_AXIS_IMMDT_WIDTH-1:0] m_rdma2user_ieth_immdt_axis_tdata,
+  output                          m_rdma2user_ieth_immdt_axis_tlast,
+  output                          m_rdma2user_ieth_immdt_axis_tvalid,
+  input                           m_rdma2user_ieth_immdt_axis_trdy,
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  output           m_axi_rdma_send_write_payload_store_awid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_awaddr,
+  output  [31 : 0] m_axi_rdma_send_write_payload_store_awuser,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_awlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_awburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_awcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awprot,
+  output           m_axi_rdma_send_write_payload_store_awvalid,
+  input            m_axi_rdma_send_write_payload_store_awready,
+  output [511 : 0] m_axi_rdma_send_write_payload_store_wdata,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_wstrb,
+  output           m_axi_rdma_send_write_payload_store_wlast,
+  output           m_axi_rdma_send_write_payload_store_wvalid,
+  input            m_axi_rdma_send_write_payload_store_wready,
+  output           m_axi_rdma_send_write_payload_store_awlock,
+  input            m_axi_rdma_send_write_payload_store_bid,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_bresp,
+  input            m_axi_rdma_send_write_payload_store_bvalid,
+  output           m_axi_rdma_send_write_payload_store_bready,
+  output           m_axi_rdma_send_write_payload_store_arid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_araddr,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_arlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_arburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_arcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arprot,
+  output           m_axi_rdma_send_write_payload_store_arvalid,
+  input            m_axi_rdma_send_write_payload_store_arready,
+  input            m_axi_rdma_send_write_payload_store_rid,
+  input  [511 : 0] m_axi_rdma_send_write_payload_store_rdata,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_rresp,
+  input            m_axi_rdma_send_write_payload_store_rlast,
+  input            m_axi_rdma_send_write_payload_store_rvalid,
+  output           m_axi_rdma_send_write_payload_store_rready,
+  output           m_axi_rdma_send_write_payload_store_arlock,
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  output           m_axi_rdma_rsp_payload_awid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_awaddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_awlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_awburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_awcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awprot,
+  output           m_axi_rdma_rsp_payload_awvalid,
+  input            m_axi_rdma_rsp_payload_awready,
+  output [511 : 0] m_axi_rdma_rsp_payload_wdata,
+  output  [63 : 0] m_axi_rdma_rsp_payload_wstrb,
+  output           m_axi_rdma_rsp_payload_wlast,
+  output           m_axi_rdma_rsp_payload_wvalid,
+  input            m_axi_rdma_rsp_payload_wready,
+  output           m_axi_rdma_rsp_payload_awlock,
+  input            m_axi_rdma_rsp_payload_bid,
+  input    [1 : 0] m_axi_rdma_rsp_payload_bresp,
+  input            m_axi_rdma_rsp_payload_bvalid,
+  output           m_axi_rdma_rsp_payload_bready,
+  output           m_axi_rdma_rsp_payload_arid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_araddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_arlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_arburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_arcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arprot,
+  output           m_axi_rdma_rsp_payload_arvalid,
+  input            m_axi_rdma_rsp_payload_arready,
+  input            m_axi_rdma_rsp_payload_rid,
+  input  [511 : 0] m_axi_rdma_rsp_payload_rdata,
+  input    [1 : 0] m_axi_rdma_rsp_payload_rresp,
+  input            m_axi_rdma_rsp_payload_rlast,
+  input            m_axi_rdma_rsp_payload_rvalid,
+  output           m_axi_rdma_rsp_payload_rready,
+  output           m_axi_rdma_rsp_payload_arlock,
+
+  // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+  output           m_axi_qp_get_wqe_awid,
+  output  [63 : 0] m_axi_qp_get_wqe_awaddr,
+  output   [7 : 0] m_axi_qp_get_wqe_awlen,
+  output   [2 : 0] m_axi_qp_get_wqe_awsize,
+  output   [1 : 0] m_axi_qp_get_wqe_awburst,
+  output   [3 : 0] m_axi_qp_get_wqe_awcache,
+  output   [2 : 0] m_axi_qp_get_wqe_awprot,
+  output           m_axi_qp_get_wqe_awvalid,
+  input            m_axi_qp_get_wqe_awready,
+  output [511 : 0] m_axi_qp_get_wqe_wdata,
+  output  [63 : 0] m_axi_qp_get_wqe_wstrb,
+  output           m_axi_qp_get_wqe_wlast,
+  output           m_axi_qp_get_wqe_wvalid,
+  input            m_axi_qp_get_wqe_wready,
+  output           m_axi_qp_get_wqe_awlock,
+  input            m_axi_qp_get_wqe_bid,
+  input    [1 : 0] m_axi_qp_get_wqe_bresp,
+  input            m_axi_qp_get_wqe_bvalid,
+  output           m_axi_qp_get_wqe_bready,
+  output           m_axi_qp_get_wqe_arid,
+  output  [63 : 0] m_axi_qp_get_wqe_araddr,
+  output   [7 : 0] m_axi_qp_get_wqe_arlen,
+  output   [2 : 0] m_axi_qp_get_wqe_arsize,
+  output   [1 : 0] m_axi_qp_get_wqe_arburst,
+  output   [3 : 0] m_axi_qp_get_wqe_arcache,
+  output   [2 : 0] m_axi_qp_get_wqe_arprot,
+  output           m_axi_qp_get_wqe_arvalid,
+  input            m_axi_qp_get_wqe_arready,
+  input            m_axi_qp_get_wqe_rid,
+  input  [511 : 0] m_axi_qp_get_wqe_rdata,
+  input    [1 : 0] m_axi_qp_get_wqe_rresp,
+  input            m_axi_qp_get_wqe_rlast,
+  input            m_axi_qp_get_wqe_rvalid,
+  output           m_axi_qp_get_wqe_rready,
+  output           m_axi_qp_get_wqe_arlock,
+
+  // TODO: In the current implementation, we do not consider retry buffer
+  // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+  output           m_axi_payload_to_retry_buf_awid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_awaddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_awlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_awburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_awcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awprot,
+  output           m_axi_payload_to_retry_buf_awvalid,
+  input            m_axi_payload_to_retry_buf_awready,
+  output [511 : 0] m_axi_payload_to_retry_buf_wdata,
+  output  [63 : 0] m_axi_payload_to_retry_buf_wstrb,
+  output           m_axi_payload_to_retry_buf_wlast,
+  output           m_axi_payload_to_retry_buf_wvalid,
+  input            m_axi_payload_to_retry_buf_wready,
+  output           m_axi_payload_to_retry_buf_awlock,
+  input            m_axi_payload_to_retry_buf_bid,
+  input    [1 : 0] m_axi_payload_to_retry_buf_bresp,
+  input            m_axi_payload_to_retry_buf_bvalid,
+  output           m_axi_payload_to_retry_buf_bready,
+  output           m_axi_payload_to_retry_buf_arid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_araddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_arlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_arburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_arcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arprot,
+  output           m_axi_payload_to_retry_buf_arvalid,
+  input            m_axi_payload_to_retry_buf_arready,
+  input            m_axi_payload_to_retry_buf_rid,
+  input  [511 : 0] m_axi_payload_to_retry_buf_rdata,
+  input    [1 : 0] m_axi_payload_to_retry_buf_rresp,
+  input            m_axi_payload_to_retry_buf_rlast,
+  input            m_axi_payload_to_retry_buf_rvalid,
+  output           m_axi_payload_to_retry_buf_rready,
+  output           m_axi_payload_to_retry_buf_arlock,
+
+  // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+  output           m_axi_pktgen_get_payload_awid,
+  output  [63 : 0] m_axi_pktgen_get_payload_awaddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_awlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_awsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_awburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_awcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_awprot,
+  output           m_axi_pktgen_get_payload_awvalid,
+  input            m_axi_pktgen_get_payload_awready,
+  output [511 : 0] m_axi_pktgen_get_payload_wdata,
+  output  [63 : 0] m_axi_pktgen_get_payload_wstrb,
+  output           m_axi_pktgen_get_payload_wlast,
+  output           m_axi_pktgen_get_payload_wvalid,
+  input            m_axi_pktgen_get_payload_wready,
+  output           m_axi_pktgen_get_payload_awlock,
+  input            m_axi_pktgen_get_payload_bid,
+  input    [1 : 0] m_axi_pktgen_get_payload_bresp,
+  input            m_axi_pktgen_get_payload_bvalid,
+  output           m_axi_pktgen_get_payload_bready,
+  output           m_axi_pktgen_get_payload_arid,
+  output  [63 : 0] m_axi_pktgen_get_payload_araddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_arlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_arsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_arburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_arcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_arprot,
+  output           m_axi_pktgen_get_payload_arvalid,
+  input            m_axi_pktgen_get_payload_arready,
+  input            m_axi_pktgen_get_payload_rid,
+  input  [511 : 0] m_axi_pktgen_get_payload_rdata,
+  input    [1 : 0] m_axi_pktgen_get_payload_rresp,
+  input            m_axi_pktgen_get_payload_rlast,
+  input            m_axi_pktgen_get_payload_rvalid,
+  output           m_axi_pktgen_get_payload_rready,
+  output           m_axi_pktgen_get_payload_arlock,
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  output           m_axi_write_completion_awid,
+  output  [63 : 0] m_axi_write_completion_awaddr,
+  output   [7 : 0] m_axi_write_completion_awlen,
+  output   [2 : 0] m_axi_write_completion_awsize,
+  output   [1 : 0] m_axi_write_completion_awburst,
+  output   [3 : 0] m_axi_write_completion_awcache,
+  output   [2 : 0] m_axi_write_completion_awprot,
+  output           m_axi_write_completion_awvalid,
+  input            m_axi_write_completion_awready,
+  output [511 : 0] m_axi_write_completion_wdata,
+  output  [63 : 0] m_axi_write_completion_wstrb,
+  output           m_axi_write_completion_wlast,
+  output           m_axi_write_completion_wvalid,
+  input            m_axi_write_completion_wready,
+  output           m_axi_write_completion_awlock,
+  input            m_axi_write_completion_bid,
+  input    [1 : 0] m_axi_write_completion_bresp,
+  input            m_axi_write_completion_bvalid,
+  output           m_axi_write_completion_bready,
+  output           m_axi_write_completion_arid,
+  output  [63 : 0] m_axi_write_completion_araddr,
+  output   [7 : 0] m_axi_write_completion_arlen,
+  output   [2 : 0] m_axi_write_completion_arsize,
+  output   [1 : 0] m_axi_write_completion_arburst,
+  output   [3 : 0] m_axi_write_completion_arcache,
+  output   [2 : 0] m_axi_write_completion_arprot,
+  output           m_axi_write_completion_arvalid,
+  input            m_axi_write_completion_arready,
+  input            m_axi_write_completion_rid,
+  input  [511 : 0] m_axi_write_completion_rdata,
+  input    [1 : 0] m_axi_write_completion_rresp,
+  input            m_axi_write_completion_rlast,
+  input            m_axi_write_completion_rvalid,
+  output           m_axi_write_completion_rready,
+  output           m_axi_write_completion_arlock,
+
+  // TODO: In the current implementation, we do not consider hardware handshaking from user logic
+  // Send WQE completion queue doorbell
+  output           resp_hndler_o_send_cq_db_cnt_valid,
+  output     [9:0] resp_hndler_o_send_cq_db_addr,
+  output    [31:0] resp_hndler_o_send_cq_db_cnt,
+  input            resp_hndler_i_send_cq_db_rdy,
+
+  // Send WQE producer index doorbell
+  input     [15:0] i_qp_sq_pidb_hndshk,
+  input     [31:0] i_qp_sq_pidb_wr_addr_hndshk,
+  input            i_qp_sq_pidb_wr_valid_hndshk,
+  output           o_qp_sq_pidb_wr_rdy,
+
+  // RDMA-Send consumer index doorbell
+  input     [15:0] i_qp_rq_cidb_hndshk,
+  input     [31:0] i_qp_rq_cidb_wr_addr_hndshk,
+  input            i_qp_rq_cidb_wr_valid_hndshk,
+  output           o_qp_rq_cidb_wr_rdy,
+
+  // RDMA-Send producer index doorbell
+  output    [31:0] rx_pkt_hndler_o_rq_db_data,
+  output     [9:0] rx_pkt_hndler_o_rq_db_addr,
+  output           rx_pkt_hndler_o_rq_db_data_valid,
+  input            rx_pkt_hndler_i_rq_db_rdy,
+
+  output           rnic_intr,
+
+  input  mod_rstn,
+  output mod_rst_done,
+  output rdma_resetn_done,
+  input  axil_clk,
+  input  axis_clk
+);
+
+logic axil_rstn;
+logic axis_rstn;
+
+logic [8:0] stat_rx_pause_req;
+logic [8:0] ctl_tx_pause_req;
+logic       ctl_tx_resend_pause;
+
+logic o_global_dbg_cnt_en;
+logic o_global_dbg_cnt_clr;
+
+generic_reset #(
+  .NUM_INPUT_CLK  (2),
+  .RESET_DURATION (100)
+) reset_inst (
+  .mod_rstn     (mod_rstn),
+  .mod_rst_done (mod_rst_done),
+  .clk          ({axis_clk, axil_clk}),
+  .rstn         ({axis_rstn, axil_rstn})
+);
+
+rdma_subsystem #(
+  .C_AXIS_DATA_WIDTH (C_AXIS_DATA_WIDTH),
+  .C_AXIS_KEEP_WIDTH (C_AXIS_KEEP_WIDTH),
+  .C_AXIS_IMMDT_WIDTH(C_AXIS_IMMDT_WIDTH)
+) rdma_subsystem_inst (
+  // AXIL interface for RDMA control register
+  .s_axil_awaddr     (s_axil_awaddr),
+  .s_axil_awvalid    (s_axil_awvalid),
+  .s_axil_awready    (s_axil_awready),
+  .s_axil_wdata      (s_axil_wdata),
+  .s_axil_wstrb      (s_axil_wstrb),
+  .s_axil_wvalid     (s_axil_wvalid),
+  .s_axil_wready     (s_axil_wready),
+  .s_axil_araddr     (s_axil_araddr),
+  .s_axil_arvalid    (s_axil_arvalid),
+  .s_axil_arready    (s_axil_arready),
+  .s_axil_rdata      (s_axil_rdata),
+  .s_axil_rvalid     (s_axil_rvalid),
+  .s_axil_rresp      (s_axil_rresp),
+  .s_axil_rready     (s_axil_rready),
+  .s_axil_bresp      (s_axil_bresp),
+  .s_axil_bvalid     (s_axil_bvalid),
+  .s_axil_bready     (s_axil_bready),
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  .m_rdma2cmac_axis_tdata  (m_rdma2cmac_axis_tdata),
+  .m_rdma2cmac_axis_tkeep  (m_rdma2cmac_axis_tkeep),
+  .m_rdma2cmac_axis_tvalid (m_rdma2cmac_axis_tvalid),
+  .m_rdma2cmac_axis_tlast  (m_rdma2cmac_axis_tlast),
+  .m_rdma2cmac_axis_tready (m_rdma2cmac_axis_tready),
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  .s_qdma2rdma_non_roce_axis_tdata  (s_qdma2rdma_non_roce_axis_tdata),
+  .s_qdma2rdma_non_roce_axis_tkeep  (s_qdma2rdma_non_roce_axis_tkeep),
+  .s_qdma2rdma_non_roce_axis_tvalid (s_qdma2rdma_non_roce_axis_tvalid),
+  .s_qdma2rdma_non_roce_axis_tlast  (s_qdma2rdma_non_roce_axis_tlast),
+  .s_qdma2rdma_non_roce_axis_tready (s_qdma2rdma_non_roce_axis_tready),
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  .s_cmac2rdma_roce_axis_tdata   (s_cmac2rdma_roce_axis_tdata),
+  .s_cmac2rdma_roce_axis_tkeep   (s_cmac2rdma_roce_axis_tkeep),
+  .s_cmac2rdma_roce_axis_tvalid  (s_cmac2rdma_roce_axis_tvalid),
+  .s_cmac2rdma_roce_axis_tlast   (s_cmac2rdma_roce_axis_tlast),
+  .s_cmac2rdma_roce_axis_tuser   (s_cmac2rdma_roce_axis_tuser),
+
+  // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+  .s_cmac2rdma_non_roce_axis_tdata  (s_cmac2rdma_non_roce_axis_tdata),
+  .s_cmac2rdma_non_roce_axis_tkeep  (s_cmac2rdma_non_roce_axis_tkeep),
+  .s_cmac2rdma_non_roce_axis_tvalid (s_cmac2rdma_non_roce_axis_tvalid),
+  .s_cmac2rdma_non_roce_axis_tlast  (s_cmac2rdma_non_roce_axis_tlast),
+  .s_cmac2rdma_non_roce_axis_tuser  (s_cmac2rdma_non_roce_axis_tuser),
+
+  // Non-RDMA packets bypassing RDMA to QDMA RX
+  .m_rdma2qdma_non_roce_axis_tdata   (m_rdma2qdma_non_roce_axis_tdata),
+  .m_rdma2qdma_non_roce_axis_tkeep   (m_rdma2qdma_non_roce_axis_tkeep),
+  .m_rdma2qdma_non_roce_axis_tvalid  (m_rdma2qdma_non_roce_axis_tvalid),
+  .m_rdma2qdma_non_roce_axis_tlast   (m_rdma2qdma_non_roce_axis_tlast),
+  .m_rdma2qdma_non_roce_axis_tready  (m_rdma2qdma_non_roce_axis_tready),
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  .m_rdma2user_ieth_immdt_axis_tdata   (m_rdma2user_ieth_immdt_axis_tdata),
+  .m_rdma2user_ieth_immdt_axis_tlast   (m_rdma2user_ieth_immdt_axis_tlast),
+  .m_rdma2user_ieth_immdt_axis_tvalid  (m_rdma2user_ieth_immdt_axis_tvalid),
+  .m_rdma2user_ieth_immdt_axis_trdy    (m_rdma2user_ieth_immdt_axis_trdy),
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  .m_axi_rdma_send_write_payload_store_awid        (m_axi_rdma_send_write_payload_store_awid),
+  .m_axi_rdma_send_write_payload_store_awaddr      (m_axi_rdma_send_write_payload_store_awaddr),
+  .m_axi_rdma_send_write_payload_store_awuser      (m_axi_rdma_send_write_payload_store_awuser),
+  .m_axi_rdma_send_write_payload_store_awlen       (m_axi_rdma_send_write_payload_store_awlen),
+  .m_axi_rdma_send_write_payload_store_awsize      (m_axi_rdma_send_write_payload_store_awsize),
+  .m_axi_rdma_send_write_payload_store_awburst     (m_axi_rdma_send_write_payload_store_awburst),
+  .m_axi_rdma_send_write_payload_store_awcache     (m_axi_rdma_send_write_payload_store_awcache),
+  .m_axi_rdma_send_write_payload_store_awprot      (m_axi_rdma_send_write_payload_store_awprot),
+  .m_axi_rdma_send_write_payload_store_awvalid     (m_axi_rdma_send_write_payload_store_awvalid),
+  .m_axi_rdma_send_write_payload_store_awready     (m_axi_rdma_send_write_payload_store_awready),
+  .m_axi_rdma_send_write_payload_store_wdata       (m_axi_rdma_send_write_payload_store_wdata),
+  .m_axi_rdma_send_write_payload_store_wstrb       (m_axi_rdma_send_write_payload_store_wstrb),
+  .m_axi_rdma_send_write_payload_store_wlast       (m_axi_rdma_send_write_payload_store_wlast),
+  .m_axi_rdma_send_write_payload_store_wvalid      (m_axi_rdma_send_write_payload_store_wvalid),
+  .m_axi_rdma_send_write_payload_store_wready      (m_axi_rdma_send_write_payload_store_wready),
+  .m_axi_rdma_send_write_payload_store_awlock      (m_axi_rdma_send_write_payload_store_awlock),
+  .m_axi_rdma_send_write_payload_store_bid         (m_axi_rdma_send_write_payload_store_bid),
+  .m_axi_rdma_send_write_payload_store_bresp       (m_axi_rdma_send_write_payload_store_bresp),
+  .m_axi_rdma_send_write_payload_store_bvalid      (m_axi_rdma_send_write_payload_store_bvalid),
+  .m_axi_rdma_send_write_payload_store_bready      (m_axi_rdma_send_write_payload_store_bready),
+  .m_axi_rdma_send_write_payload_store_arid        (m_axi_rdma_send_write_payload_store_arid),
+  .m_axi_rdma_send_write_payload_store_araddr      (m_axi_rdma_send_write_payload_store_araddr),
+  .m_axi_rdma_send_write_payload_store_arlen       (m_axi_rdma_send_write_payload_store_arlen),
+  .m_axi_rdma_send_write_payload_store_arsize      (m_axi_rdma_send_write_payload_store_arsize),
+  .m_axi_rdma_send_write_payload_store_arburst     (m_axi_rdma_send_write_payload_store_arburst),
+  .m_axi_rdma_send_write_payload_store_arcache     (m_axi_rdma_send_write_payload_store_arcache),
+  .m_axi_rdma_send_write_payload_store_arprot      (m_axi_rdma_send_write_payload_store_arprot),
+  .m_axi_rdma_send_write_payload_store_arvalid     (m_axi_rdma_send_write_payload_store_arvalid),
+  .m_axi_rdma_send_write_payload_store_arready     (m_axi_rdma_send_write_payload_store_arready),
+  .m_axi_rdma_send_write_payload_store_rid         (m_axi_rdma_send_write_payload_store_rid),
+  .m_axi_rdma_send_write_payload_store_rdata       (m_axi_rdma_send_write_payload_store_rdata),
+  .m_axi_rdma_send_write_payload_store_rresp       (m_axi_rdma_send_write_payload_store_rresp),
+  .m_axi_rdma_send_write_payload_store_rlast       (m_axi_rdma_send_write_payload_store_rlast),
+  .m_axi_rdma_send_write_payload_store_rvalid      (m_axi_rdma_send_write_payload_store_rvalid),
+  .m_axi_rdma_send_write_payload_store_rready      (m_axi_rdma_send_write_payload_store_rready),
+  .m_axi_rdma_send_write_payload_store_arlock      (m_axi_rdma_send_write_payload_store_arlock),
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  .m_axi_rdma_rsp_payload_awid                (m_axi_rdma_rsp_payload_awid),
+  .m_axi_rdma_rsp_payload_awaddr              (m_axi_rdma_rsp_payload_awaddr),
+  .m_axi_rdma_rsp_payload_awlen               (m_axi_rdma_rsp_payload_awlen),
+  .m_axi_rdma_rsp_payload_awsize              (m_axi_rdma_rsp_payload_awsize),
+  .m_axi_rdma_rsp_payload_awburst             (m_axi_rdma_rsp_payload_awburst),
+  .m_axi_rdma_rsp_payload_awcache             (m_axi_rdma_rsp_payload_awcache),
+  .m_axi_rdma_rsp_payload_awprot              (m_axi_rdma_rsp_payload_awprot),
+  .m_axi_rdma_rsp_payload_awvalid             (m_axi_rdma_rsp_payload_awvalid),
+  .m_axi_rdma_rsp_payload_awready             (m_axi_rdma_rsp_payload_awready),
+  .m_axi_rdma_rsp_payload_wdata               (m_axi_rdma_rsp_payload_wdata),
+  .m_axi_rdma_rsp_payload_wstrb               (m_axi_rdma_rsp_payload_wstrb),
+  .m_axi_rdma_rsp_payload_wlast               (m_axi_rdma_rsp_payload_wlast),
+  .m_axi_rdma_rsp_payload_wvalid              (m_axi_rdma_rsp_payload_wvalid),
+  .m_axi_rdma_rsp_payload_wready              (m_axi_rdma_rsp_payload_wready),
+  .m_axi_rdma_rsp_payload_awlock              (m_axi_rdma_rsp_payload_awlock),
+  .m_axi_rdma_rsp_payload_bid                 (m_axi_rdma_rsp_payload_bid),
+  .m_axi_rdma_rsp_payload_bresp               (m_axi_rdma_rsp_payload_bresp),
+  .m_axi_rdma_rsp_payload_bvalid              (m_axi_rdma_rsp_payload_bvalid),
+  .m_axi_rdma_rsp_payload_bready              (m_axi_rdma_rsp_payload_bready),
+  .m_axi_rdma_rsp_payload_arid                (m_axi_rdma_rsp_payload_arid),
+  .m_axi_rdma_rsp_payload_araddr              (m_axi_rdma_rsp_payload_araddr),
+  .m_axi_rdma_rsp_payload_arlen               (m_axi_rdma_rsp_payload_arlen),
+  .m_axi_rdma_rsp_payload_arsize              (m_axi_rdma_rsp_payload_arsize),
+  .m_axi_rdma_rsp_payload_arburst             (m_axi_rdma_rsp_payload_arburst),
+  .m_axi_rdma_rsp_payload_arcache             (m_axi_rdma_rsp_payload_arcache),
+  .m_axi_rdma_rsp_payload_arprot              (m_axi_rdma_rsp_payload_arprot),
+  .m_axi_rdma_rsp_payload_arvalid             (m_axi_rdma_rsp_payload_arvalid),
+  .m_axi_rdma_rsp_payload_arready             (m_axi_rdma_rsp_payload_arready),
+  .m_axi_rdma_rsp_payload_rid                 (m_axi_rdma_rsp_payload_rid),
+  .m_axi_rdma_rsp_payload_rdata               (m_axi_rdma_rsp_payload_rdata),
+  .m_axi_rdma_rsp_payload_rresp               (m_axi_rdma_rsp_payload_rresp),
+  .m_axi_rdma_rsp_payload_rlast               (m_axi_rdma_rsp_payload_rlast),
+  .m_axi_rdma_rsp_payload_rvalid              (m_axi_rdma_rsp_payload_rvalid),
+  .m_axi_rdma_rsp_payload_rready              (m_axi_rdma_rsp_payload_rready),
+  .m_axi_rdma_rsp_payload_arlock              (m_axi_rdma_rsp_payload_arlock),
+
+  // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+  .m_axi_qp_get_wqe_awid                (m_axi_qp_get_wqe_awid),
+  .m_axi_qp_get_wqe_awaddr              (m_axi_qp_get_wqe_awaddr),
+  .m_axi_qp_get_wqe_awlen               (m_axi_qp_get_wqe_awlen),
+  .m_axi_qp_get_wqe_awsize              (m_axi_qp_get_wqe_awsize),
+  .m_axi_qp_get_wqe_awburst             (m_axi_qp_get_wqe_awburst),
+  .m_axi_qp_get_wqe_awcache             (m_axi_qp_get_wqe_awcache),
+  .m_axi_qp_get_wqe_awprot              (m_axi_qp_get_wqe_awprot),
+  .m_axi_qp_get_wqe_awvalid             (m_axi_qp_get_wqe_awvalid),
+  .m_axi_qp_get_wqe_awready             (m_axi_qp_get_wqe_awready),
+  .m_axi_qp_get_wqe_wdata               (m_axi_qp_get_wqe_wdata),
+  .m_axi_qp_get_wqe_wstrb               (m_axi_qp_get_wqe_wstrb),
+  .m_axi_qp_get_wqe_wlast               (m_axi_qp_get_wqe_wlast),
+  .m_axi_qp_get_wqe_wvalid              (m_axi_qp_get_wqe_wvalid),
+  .m_axi_qp_get_wqe_wready              (m_axi_qp_get_wqe_wready),
+  .m_axi_qp_get_wqe_awlock              (m_axi_qp_get_wqe_awlock),
+  .m_axi_qp_get_wqe_bid                 (m_axi_qp_get_wqe_bid),
+  .m_axi_qp_get_wqe_bresp               (m_axi_qp_get_wqe_bresp),
+  .m_axi_qp_get_wqe_bvalid              (m_axi_qp_get_wqe_bvalid),
+  .m_axi_qp_get_wqe_bready              (m_axi_qp_get_wqe_bready),
+  .m_axi_qp_get_wqe_arid                (m_axi_qp_get_wqe_arid),
+  .m_axi_qp_get_wqe_araddr              (m_axi_qp_get_wqe_araddr),
+  .m_axi_qp_get_wqe_arlen               (m_axi_qp_get_wqe_arlen),
+  .m_axi_qp_get_wqe_arsize              (m_axi_qp_get_wqe_arsize),
+  .m_axi_qp_get_wqe_arburst             (m_axi_qp_get_wqe_arburst),
+  .m_axi_qp_get_wqe_arcache             (m_axi_qp_get_wqe_arcache),
+  .m_axi_qp_get_wqe_arprot              (m_axi_qp_get_wqe_arprot),
+  .m_axi_qp_get_wqe_arvalid             (m_axi_qp_get_wqe_arvalid),
+  .m_axi_qp_get_wqe_arready             (m_axi_qp_get_wqe_arready),
+  .m_axi_qp_get_wqe_rid                 (m_axi_qp_get_wqe_rid),
+  .m_axi_qp_get_wqe_rdata               (m_axi_qp_get_wqe_rdata),
+  .m_axi_qp_get_wqe_rresp               (m_axi_qp_get_wqe_rresp),
+  .m_axi_qp_get_wqe_rlast               (m_axi_qp_get_wqe_rlast),
+  .m_axi_qp_get_wqe_rvalid              (m_axi_qp_get_wqe_rvalid),
+  .m_axi_qp_get_wqe_rready              (m_axi_qp_get_wqe_rready),
+  .m_axi_qp_get_wqe_arlock              (m_axi_qp_get_wqe_arlock),
+
+  // TODO: In the current implementation, we do not consider retry buffer
+  // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+  .m_axi_payload_to_retry_buf_awid       (m_axi_payload_to_retry_buf_awid),
+  .m_axi_payload_to_retry_buf_awaddr     (m_axi_payload_to_retry_buf_awaddr),
+  .m_axi_payload_to_retry_buf_awlen      (m_axi_payload_to_retry_buf_awlen),
+  .m_axi_payload_to_retry_buf_awsize     (m_axi_payload_to_retry_buf_awsize),
+  .m_axi_payload_to_retry_buf_awburst    (m_axi_payload_to_retry_buf_awburst),
+  .m_axi_payload_to_retry_buf_awcache    (m_axi_payload_to_retry_buf_awcache),
+  .m_axi_payload_to_retry_buf_awprot     (m_axi_payload_to_retry_buf_awprot),
+  .m_axi_payload_to_retry_buf_awvalid    (m_axi_payload_to_retry_buf_awvalid),
+  .m_axi_payload_to_retry_buf_awready    (m_axi_payload_to_retry_buf_awready),
+  .m_axi_payload_to_retry_buf_wdata      (m_axi_payload_to_retry_buf_wdata),
+  .m_axi_payload_to_retry_buf_wstrb      (m_axi_payload_to_retry_buf_wstrb),
+  .m_axi_payload_to_retry_buf_wlast      (m_axi_payload_to_retry_buf_wlast),
+  .m_axi_payload_to_retry_buf_wvalid     (m_axi_payload_to_retry_buf_wvalid),
+  .m_axi_payload_to_retry_buf_wready     (m_axi_payload_to_retry_buf_wready),
+  .m_axi_payload_to_retry_buf_awlock     (m_axi_payload_to_retry_buf_awlock),
+  .m_axi_payload_to_retry_buf_bid        (m_axi_payload_to_retry_buf_bid),
+  .m_axi_payload_to_retry_buf_bresp      (m_axi_payload_to_retry_buf_bresp),
+  .m_axi_payload_to_retry_buf_bvalid     (m_axi_payload_to_retry_buf_bvalid),
+  .m_axi_payload_to_retry_buf_bready     (m_axi_payload_to_retry_buf_bready),
+  .m_axi_payload_to_retry_buf_arid       (m_axi_payload_to_retry_buf_arid),
+  .m_axi_payload_to_retry_buf_araddr     (m_axi_payload_to_retry_buf_araddr),
+  .m_axi_payload_to_retry_buf_arlen      (m_axi_payload_to_retry_buf_arlen),
+  .m_axi_payload_to_retry_buf_arsize     (m_axi_payload_to_retry_buf_arsize),
+  .m_axi_payload_to_retry_buf_arburst    (m_axi_payload_to_retry_buf_arburst),
+  .m_axi_payload_to_retry_buf_arcache    (m_axi_payload_to_retry_buf_arcache),
+  .m_axi_payload_to_retry_buf_arprot     (m_axi_payload_to_retry_buf_arprot),
+  .m_axi_payload_to_retry_buf_arvalid    (m_axi_payload_to_retry_buf_arvalid),
+  .m_axi_payload_to_retry_buf_arready    (m_axi_payload_to_retry_buf_arready),
+  .m_axi_payload_to_retry_buf_rid        (m_axi_payload_to_retry_buf_rid),
+  .m_axi_payload_to_retry_buf_rdata      (m_axi_payload_to_retry_buf_rdata),
+  .m_axi_payload_to_retry_buf_rresp      (m_axi_payload_to_retry_buf_rresp),
+  .m_axi_payload_to_retry_buf_rlast      (m_axi_payload_to_retry_buf_rlast),
+  .m_axi_payload_to_retry_buf_rvalid     (m_axi_payload_to_retry_buf_rvalid),
+  .m_axi_payload_to_retry_buf_rready     (m_axi_payload_to_retry_buf_rready),
+  .m_axi_payload_to_retry_buf_arlock     (m_axi_payload_to_retry_buf_arlock),
+
+  // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+  .m_axi_pktgen_get_payload_awid          (m_axi_pktgen_get_payload_awid),
+  .m_axi_pktgen_get_payload_awaddr        (m_axi_pktgen_get_payload_awaddr),
+  .m_axi_pktgen_get_payload_awlen         (m_axi_pktgen_get_payload_awlen),
+  .m_axi_pktgen_get_payload_awsize        (m_axi_pktgen_get_payload_awsize),
+  .m_axi_pktgen_get_payload_awburst       (m_axi_pktgen_get_payload_awburst),
+  .m_axi_pktgen_get_payload_awcache       (m_axi_pktgen_get_payload_awcache),
+  .m_axi_pktgen_get_payload_awprot        (m_axi_pktgen_get_payload_awprot),
+  .m_axi_pktgen_get_payload_awvalid       (m_axi_pktgen_get_payload_awvalid),
+  .m_axi_pktgen_get_payload_awready       (m_axi_pktgen_get_payload_awready),
+  .m_axi_pktgen_get_payload_wdata         (m_axi_pktgen_get_payload_wdata),
+  .m_axi_pktgen_get_payload_wstrb         (m_axi_pktgen_get_payload_wstrb),
+  .m_axi_pktgen_get_payload_wlast         (m_axi_pktgen_get_payload_wlast),
+  .m_axi_pktgen_get_payload_wvalid        (m_axi_pktgen_get_payload_wvalid),
+  .m_axi_pktgen_get_payload_wready        (m_axi_pktgen_get_payload_wready),
+  .m_axi_pktgen_get_payload_awlock        (m_axi_pktgen_get_payload_awlock),
+  .m_axi_pktgen_get_payload_bid           (m_axi_pktgen_get_payload_bid),
+  .m_axi_pktgen_get_payload_bresp         (m_axi_pktgen_get_payload_bresp),
+  .m_axi_pktgen_get_payload_bvalid        (m_axi_pktgen_get_payload_bvalid),
+  .m_axi_pktgen_get_payload_bready        (m_axi_pktgen_get_payload_bready),
+  .m_axi_pktgen_get_payload_arid          (m_axi_pktgen_get_payload_arid),
+  .m_axi_pktgen_get_payload_araddr        (m_axi_pktgen_get_payload_araddr),
+  .m_axi_pktgen_get_payload_arlen         (m_axi_pktgen_get_payload_arlen),
+  .m_axi_pktgen_get_payload_arsize        (m_axi_pktgen_get_payload_arsize),
+  .m_axi_pktgen_get_payload_arburst       (m_axi_pktgen_get_payload_arburst),
+  .m_axi_pktgen_get_payload_arcache       (m_axi_pktgen_get_payload_arcache),
+  .m_axi_pktgen_get_payload_arprot        (m_axi_pktgen_get_payload_arprot),
+  .m_axi_pktgen_get_payload_arvalid       (m_axi_pktgen_get_payload_arvalid),
+  .m_axi_pktgen_get_payload_arready       (m_axi_pktgen_get_payload_arready),
+  .m_axi_pktgen_get_payload_rid           (m_axi_pktgen_get_payload_rid),
+  .m_axi_pktgen_get_payload_rdata         (m_axi_pktgen_get_payload_rdata),
+  .m_axi_pktgen_get_payload_rresp         (m_axi_pktgen_get_payload_rresp),
+  .m_axi_pktgen_get_payload_rlast         (m_axi_pktgen_get_payload_rlast),
+  .m_axi_pktgen_get_payload_rvalid        (m_axi_pktgen_get_payload_rvalid),
+  .m_axi_pktgen_get_payload_rready        (m_axi_pktgen_get_payload_rready),
+  .m_axi_pktgen_get_payload_arlock        (m_axi_pktgen_get_payload_arlock),
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  .m_axi_write_completion_awid       (m_axi_write_completion_awid),
+  .m_axi_write_completion_awaddr     (m_axi_write_completion_awaddr),
+  .m_axi_write_completion_awlen      (m_axi_write_completion_awlen),
+  .m_axi_write_completion_awsize     (m_axi_write_completion_awsize),
+  .m_axi_write_completion_awburst    (m_axi_write_completion_awburst),
+  .m_axi_write_completion_awcache    (m_axi_write_completion_awcache),
+  .m_axi_write_completion_awprot     (m_axi_write_completion_awprot),
+  .m_axi_write_completion_awvalid    (m_axi_write_completion_awvalid),
+  .m_axi_write_completion_awready    (m_axi_write_completion_awready),
+  .m_axi_write_completion_wdata      (m_axi_write_completion_wdata),
+  .m_axi_write_completion_wstrb      (m_axi_write_completion_wstrb),
+  .m_axi_write_completion_wlast      (m_axi_write_completion_wlast),
+  .m_axi_write_completion_wvalid     (m_axi_write_completion_wvalid),
+  .m_axi_write_completion_wready     (m_axi_write_completion_wready),
+  .m_axi_write_completion_awlock     (m_axi_write_completion_awlock),
+  .m_axi_write_completion_bid        (m_axi_write_completion_bid),
+  .m_axi_write_completion_bresp      (m_axi_write_completion_bresp),
+  .m_axi_write_completion_bvalid     (m_axi_write_completion_bvalid),
+  .m_axi_write_completion_bready     (m_axi_write_completion_bready),
+  .m_axi_write_completion_arid       (m_axi_write_completion_arid),
+  .m_axi_write_completion_araddr     (m_axi_write_completion_araddr),
+  .m_axi_write_completion_arlen      (m_axi_write_completion_arlen),
+  .m_axi_write_completion_arsize     (m_axi_write_completion_arsize),
+  .m_axi_write_completion_arburst    (m_axi_write_completion_arburst),
+  .m_axi_write_completion_arcache    (m_axi_write_completion_arcache),
+  .m_axi_write_completion_arprot     (m_axi_write_completion_arprot),
+  .m_axi_write_completion_arvalid    (m_axi_write_completion_arvalid),
+  .m_axi_write_completion_arready    (m_axi_write_completion_arready),
+  .m_axi_write_completion_rid        (m_axi_write_completion_rid),
+  .m_axi_write_completion_rdata      (m_axi_write_completion_rdata),
+  .m_axi_write_completion_rresp      (m_axi_write_completion_rresp),
+  .m_axi_write_completion_rlast      (m_axi_write_completion_rlast),
+  .m_axi_write_completion_rvalid     (m_axi_write_completion_rvalid),
+  .m_axi_write_completion_rready     (m_axi_write_completion_rready),
+  .m_axi_write_completion_arlock     (m_axi_write_completion_arlock),
+
+  // TODO: In the current implementation, we do not consider hardware handshaking from user logic
+  // HW handshaking from user logic: Send WQE completion queue doorbell
+  .resp_hndler_o_send_cq_db_cnt_valid (resp_hndler_o_send_cq_db_cnt_valid),
+  .resp_hndler_o_send_cq_db_addr      (resp_hndler_o_send_cq_db_addr),
+  .resp_hndler_o_send_cq_db_cnt       (resp_hndler_o_send_cq_db_cnt),
+  .resp_hndler_i_send_cq_db_rdy       (resp_hndler_i_send_cq_db_rdy),
+
+  // HW handshaking from user logic: Send WQE producer index doorbell
+  .i_qp_sq_pidb_hndshk           (i_qp_sq_pidb_hndshk),
+  .i_qp_sq_pidb_wr_addr_hndshk   (i_qp_sq_pidb_wr_addr_hndshk),
+  .i_qp_sq_pidb_wr_valid_hndshk  (i_qp_sq_pidb_wr_valid_hndshk),
+  .o_qp_sq_pidb_wr_rdy           (o_qp_sq_pidb_wr_rdy),
+
+  // HW handshaking from user logic: RDMA-Send consumer index doorbell
+  .i_qp_rq_cidb_hndshk           (i_qp_rq_cidb_hndshk),
+  .i_qp_rq_cidb_wr_addr_hndshk   (i_qp_rq_cidb_wr_addr_hndshk),
+  .i_qp_rq_cidb_wr_valid_hndshk  (i_qp_rq_cidb_wr_valid_hndshk),
+  .o_qp_rq_cidb_wr_rdy           (o_qp_rq_cidb_wr_rdy),
+
+  // HW handshaking from user logic: RDMA-Send producer index doorbell
+  .rx_pkt_hndler_o_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+  .rx_pkt_hndler_o_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+  .rx_pkt_hndler_o_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+  .rx_pkt_hndler_i_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+  .rnic_intr             (rnic_intr),
+  .stat_rx_pause_req     (stat_rx_pause_req),
+  .ctl_tx_pause_req      (ctl_tx_pause_req),
+  .ctl_tx_resend_pause   (ctl_tx_resend_pause),
+
+  .o_global_dbg_cnt_en   (o_global_dbg_cnt_en),
+  .o_global_dbg_cnt_clr  (o_global_dbg_cnt_clr),
+
+  .axil_rstn (axil_rstn),
+  .axis_rstn (axis_rstn),
+  .axil_clk (axil_clk),
+  .axis_clk (axis_clk),
+  .rdma_resetn_done (rdma_resetn_done)
+);
+
+assign stat_rx_pause_req = 9'd0;
+
+endmodule : rdma_subsystem_wrapper
diff --git a/src/rdma_subsystem/vivado_ip/rdma_core.tcl b/src/rdma_subsystem/vivado_ip/rdma_core.tcl
new file mode 100644
index 0000000..7b9abfd
--- /dev/null
+++ b/src/rdma_subsystem/vivado_ip/rdma_core.tcl
@@ -0,0 +1,28 @@
+# *************************************************************************
+#
+# Copyright 2022 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set rdma rdma_core
+create_ip -name ernic -vendor xilinx.com -library ip -module_name $rdma -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.C_NUM_QP {32}
+    CONFIG.C_S_AXI_LITE_ADDR_WIDTH {32}
+    CONFIG.C_M_AXI_ADDR_WIDTH {64}
+    CONFIG.C_EN_DEBUG_PORTS {1}
+    CONFIG.C_MAX_WR_RETRY_DATA_BUF_DEPTH {2048}
+    CONFIG.C_EN_INITIATOR_LITE {1}
+} [get_ips $rdma]
diff --git a/src/rdma_subsystem/vivado_ip/vivado_ip.tcl b/src/rdma_subsystem/vivado_ip/vivado_ip.tcl
new file mode 100644
index 0000000..bf49e61
--- /dev/null
+++ b/src/rdma_subsystem/vivado_ip/vivado_ip.tcl
@@ -0,0 +1,20 @@
+# *************************************************************************
+#
+# Copyright 2022 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set ips {
+  rdma_core
+}
\ No newline at end of file
diff --git a/src/system_config/system_config.sv b/src/system_config/system_config.sv
index d4a14e9..da833f0 100644
--- a/src/system_config/system_config.sv
+++ b/src/system_config/system_config.sv
@@ -54,6 +54,23 @@ module system_config #(
   input                   [1:0] m_axil_qdma_rresp,
   output                        m_axil_qdma_rready,
 
+  output                        m_axil_qdma_csr_awvalid,
+  output                 [31:0] m_axil_qdma_csr_awaddr,
+  input                         m_axil_qdma_csr_awready,
+  output                        m_axil_qdma_csr_wvalid,
+  output                 [31:0] m_axil_qdma_csr_wdata,
+  input                         m_axil_qdma_csr_wready,
+  input                         m_axil_qdma_csr_bvalid,
+  input                   [1:0] m_axil_qdma_csr_bresp,
+  output                        m_axil_qdma_csr_bready,
+  output                        m_axil_qdma_csr_arvalid,
+  output                 [31:0] m_axil_qdma_csr_araddr,
+  input                         m_axil_qdma_csr_arready,
+  input                         m_axil_qdma_csr_rvalid,
+  input                  [31:0] m_axil_qdma_csr_rdata,
+  input                   [1:0] m_axil_qdma_csr_rresp,
+  output                        m_axil_qdma_csr_rready,
+
   output    [NUM_CMAC_PORT-1:0] m_axil_adap_awvalid,
   output [32*NUM_CMAC_PORT-1:0] m_axil_adap_awaddr,
   input     [NUM_CMAC_PORT-1:0] m_axil_adap_awready,
@@ -88,6 +105,23 @@ module system_config #(
   input   [2*NUM_CMAC_PORT-1:0] m_axil_cmac_rresp,
   output    [NUM_CMAC_PORT-1:0] m_axil_cmac_rready,
 
+  output                        m_axil_rdma_awvalid,
+  output                 [31:0] m_axil_rdma_awaddr,
+  input                         m_axil_rdma_awready,
+  output                        m_axil_rdma_wvalid,
+  output                 [31:0] m_axil_rdma_wdata,
+  input                         m_axil_rdma_wready,
+  input                         m_axil_rdma_bvalid,
+  input                   [1:0] m_axil_rdma_bresp,
+  output                        m_axil_rdma_bready,
+  output                        m_axil_rdma_arvalid,
+  output                 [31:0] m_axil_rdma_araddr,
+  input                         m_axil_rdma_arready,
+  input                         m_axil_rdma_rvalid,
+  input                  [31:0] m_axil_rdma_rdata,
+  input                   [1:0] m_axil_rdma_rresp,
+  output                        m_axil_rdma_rready,
+
   output                        m_axil_box0_awvalid,
   output                 [31:0] m_axil_box0_awaddr,
   input                         m_axil_box0_awready,
@@ -226,6 +260,23 @@ module system_config #(
     .m_axil_qdma_rresp   (m_axil_qdma_rresp),
     .m_axil_qdma_rready  (m_axil_qdma_rready),
 
+    .m_axil_qdma_csr_awvalid (m_axil_qdma_csr_awvalid),
+    .m_axil_qdma_csr_awaddr  (m_axil_qdma_csr_awaddr),
+    .m_axil_qdma_csr_awready (m_axil_qdma_csr_awready),
+    .m_axil_qdma_csr_wvalid  (m_axil_qdma_csr_wvalid),
+    .m_axil_qdma_csr_wdata   (m_axil_qdma_csr_wdata),
+    .m_axil_qdma_csr_wready  (m_axil_qdma_csr_wready),
+    .m_axil_qdma_csr_bvalid  (m_axil_qdma_csr_bvalid),
+    .m_axil_qdma_csr_bresp   (m_axil_qdma_csr_bresp),
+    .m_axil_qdma_csr_bready  (m_axil_qdma_csr_bready),
+    .m_axil_qdma_csr_arvalid (m_axil_qdma_csr_arvalid),
+    .m_axil_qdma_csr_araddr  (m_axil_qdma_csr_araddr),
+    .m_axil_qdma_csr_arready (m_axil_qdma_csr_arready),
+    .m_axil_qdma_csr_rvalid  (m_axil_qdma_csr_rvalid),
+    .m_axil_qdma_csr_rdata   (m_axil_qdma_csr_rdata),
+    .m_axil_qdma_csr_rresp   (m_axil_qdma_csr_rresp),
+    .m_axil_qdma_csr_rready  (m_axil_qdma_csr_rready),
+
     .m_axil_adap_awvalid (m_axil_adap_awvalid),
     .m_axil_adap_awaddr  (m_axil_adap_awaddr),
     .m_axil_adap_awready (m_axil_adap_awready),
@@ -276,7 +327,24 @@ module system_config #(
     .m_axil_smon_rdata   (axil_smon_rdata),
     .m_axil_smon_rresp   (axil_smon_rresp),
     .m_axil_smon_rready  (axil_smon_rready),
-			   
+
+    .m_axil_rdma_awvalid (m_axil_rdma_awvalid),
+    .m_axil_rdma_awaddr  (m_axil_rdma_awaddr),
+    .m_axil_rdma_awready (m_axil_rdma_awready),
+    .m_axil_rdma_wvalid  (m_axil_rdma_wvalid),
+    .m_axil_rdma_wdata   (m_axil_rdma_wdata),
+    .m_axil_rdma_wready  (m_axil_rdma_wready),
+    .m_axil_rdma_bvalid  (m_axil_rdma_bvalid),
+    .m_axil_rdma_bresp   (m_axil_rdma_bresp),
+    .m_axil_rdma_bready  (m_axil_rdma_bready),
+    .m_axil_rdma_arvalid (m_axil_rdma_arvalid),
+    .m_axil_rdma_araddr  (m_axil_rdma_araddr),
+    .m_axil_rdma_arready (m_axil_rdma_arready),
+    .m_axil_rdma_rvalid  (m_axil_rdma_rvalid),
+    .m_axil_rdma_rdata   (m_axil_rdma_rdata),
+    .m_axil_rdma_rresp   (m_axil_rdma_rresp),
+    .m_axil_rdma_rready  (m_axil_rdma_rready),
+
     .m_axil_box0_awvalid (m_axil_box0_awvalid),
     .m_axil_box0_awaddr  (m_axil_box0_awaddr),
     .m_axil_box0_awready (m_axil_box0_awready),
@@ -346,26 +414,29 @@ module system_config #(
 
    system_management_wiz
    system_management_wiz_inst (
-     .s_axi_aclk      (aclk),                    
-     .s_axi_aresetn   (aresetn),                    
- 
-     .s_axi_awaddr    (axil_smon_awaddr),                    
-     .s_axi_awvalid   (axil_smon_awvalid),                    
-     .s_axi_awready   (axil_smon_awready),                    
-     .s_axi_wdata     (axil_smon_wdata),                    
-     .s_axi_wstrb     (4'hF),                    
-     .s_axi_wvalid    (axil_smon_wvalid),                    
-     .s_axi_wready    (axil_smon_wready),                    
-     .s_axi_bresp     (axil_smon_bresp),                    
-     .s_axi_bvalid    (axil_smon_bvalid),                    
-     .s_axi_bready    (axil_smon_bready),                    
-     .s_axi_araddr    (axil_smon_araddr),                    
-     .s_axi_arvalid   (axil_smon_arvalid),                    
-     .s_axi_arready   (axil_smon_arready),                    
-     .s_axi_rdata     (axil_smon_rdata),                    
-     .s_axi_rresp     (axil_smon_rresp),                    
-     .s_axi_rvalid    (axil_smon_rvalid),                    
-     .s_axi_rready    (axil_smon_rready)
+     .s_axi_aclk      (aclk),
+     .s_axi_aresetn   (aresetn),
+
+     .s_axi_awaddr    (axil_smon_awaddr),
+     .s_axi_awvalid   (axil_smon_awvalid),
+     .s_axi_awready   (axil_smon_awready),
+     .s_axi_wdata     (axil_smon_wdata),
+     .s_axi_wstrb     (4'hF),
+     .s_axi_wvalid    (axil_smon_wvalid),
+     .s_axi_wready    (axil_smon_wready),
+     .s_axi_bresp     (axil_smon_bresp),
+     .s_axi_bvalid    (axil_smon_bvalid),
+     .s_axi_bready    (axil_smon_bready),
+     .s_axi_araddr    (axil_smon_araddr),
+     .s_axi_arvalid   (axil_smon_arvalid),
+     .s_axi_arready   (axil_smon_arready),
+     .s_axi_rdata     (axil_smon_rdata),
+     .s_axi_rresp     (axil_smon_rresp),
+     .s_axi_rvalid    (axil_smon_rvalid),
+     .s_axi_rready    (axil_smon_rready),
+
+     .vp              (1'b0),
+     .vn              (1'b0)
   );
 
 endmodule: system_config
diff --git a/src/system_config/system_config_address_map.sv b/src/system_config/system_config_address_map.sv
index 11ae7a5..171712d 100644
--- a/src/system_config/system_config_address_map.sv
+++ b/src/system_config/system_config_address_map.sv
@@ -34,6 +34,10 @@
 // --------------------------------------------------
 //    0x10000  |  0x11FFF  |  Sysmon block
 // --------------------------------------------------
+//    0x14000  |  0x16FFF  |  QDMA AXI Bridge CSR
+// --------------------------------------------------
+//    0x40000  |  0x6FFFF  |  RDMA subsystem
+// --------------------------------------------------
 //   0x100000  |  0x1FFFFF |  Box0 @ 250MHz
 // --------------------------------------------------
 //   0x200000  |  0x2FFFFF |  Box1 @ 322MHz
@@ -95,6 +99,23 @@ module system_config_address_map #(
   input                   [1:0] m_axil_qdma_rresp,
   output                        m_axil_qdma_rready,
 
+  output                        m_axil_qdma_csr_awvalid,
+  output                 [31:0] m_axil_qdma_csr_awaddr,
+  input                         m_axil_qdma_csr_awready,
+  output                        m_axil_qdma_csr_wvalid,
+  output                 [31:0] m_axil_qdma_csr_wdata,
+  input                         m_axil_qdma_csr_wready,
+  input                         m_axil_qdma_csr_bvalid,
+  input                   [1:0] m_axil_qdma_csr_bresp,
+  output                        m_axil_qdma_csr_bready,
+  output                        m_axil_qdma_csr_arvalid,
+  output                 [31:0] m_axil_qdma_csr_araddr,
+  input                         m_axil_qdma_csr_arready,
+  input                         m_axil_qdma_csr_rvalid,
+  input                  [31:0] m_axil_qdma_csr_rdata,
+  input                   [1:0] m_axil_qdma_csr_rresp,
+  output                        m_axil_qdma_csr_rready,
+
   output    [NUM_CMAC_PORT-1:0] m_axil_adap_awvalid,
   output [32*NUM_CMAC_PORT-1:0] m_axil_adap_awaddr,
   input     [NUM_CMAC_PORT-1:0] m_axil_adap_awready,
@@ -129,6 +150,23 @@ module system_config_address_map #(
   input   [2*NUM_CMAC_PORT-1:0] m_axil_cmac_rresp,
   output    [NUM_CMAC_PORT-1:0] m_axil_cmac_rready,
 
+  output                        m_axil_rdma_awvalid,
+  output                 [31:0] m_axil_rdma_awaddr,
+  input                         m_axil_rdma_awready,
+  output                        m_axil_rdma_wvalid,
+  output                 [31:0] m_axil_rdma_wdata,
+  input                         m_axil_rdma_wready,
+  input                         m_axil_rdma_bvalid,
+  input                   [1:0] m_axil_rdma_bresp,
+  output                        m_axil_rdma_bready,
+  output                        m_axil_rdma_arvalid,
+  output                 [31:0] m_axil_rdma_araddr,
+  input                         m_axil_rdma_arready,
+  input                         m_axil_rdma_rvalid,
+  input                  [31:0] m_axil_rdma_rdata,
+  input                   [1:0] m_axil_rdma_rresp,
+  output                        m_axil_rdma_rready,
+
   output                        m_axil_box0_awvalid,
   output                 [31:0] m_axil_box0_awaddr,
   input                         m_axil_box0_awready,
@@ -184,7 +222,7 @@ module system_config_address_map #(
   input                         aresetn
 );
 
-  localparam C_NUM_SLAVES  = 9;
+  localparam C_NUM_SLAVES  = 11;
 
   localparam C_SCFG_INDEX  = 0;
   localparam C_QDMA_INDEX  = 1;
@@ -193,8 +231,10 @@ module system_config_address_map #(
   localparam C_CMAC1_INDEX = 4;
   localparam C_ADAP1_INDEX = 5;
   localparam C_SMON_INDEX  = 6;
-  localparam C_BOX1_INDEX  = 7;
-  localparam C_BOX0_INDEX  = 8;
+  localparam C_QCSR_INDEX  = 7;
+  localparam C_RDMA_INDEX  = 8;
+  localparam C_BOX1_INDEX  = 9;
+  localparam C_BOX0_INDEX  = 10;
 
   localparam C_SCFG_BASE_ADDR  = 32'h0;
   localparam C_QDMA_BASE_ADDR  = 32'h01000;
@@ -203,6 +243,8 @@ module system_config_address_map #(
   localparam C_CMAC1_BASE_ADDR = 32'h0C000;
   localparam C_ADAP1_BASE_ADDR = 32'h0F000;
   localparam C_SMON_BASE_ADDR  = 32'h10000;  // 14 bits
+  localparam C_QCSR_BASE_ADDR  = 32'h14000;  // 14 bits
+  localparam C_RDMA_BASE_ADDR  = 32'h40000;  // 18 bits
   localparam C_BOX1_BASE_ADDR  = 32'h200000; // 20 bits
   localparam C_BOX0_BASE_ADDR  = 32'h100000; // 20 bits
 
@@ -224,6 +266,10 @@ module system_config_address_map #(
   wire                [31:0] axil_box0_araddr;
   wire                [31:0] axil_smon_awaddr;
   wire                [31:0] axil_smon_araddr;
+  wire                [31:0] axil_qcsr_awaddr;
+  wire                [31:0] axil_qcsr_araddr;
+  wire                [31:0] axil_rdma_awaddr;
+  wire                [31:0] axil_rdma_araddr;
 
   wire  [1*C_NUM_SLAVES-1:0] axil_awvalid;
   wire [32*C_NUM_SLAVES-1:0] axil_awaddr;
@@ -247,6 +293,8 @@ module system_config_address_map #(
   assign axil_scfg_araddr                      = axil_araddr[`getvec(32, C_SCFG_INDEX)] - C_SCFG_BASE_ADDR;
   assign axil_qdma_awaddr                      = axil_awaddr[`getvec(32, C_QDMA_INDEX)] - C_QDMA_BASE_ADDR;
   assign axil_qdma_araddr                      = axil_araddr[`getvec(32, C_QDMA_INDEX)] - C_QDMA_BASE_ADDR;
+  assign axil_qcsr_awaddr                      = axil_awaddr[`getvec(32, C_QCSR_INDEX)] - C_QCSR_BASE_ADDR;
+  assign axil_qcsr_araddr                      = axil_araddr[`getvec(32, C_QCSR_INDEX)] - C_QCSR_BASE_ADDR;
   assign axil_cmac0_awaddr                     = axil_awaddr[`getvec(32, C_CMAC0_INDEX)] - C_CMAC0_BASE_ADDR;
   assign axil_cmac0_araddr                     = axil_araddr[`getvec(32, C_CMAC0_INDEX)] - C_CMAC0_BASE_ADDR;
   assign axil_adap0_awaddr                     = axil_awaddr[`getvec(32, C_ADAP0_INDEX)] - C_ADAP0_BASE_ADDR;
@@ -255,8 +303,10 @@ module system_config_address_map #(
   assign axil_cmac1_araddr                     = axil_araddr[`getvec(32, C_CMAC1_INDEX)] - C_CMAC1_BASE_ADDR;
   assign axil_adap1_awaddr                     = axil_awaddr[`getvec(32, C_ADAP1_INDEX)] - C_ADAP1_BASE_ADDR;
   assign axil_adap1_araddr                     = axil_araddr[`getvec(32, C_ADAP1_INDEX)] - C_ADAP1_BASE_ADDR;
-  assign axil_smon_awddr                       = axil_awaddr[`getvec(32, C_SMON_INDEX)]  - C_SMON_BASE_ADDR;
+  assign axil_smon_awaddr                      = axil_awaddr[`getvec(32, C_SMON_INDEX)]  - C_SMON_BASE_ADDR;
   assign axil_smon_araddr                      = axil_araddr[`getvec(32, C_SMON_INDEX)] - C_SMON_BASE_ADDR;
+  assign axil_rdma_awaddr                      = axil_awaddr[`getvec(32, C_RDMA_INDEX)] - C_RDMA_BASE_ADDR;
+  assign axil_rdma_araddr                      = axil_araddr[`getvec(32, C_RDMA_INDEX)] - C_RDMA_BASE_ADDR;
   assign axil_box1_awaddr                      = axil_awaddr[`getvec(32, C_BOX1_INDEX)] - C_BOX1_BASE_ADDR;
   assign axil_box1_araddr                      = axil_araddr[`getvec(32, C_BOX1_INDEX)] - C_BOX1_BASE_ADDR;
   assign axil_box0_awaddr                      = axil_awaddr[`getvec(32, C_BOX0_INDEX)] - C_BOX0_BASE_ADDR;
@@ -296,6 +346,23 @@ module system_config_address_map #(
   assign axil_rresp[`getvec(2, C_QDMA_INDEX)]  = m_axil_qdma_rresp;
   assign m_axil_qdma_rready                    = axil_rready[C_QDMA_INDEX];
 
+  assign m_axil_qdma_csr_awvalid               = axil_awvalid[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_awaddr                = axil_qcsr_awaddr;
+  assign axil_awready[C_QCSR_INDEX]            = m_axil_qdma_csr_awready;
+  assign m_axil_qdma_csr_wvalid                = axil_wvalid[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_wdata                 = axil_wdata[`getvec(32, C_QCSR_INDEX)];
+  assign axil_wready[C_QCSR_INDEX]             = m_axil_qdma_csr_wready;
+  assign axil_bvalid[C_QCSR_INDEX]             = m_axil_qdma_csr_bvalid;
+  assign axil_bresp[`getvec(2, C_QCSR_INDEX)]  = m_axil_qdma_csr_bresp;
+  assign m_axil_qdma_csr_bready                = axil_bready[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_arvalid               = axil_arvalid[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_araddr                = axil_qcsr_araddr;
+  assign axil_arready[C_QCSR_INDEX]            = m_axil_qdma_csr_arready;
+  assign axil_rvalid[C_QCSR_INDEX]             = m_axil_qdma_csr_rvalid;
+  assign axil_rdata[`getvec(32, C_QCSR_INDEX)] = m_axil_qdma_csr_rdata;
+  assign axil_rresp[`getvec(2, C_QCSR_INDEX)]  = m_axil_qdma_csr_rresp;
+  assign m_axil_qdma_csr_rready                = axil_rready[C_QCSR_INDEX];
+
   if (NUM_CMAC_PORT == 1) begin
     assign m_axil_cmac_awvalid                    = axil_awvalid[C_CMAC0_INDEX];
     assign m_axil_cmac_awaddr                     = axil_cmac0_awaddr;
@@ -504,6 +571,23 @@ module system_config_address_map #(
   assign axil_rresp[`getvec(2, C_SMON_INDEX)]  = m_axil_smon_rresp;
   assign m_axil_smon_rready                    = axil_rready[C_SMON_INDEX];
 
+  assign m_axil_rdma_awvalid                   = axil_awvalid[C_RDMA_INDEX];
+  assign m_axil_rdma_awaddr                    = axil_rdma_awaddr;
+  assign axil_awready[C_RDMA_INDEX]            = m_axil_rdma_awready;
+  assign m_axil_rdma_wvalid                    = axil_wvalid[C_RDMA_INDEX];
+  assign m_axil_rdma_wdata                     = axil_wdata[`getvec(32, C_RDMA_INDEX)];
+  assign axil_wready[C_RDMA_INDEX]             = m_axil_rdma_wready;
+  assign axil_bvalid[C_RDMA_INDEX]             = m_axil_rdma_bvalid;
+  assign axil_bresp[`getvec(2, C_RDMA_INDEX)]  = m_axil_rdma_bresp;
+  assign m_axil_rdma_bready                    = axil_bready[C_RDMA_INDEX];
+  assign m_axil_rdma_arvalid                   = axil_arvalid[C_RDMA_INDEX];
+  assign m_axil_rdma_araddr                    = axil_rdma_araddr;
+  assign axil_arready[C_RDMA_INDEX]            = m_axil_rdma_arready;
+  assign axil_rvalid[C_RDMA_INDEX]             = m_axil_rdma_rvalid;
+  assign axil_rdata[`getvec(32, C_RDMA_INDEX)] = m_axil_rdma_rdata;
+  assign axil_rresp[`getvec(2, C_RDMA_INDEX)]  = m_axil_rdma_rresp;
+  assign m_axil_rdma_rready                    = axil_rready[C_RDMA_INDEX];
+
   system_config_axi_crossbar xbar_inst (
     .s_axi_awaddr  (s_axil_awaddr),
     .s_axi_awprot  (0),
diff --git a/src/system_config/system_config_register.v b/src/system_config/system_config_register.v
index 36e7774..d41510f 100644
--- a/src/system_config/system_config_register.v
+++ b/src/system_config/system_config_register.v
@@ -104,7 +104,7 @@ module system_config_register #(
     .DATA_W        (32)
   ) axil_reg_inst (
     .s_axil_awvalid (s_axil_awvalid),
-    .s_axil_awaddr  (s_axil_awaddr),
+    .s_axil_awaddr  (s_axil_awaddr[C_ADDR_W-1:0]),
     .s_axil_awready (s_axil_awready),
     .s_axil_wvalid  (s_axil_wvalid),
     .s_axil_wdata   (s_axil_wdata),
@@ -113,7 +113,7 @@ module system_config_register #(
     .s_axil_bresp   (s_axil_bresp),
     .s_axil_bready  (s_axil_bready),
     .s_axil_arvalid (s_axil_arvalid),
-    .s_axil_araddr  (s_axil_araddr),
+    .s_axil_araddr  (s_axil_araddr[C_ADDR_W-1:0]),
     .s_axil_arready (s_axil_arready),
     .s_axil_rvalid  (s_axil_rvalid),
     .s_axil_rdata   (s_axil_rdata),
@@ -201,11 +201,15 @@ module system_config_register #(
 
   // Shell reset register (write-only)
   //
-  // 31:3  - reserved
-  // 2     - reset for the CMAC subsystem CMAC1
-  // 1     - reset for the CMAC subsystem CMAC0
+  // 31:10 - reserved
+  // 9     - reset for the adapter of CMAC1
+  // 8     - reset for the CMAC subsystem CMAC1
+  // 7:6   - reserved
+  // 5     - reset for the adapter of CMAC0
+  // 4     - reset for the CMAC subsystem CMAC0
+  // 3:2   - reserved
+  // 1     - reset for the RDMA subsystem
   // 0     - reset for the QDMA subsystem
-  // 
   // Writing 1 to a bit of this register initiates a submodule-level reset in
   // the shell logic, which lasts until the corresponding submodule is out of
   // reset.  Mapping between bits and submodules are as follows.
diff --git a/src/system_config/vivado_ip/system_config_axi_crossbar.tcl b/src/system_config/vivado_ip/system_config_axi_crossbar.tcl
index 603d9c9..0b02c76 100644
--- a/src/system_config/vivado_ip/system_config_axi_crossbar.tcl
+++ b/src/system_config/vivado_ip/system_config_axi_crossbar.tcl
@@ -17,9 +17,9 @@
 # *************************************************************************
 set axi_crossbar system_config_axi_crossbar
 create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $axi_crossbar -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.ADDR_RANGES {3}
-    CONFIG.NUM_MI {9}
+    CONFIG.NUM_MI {11}
     CONFIG.PROTOCOL {AXI4LITE}
     CONFIG.CONNECTIVITY_MODE {SASD}
     CONFIG.R_REGISTER {1}
@@ -98,8 +98,10 @@ set_property -dict {
     CONFIG.M04_A01_BASE_ADDR {0x000000000000E000}
     CONFIG.M05_A00_BASE_ADDR {0x000000000000F000}
     CONFIG.M06_A00_BASE_ADDR {0x0000000000010000}
-    CONFIG.M07_A00_BASE_ADDR {0x0000000000200000}
-    CONFIG.M08_A00_BASE_ADDR {0x0000000000100000}
+    CONFIG.M07_A00_BASE_ADDR {0x0000000000014000}
+    CONFIG.M08_A00_BASE_ADDR {0x0000000000040000}
+    CONFIG.M09_A00_BASE_ADDR {0x0000000000200000}
+    CONFIG.M10_A00_BASE_ADDR {0x0000000000100000}
     CONFIG.M01_A00_ADDR_WIDTH {12}
     CONFIG.M01_A01_ADDR_WIDTH {13}
     CONFIG.M01_A02_ADDR_WIDTH {13}
@@ -110,6 +112,8 @@ set_property -dict {
     CONFIG.M04_A01_ADDR_WIDTH {12}
     CONFIG.M05_A00_ADDR_WIDTH {12}
     CONFIG.M06_A00_ADDR_WIDTH {13}
-    CONFIG.M07_A00_ADDR_WIDTH {20}
-    CONFIG.M08_A00_ADDR_WIDTH {20}
+    CONFIG.M07_A00_ADDR_WIDTH {14}
+    CONFIG.M08_A00_ADDR_WIDTH {18}
+    CONFIG.M09_A00_ADDR_WIDTH {20}
+    CONFIG.M10_A00_ADDR_WIDTH {20}
 } [get_ips $axi_crossbar]
diff --git a/src/system_config/vivado_ip/system_management_wiz.tcl b/src/system_config/vivado_ip/system_management_wiz.tcl
index 8e92afe..efe4669 100644
--- a/src/system_config/vivado_ip/system_management_wiz.tcl
+++ b/src/system_config/vivado_ip/system_management_wiz.tcl
@@ -20,22 +20,22 @@ create_ip -name system_management_wiz -vendor xilinx.com -library ip -module_nam
 set_property -dict {
     CONFIG.INTERFACE_SELECTION {Enable_AXI}
     CONFIG.ENABLE_RESET {false}
-    CONFIG.OT_ALARM {false} 
-    CONFIG.USER_TEMP_ALARM {false} 
-    CONFIG.VCCINT_ALARM {false} 
-    CONFIG.VCCAUX_ALARM {false} 
-    CONFIG.ENABLE_VBRAM_ALARM {false} 
-    CONFIG.CHANNEL_ENABLE_VP_VN {true} 
-    CONFIG.AVERAGE_ENABLE_VBRAM {true} 
-    CONFIG.AVERAGE_ENABLE_TEMPERATURE {true} 
-    CONFIG.AVERAGE_ENABLE_VCCINT {true} 
-    CONFIG.AVERAGE_ENABLE_VCCAUX {true} 
-    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE0_SSIT {true} 
-    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE1_SSIT {true} 
-    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE0_SSIT {true} 
-    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE0_SSIT {true} 
-    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE1_SSIT {true} 
-    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE1_SSIT {true} 
-    CONFIG.Enable_Slave0 {true} 
+    CONFIG.OT_ALARM {false}
+    CONFIG.USER_TEMP_ALARM {false}
+    CONFIG.VCCINT_ALARM {false}
+    CONFIG.VCCAUX_ALARM {false}
+    CONFIG.ENABLE_VBRAM_ALARM {false}
+    CONFIG.CHANNEL_ENABLE_VP_VN {true}
+    CONFIG.AVERAGE_ENABLE_VBRAM {true}
+    CONFIG.AVERAGE_ENABLE_TEMPERATURE {true}
+    CONFIG.AVERAGE_ENABLE_VCCINT {true}
+    CONFIG.AVERAGE_ENABLE_VCCAUX {true}
+    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE0_SSIT {true}
+    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE1_SSIT {true}
+    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE0_SSIT {true}
+    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE0_SSIT {true}
+    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE1_SSIT {true}
+    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE1_SSIT {true}
+    CONFIG.Enable_Slave0 {true}
     CONFIG.Enable_Slave1 {true}
 } [get_ips $system_management_wiz]
diff --git a/src/utility/axi_3to1_interconnect_to_dev_mem.sv b/src/utility/axi_3to1_interconnect_to_dev_mem.sv
new file mode 100755
index 0000000..afcc02e
--- /dev/null
+++ b/src/utility/axi_3to1_interconnect_to_dev_mem.sv
@@ -0,0 +1,431 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module axi_3to1_interconnect_to_dev_mem #(
+  parameter C_AXI_DATA_WIDTH = 512,
+  parameter C_AXI_ADDR_WIDTH = 64
+) (
+
+  input     [4 : 0] s_axi_qdma_mm_awid,
+  input    [63 : 0] s_axi_qdma_mm_awaddr,
+  input     [3 : 0] s_axi_qdma_mm_awqos,
+  input     [7 : 0] s_axi_qdma_mm_awlen,
+  input     [2 : 0] s_axi_qdma_mm_awsize,
+  input     [1 : 0] s_axi_qdma_mm_awburst,
+  input     [3 : 0] s_axi_qdma_mm_awcache,
+  input     [2 : 0] s_axi_qdma_mm_awprot,
+  input             s_axi_qdma_mm_awvalid,
+  output            s_axi_qdma_mm_awready,
+  input   [511 : 0] s_axi_qdma_mm_wdata,
+  input    [63 : 0] s_axi_qdma_mm_wstrb,
+  input             s_axi_qdma_mm_wlast,
+  input             s_axi_qdma_mm_wvalid,
+  output            s_axi_qdma_mm_wready,
+  input             s_axi_qdma_mm_awlock,
+  output    [4 : 0] s_axi_qdma_mm_bid,
+  output    [1 : 0] s_axi_qdma_mm_bresp,
+  output            s_axi_qdma_mm_bvalid,
+  input             s_axi_qdma_mm_bready,
+  input     [4 : 0] s_axi_qdma_mm_arid,
+  input    [63 : 0] s_axi_qdma_mm_araddr,
+  input     [7 : 0] s_axi_qdma_mm_arlen,
+  input     [2 : 0] s_axi_qdma_mm_arsize,
+  input     [1 : 0] s_axi_qdma_mm_arburst,
+  input     [3 : 0] s_axi_qdma_mm_arcache,
+  input     [2 : 0] s_axi_qdma_mm_arprot,
+  input             s_axi_qdma_mm_arvalid,
+  output            s_axi_qdma_mm_arready,
+  output    [4 : 0] s_axi_qdma_mm_rid,
+  output  [511 : 0] s_axi_qdma_mm_rdata,
+  output    [1 : 0] s_axi_qdma_mm_rresp,
+  output            s_axi_qdma_mm_rlast,
+  output            s_axi_qdma_mm_rvalid,
+  input             s_axi_qdma_mm_rready,
+  input             s_axi_qdma_mm_arlock,
+  input     [3 : 0] s_axi_qdma_mm_arqos,
+
+  input             s_axi_compute_logic_awid,
+  input    [63 : 0] s_axi_compute_logic_awaddr,
+  input     [3 : 0] s_axi_compute_logic_awqos,
+  input     [7 : 0] s_axi_compute_logic_awlen,
+  input     [2 : 0] s_axi_compute_logic_awsize,
+  input     [1 : 0] s_axi_compute_logic_awburst,
+  input     [3 : 0] s_axi_compute_logic_awcache,
+  input     [2 : 0] s_axi_compute_logic_awprot,
+  input             s_axi_compute_logic_awvalid,
+  output            s_axi_compute_logic_awready,
+  input   [511 : 0] s_axi_compute_logic_wdata,
+  input    [63 : 0] s_axi_compute_logic_wstrb,
+  input             s_axi_compute_logic_wlast,
+  input             s_axi_compute_logic_wvalid,
+  output            s_axi_compute_logic_wready,
+  input             s_axi_compute_logic_awlock,
+  output            s_axi_compute_logic_bid,
+  output    [1 : 0] s_axi_compute_logic_bresp,
+  output            s_axi_compute_logic_bvalid,
+  input             s_axi_compute_logic_bready,
+  input             s_axi_compute_logic_arid,
+  input    [63 : 0] s_axi_compute_logic_araddr,
+  input     [7 : 0] s_axi_compute_logic_arlen,
+  input     [2 : 0] s_axi_compute_logic_arsize,
+  input     [1 : 0] s_axi_compute_logic_arburst,
+  input     [3 : 0] s_axi_compute_logic_arcache,
+  input     [2 : 0] s_axi_compute_logic_arprot,
+  input             s_axi_compute_logic_arvalid,
+  output            s_axi_compute_logic_arready,
+  output            s_axi_compute_logic_rid,
+  output  [511 : 0] s_axi_compute_logic_rdata,
+  output    [1 : 0] s_axi_compute_logic_rresp,
+  output            s_axi_compute_logic_rlast,
+  output            s_axi_compute_logic_rvalid,
+  input             s_axi_compute_logic_rready,
+  input             s_axi_compute_logic_arlock,
+  input     [3 : 0] s_axi_compute_logic_arqos,
+
+  input     [4 : 0] s_axi_from_sys_crossbar_awid,
+  input    [63 : 0] s_axi_from_sys_crossbar_awaddr,
+  input     [3 : 0] s_axi_from_sys_crossbar_awqos,
+  input     [7 : 0] s_axi_from_sys_crossbar_awlen,
+  input     [2 : 0] s_axi_from_sys_crossbar_awsize,
+  input     [1 : 0] s_axi_from_sys_crossbar_awburst,
+  input     [3 : 0] s_axi_from_sys_crossbar_awcache,
+  input     [2 : 0] s_axi_from_sys_crossbar_awprot,
+  input             s_axi_from_sys_crossbar_awvalid,
+  output            s_axi_from_sys_crossbar_awready,
+  input   [511 : 0] s_axi_from_sys_crossbar_wdata,
+  input    [63 : 0] s_axi_from_sys_crossbar_wstrb,
+  input             s_axi_from_sys_crossbar_wlast,
+  input             s_axi_from_sys_crossbar_wvalid,
+  output            s_axi_from_sys_crossbar_wready,
+  input             s_axi_from_sys_crossbar_awlock,
+  output    [4 : 0] s_axi_from_sys_crossbar_bid,
+  output    [1 : 0] s_axi_from_sys_crossbar_bresp,
+  output            s_axi_from_sys_crossbar_bvalid,
+  input             s_axi_from_sys_crossbar_bready,
+  input     [4 : 0] s_axi_from_sys_crossbar_arid,
+  input    [63 : 0] s_axi_from_sys_crossbar_araddr,
+  input     [7 : 0] s_axi_from_sys_crossbar_arlen,
+  input     [2 : 0] s_axi_from_sys_crossbar_arsize,
+  input     [1 : 0] s_axi_from_sys_crossbar_arburst,
+  input     [3 : 0] s_axi_from_sys_crossbar_arcache,
+  input     [2 : 0] s_axi_from_sys_crossbar_arprot,
+  input             s_axi_from_sys_crossbar_arvalid,
+  output            s_axi_from_sys_crossbar_arready,
+  output    [4 : 0] s_axi_from_sys_crossbar_rid,
+  output  [511 : 0] s_axi_from_sys_crossbar_rdata,
+  output    [1 : 0] s_axi_from_sys_crossbar_rresp,
+  output            s_axi_from_sys_crossbar_rlast,
+  output            s_axi_from_sys_crossbar_rvalid,
+  input             s_axi_from_sys_crossbar_rready,
+  input             s_axi_from_sys_crossbar_arlock,
+  input     [3 : 0] s_axi_from_sys_crossbar_arqos,
+
+  output    [4 : 0] m_axi_dev_mem_awid,
+  output   [63 : 0] m_axi_dev_mem_awaddr,
+  output    [7 : 0] m_axi_dev_mem_awlen,
+  output    [2 : 0] m_axi_dev_mem_awsize,
+  output    [1 : 0] m_axi_dev_mem_awburst,
+  output            m_axi_dev_mem_awlock,
+  output    [3 : 0] m_axi_dev_mem_awqos,
+  output    [3 : 0] m_axi_dev_mem_awregion,
+  output    [3 : 0] m_axi_dev_mem_awcache,
+  output    [2 : 0] m_axi_dev_mem_awprot,
+  output            m_axi_dev_mem_awvalid,
+  input             m_axi_dev_mem_awready,
+  output  [511 : 0] m_axi_dev_mem_wdata,
+  output   [63 : 0] m_axi_dev_mem_wstrb,
+  output            m_axi_dev_mem_wlast,
+  output            m_axi_dev_mem_wvalid,
+  input             m_axi_dev_mem_wready,
+  input     [4 : 0] m_axi_dev_mem_bid,
+  input     [1 : 0] m_axi_dev_mem_bresp,
+  input             m_axi_dev_mem_bvalid,
+  output            m_axi_dev_mem_bready,
+  output    [4 : 0] m_axi_dev_mem_arid,
+  output   [63 : 0] m_axi_dev_mem_araddr,
+  output    [7 : 0] m_axi_dev_mem_arlen,
+  output    [2 : 0] m_axi_dev_mem_arsize,
+  output    [1 : 0] m_axi_dev_mem_arburst,
+  output            m_axi_dev_mem_arlock,
+  output    [3 : 0] m_axi_dev_mem_arqos,
+  output    [3 : 0] m_axi_dev_mem_arregion,
+  output    [3 : 0] m_axi_dev_mem_arcache,
+  output    [2 : 0] m_axi_dev_mem_arprot,
+  output            m_axi_dev_mem_arvalid,
+  input             m_axi_dev_mem_arready,
+  input     [4 : 0] m_axi_dev_mem_rid,
+  input   [511 : 0] m_axi_dev_mem_rdata,
+  input     [1 : 0] m_axi_dev_mem_rresp,
+  input             m_axi_dev_mem_rlast,
+  input             m_axi_dev_mem_rvalid,
+  output            m_axi_dev_mem_rready,
+
+  input             axis_aclk,
+  input             axis_arestn
+);
+
+localparam C_NUM_MASTERS = 3;
+
+localparam C_QDMA_MM_IDX          = 0;
+localparam C_COMPUTE_LOGIC_IDX    = 1;
+localparam C_FROM_SYS_CROSSBAR_IDX  = 2;
+
+logic   [C_NUM_MASTERS*5-1 : 0] axi_awid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_awaddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_awlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_awburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_awlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_awvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_awready;
+logic [C_NUM_MASTERS*512-1 : 0] axi_wdata;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_wstrb;
+logic     [C_NUM_MASTERS-1 : 0] axi_wlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_wvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_wready;
+logic   [C_NUM_MASTERS*5-1 : 0] axi_bid;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_bresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_bvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_bready;
+logic   [C_NUM_MASTERS*5-1 : 0] axi_arid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_araddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_arlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_arburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_arlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_arvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_arready;
+logic   [C_NUM_MASTERS*5-1 : 0] axi_rid;
+logic [C_NUM_MASTERS*512-1 : 0] axi_rdata;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_rresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_rlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_rvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_rready;
+
+
+// AXI slave signals for data access from qdma mm channel
+assign axi_awid   [C_QDMA_MM_IDX*5 +: 5]                = s_axi_qdma_mm_awvalid ? {1'b1,s_axi_qdma_mm_awid[3:0]} : 5'd0;
+assign axi_awaddr [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_awaddr;
+assign axi_awqos  [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_awqos;
+assign axi_awlen  [C_QDMA_MM_IDX *8 +: 8]               = s_axi_qdma_mm_awlen;
+assign axi_awsize [C_QDMA_MM_IDX *3 +: 3]               = s_axi_qdma_mm_awsize;
+assign axi_awburst[C_QDMA_MM_IDX *2 +: 2]               = s_axi_qdma_mm_awburst;
+assign axi_awcache[C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_awcache;
+assign axi_awprot [C_QDMA_MM_IDX *3 +: 3]               = s_axi_qdma_mm_awprot;
+assign axi_awvalid[C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_awvalid;
+assign s_axi_qdma_mm_awready                            = axi_awready[C_QDMA_MM_IDX *1 +: 1];
+assign axi_wdata  [C_QDMA_MM_IDX *512 +: 512]           = s_axi_qdma_mm_wdata;
+assign axi_wstrb  [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_wstrb;
+assign axi_wlast  [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_wlast;
+assign axi_wvalid [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_wvalid;
+assign s_axi_qdma_mm_wready                             = axi_wready[C_QDMA_MM_IDX *1 +: 1];
+assign axi_awlock [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_awlock;
+assign s_axi_qdma_mm_bid                                = axi_bid[C_QDMA_MM_IDX *5 +: 4];
+assign s_axi_qdma_mm_bresp                              = axi_bresp[C_QDMA_MM_IDX *2 +: 2];
+assign s_axi_qdma_mm_bvalid                             = axi_bvalid[C_QDMA_MM_IDX *1 +: 1];
+assign axi_bready [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_bready;
+assign axi_arid   [C_QDMA_MM_IDX *5 +: 5]               = s_axi_qdma_mm_arvalid ? {1'b1,s_axi_qdma_mm_arid[3:0]} : 5'd0;
+assign axi_araddr [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_araddr;
+assign axi_arlen  [C_QDMA_MM_IDX *8  +: 8]              = s_axi_qdma_mm_arlen;
+assign axi_arsize [C_QDMA_MM_IDX *3  +: 3]              = s_axi_qdma_mm_arsize;
+assign axi_arburst[C_QDMA_MM_IDX *2  +: 2]              = s_axi_qdma_mm_arburst;
+assign axi_arcache[C_QDMA_MM_IDX *4  +: 4]              = s_axi_qdma_mm_arcache;
+assign axi_arprot [C_QDMA_MM_IDX *3  +: 3]              = s_axi_qdma_mm_arprot;
+assign axi_arvalid[C_QDMA_MM_IDX *1  +: 1]              = s_axi_qdma_mm_arvalid;
+assign s_axi_qdma_mm_arready                            = axi_arready[C_QDMA_MM_IDX *1 +: 1];
+assign s_axi_qdma_mm_rid                                = axi_rid[C_QDMA_MM_IDX *5 +: 4];
+assign s_axi_qdma_mm_rdata                              = axi_rdata[C_QDMA_MM_IDX *512 +: 512];
+assign s_axi_qdma_mm_rresp                              = axi_rresp[C_QDMA_MM_IDX *2 +: 2];
+assign s_axi_qdma_mm_rlast                              = axi_rlast[C_QDMA_MM_IDX *1 +: 1];
+assign s_axi_qdma_mm_rvalid                             = axi_rvalid[C_QDMA_MM_IDX *1 +: 1];
+assign axi_rready [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_rready;
+assign axi_arlock [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_arlock;
+assign axi_arqos  [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_arqos;
+
+// AXI slave signals for data access from compute logic
+//assign axi_awid   [C_COMPUTE_LOGIC_IDX *2 +: 2]      = {1'b0, s_axi_compute_logic_awid};
+assign axi_awid   [C_COMPUTE_LOGIC_IDX *5 +: 5]      = s_axi_compute_logic_awvalid ? 5'd8 : 5'd0;
+assign axi_awaddr [C_COMPUTE_LOGIC_IDX *64 +: 64]    = s_axi_compute_logic_awaddr;
+assign axi_awqos  [C_COMPUTE_LOGIC_IDX *4 +: 4]      = s_axi_compute_logic_awqos;
+assign axi_awlen  [C_COMPUTE_LOGIC_IDX *8 +: 8]      = s_axi_compute_logic_awlen;
+assign axi_awsize [C_COMPUTE_LOGIC_IDX *3 +: 3]      = s_axi_compute_logic_awsize;
+assign axi_awburst[C_COMPUTE_LOGIC_IDX *2 +: 2]      = s_axi_compute_logic_awburst;
+assign axi_awcache[C_COMPUTE_LOGIC_IDX *4 +: 4]      = s_axi_compute_logic_awcache;
+assign axi_awprot [C_COMPUTE_LOGIC_IDX *3 +: 3]      = s_axi_compute_logic_awprot;
+assign axi_awvalid[C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_awvalid;
+assign s_axi_compute_logic_awready                   = axi_awready[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_wdata  [C_COMPUTE_LOGIC_IDX *512 +: 512]  = s_axi_compute_logic_wdata;
+assign axi_wstrb  [C_COMPUTE_LOGIC_IDX *64 +: 64]    = s_axi_compute_logic_wstrb;
+assign axi_wlast  [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_wlast;
+assign axi_wvalid [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_wvalid;
+assign s_axi_compute_logic_wready                    = axi_wready[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_awlock [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_awlock;
+assign s_axi_compute_logic_bid                       = axi_bid[C_COMPUTE_LOGIC_IDX *5 +: 1];
+assign s_axi_compute_logic_bresp                     = axi_bresp[C_COMPUTE_LOGIC_IDX *2 +: 2];
+assign s_axi_compute_logic_bvalid                    = axi_bvalid[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_bready [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_bready;
+assign axi_arid   [C_COMPUTE_LOGIC_IDX *5 +: 5]      = s_axi_compute_logic_arvalid ? 5'd8 : 5'd4;
+assign axi_araddr [C_COMPUTE_LOGIC_IDX *64 +: 64]    = s_axi_compute_logic_araddr;
+assign axi_arlen  [C_COMPUTE_LOGIC_IDX *8  +: 8]     = s_axi_compute_logic_arlen;
+assign axi_arsize [C_COMPUTE_LOGIC_IDX *3  +: 3]     = s_axi_compute_logic_arsize;
+assign axi_arburst[C_COMPUTE_LOGIC_IDX *2  +: 2]     = s_axi_compute_logic_arburst;
+assign axi_arcache[C_COMPUTE_LOGIC_IDX *4  +: 4]     = s_axi_compute_logic_arcache;
+assign axi_arprot [C_COMPUTE_LOGIC_IDX *3  +: 3]     = s_axi_compute_logic_arprot;
+assign axi_arvalid[C_COMPUTE_LOGIC_IDX *1  +: 1]     = s_axi_compute_logic_arvalid;
+assign s_axi_compute_logic_arready                   = axi_arready[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign s_axi_compute_logic_rid                       = axi_rid[C_COMPUTE_LOGIC_IDX *5 +: 1];
+assign s_axi_compute_logic_rdata                     = axi_rdata[C_COMPUTE_LOGIC_IDX *512 +: 512];
+assign s_axi_compute_logic_rresp                     = axi_rresp[C_COMPUTE_LOGIC_IDX *2 +: 2];
+assign s_axi_compute_logic_rlast                     = axi_rlast[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign s_axi_compute_logic_rvalid                    = axi_rvalid[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_rready [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_rready;
+assign axi_arlock [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_arlock;
+assign axi_arqos  [C_COMPUTE_LOGIC_IDX *4 +: 4]      = s_axi_compute_logic_arqos;
+
+//s_axi_from_sys_crossbar_awid
+assign axi_awid   [C_FROM_SYS_CROSSBAR_IDX *5 +: 5]      = s_axi_from_sys_crossbar_awvalid ? s_axi_from_sys_crossbar_awid : 5'd0;
+assign axi_awaddr [C_FROM_SYS_CROSSBAR_IDX *64 +: 64]    = s_axi_from_sys_crossbar_awaddr;
+assign axi_awqos  [C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_awqos;
+assign axi_awlen  [C_FROM_SYS_CROSSBAR_IDX *8 +: 8]      = s_axi_from_sys_crossbar_awlen;
+assign axi_awsize [C_FROM_SYS_CROSSBAR_IDX *3 +: 3]      = s_axi_from_sys_crossbar_awsize;
+assign axi_awburst[C_FROM_SYS_CROSSBAR_IDX *2 +: 2]      = s_axi_from_sys_crossbar_awburst;
+assign axi_awcache[C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_awcache;
+assign axi_awprot [C_FROM_SYS_CROSSBAR_IDX *3 +: 3]      = s_axi_from_sys_crossbar_awprot;
+assign axi_awvalid[C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_awvalid;
+assign s_axi_from_sys_crossbar_awready                   = axi_awready[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_wdata  [C_FROM_SYS_CROSSBAR_IDX *512 +: 512]  = s_axi_from_sys_crossbar_wdata;
+assign axi_wstrb  [C_FROM_SYS_CROSSBAR_IDX *64 +: 64]    = s_axi_from_sys_crossbar_wstrb;
+assign axi_wlast  [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_wlast;
+assign axi_wvalid [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_wvalid;
+assign s_axi_from_sys_crossbar_wready                    = axi_wready[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_awlock [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_awlock;
+assign s_axi_from_sys_crossbar_bid                       = axi_bid[C_FROM_SYS_CROSSBAR_IDX *5 +: 5];
+assign s_axi_from_sys_crossbar_bresp                     = axi_bresp[C_FROM_SYS_CROSSBAR_IDX *2 +: 2];
+assign s_axi_from_sys_crossbar_bvalid                    = axi_bvalid[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_bready [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_bready;
+assign axi_arid   [C_FROM_SYS_CROSSBAR_IDX *5 +: 5]      = s_axi_from_sys_crossbar_arvalid ? s_axi_from_sys_crossbar_arid : 5'd0;
+assign axi_araddr [C_FROM_SYS_CROSSBAR_IDX *64 +: 64]    = s_axi_from_sys_crossbar_araddr;
+assign axi_arlen  [C_FROM_SYS_CROSSBAR_IDX *8  +: 8]     = s_axi_from_sys_crossbar_arlen;
+assign axi_arsize [C_FROM_SYS_CROSSBAR_IDX *3  +: 3]     = s_axi_from_sys_crossbar_arsize;
+assign axi_arburst[C_FROM_SYS_CROSSBAR_IDX *2  +: 2]     = s_axi_from_sys_crossbar_arburst;
+assign axi_arcache[C_FROM_SYS_CROSSBAR_IDX *4  +: 4]     = s_axi_from_sys_crossbar_arcache;
+assign axi_arprot [C_FROM_SYS_CROSSBAR_IDX *3  +: 3]     = s_axi_from_sys_crossbar_arprot;
+assign axi_arvalid[C_FROM_SYS_CROSSBAR_IDX *1  +: 1]     = s_axi_from_sys_crossbar_arvalid;
+assign s_axi_from_sys_crossbar_arready                   = axi_arready[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign s_axi_from_sys_crossbar_rid                       = axi_rid[C_FROM_SYS_CROSSBAR_IDX *5 +: 5];
+assign s_axi_from_sys_crossbar_rdata                     = axi_rdata[C_FROM_SYS_CROSSBAR_IDX *512 +: 512];
+assign s_axi_from_sys_crossbar_rresp                     = axi_rresp[C_FROM_SYS_CROSSBAR_IDX *2 +: 2];
+assign s_axi_from_sys_crossbar_rlast                     = axi_rlast[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign s_axi_from_sys_crossbar_rvalid                    = axi_rvalid[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_rready [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_rready;
+assign axi_arlock [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_arlock;
+assign axi_arqos  [C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_arqos;
+
+dev_mem_3to1_axi_crossbar dev_mem_3to1_axi_crossbar_inst (
+  // Master interface only has 4-bit ID width
+  .m_axi_awaddr    (m_axi_dev_mem_awaddr),
+  .m_axi_awprot    (m_axi_dev_mem_awprot),
+  .m_axi_awvalid   (m_axi_dev_mem_awvalid),
+  .m_axi_awready   (m_axi_dev_mem_awready),
+  .m_axi_awsize    (m_axi_dev_mem_awsize),
+  .m_axi_awburst   (m_axi_dev_mem_awburst),
+  .m_axi_awcache   (m_axi_dev_mem_awcache),
+  .m_axi_awlen     (m_axi_dev_mem_awlen),
+  .m_axi_awlock    (m_axi_dev_mem_awlock),
+  .m_axi_awqos     (m_axi_dev_mem_awqos),
+  .m_axi_awregion  (m_axi_dev_mem_awregion),
+  .m_axi_awid      (m_axi_dev_mem_awid),
+  .m_axi_wdata     (m_axi_dev_mem_wdata),
+  .m_axi_wstrb     (m_axi_dev_mem_wstrb),
+  .m_axi_wvalid    (m_axi_dev_mem_wvalid),
+  .m_axi_wready    (m_axi_dev_mem_wready),
+  .m_axi_wlast     (m_axi_dev_mem_wlast),
+  .m_axi_bresp     (m_axi_dev_mem_bresp),
+  .m_axi_bvalid    (m_axi_dev_mem_bvalid),
+  .m_axi_bready    (m_axi_dev_mem_bready),
+  .m_axi_bid       (m_axi_dev_mem_bid),
+  .m_axi_araddr    (m_axi_dev_mem_araddr),
+  .m_axi_arprot    (m_axi_dev_mem_arprot),
+  .m_axi_arvalid   (m_axi_dev_mem_arvalid),
+  .m_axi_arready   (m_axi_dev_mem_arready),
+  .m_axi_arsize    (m_axi_dev_mem_arsize),
+  .m_axi_arburst   (m_axi_dev_mem_arburst),
+  .m_axi_arcache   (m_axi_dev_mem_arcache),
+  .m_axi_arlock    (m_axi_dev_mem_arlock),
+  .m_axi_arlen     (m_axi_dev_mem_arlen),
+  .m_axi_arqos     (m_axi_dev_mem_arqos),
+  .m_axi_arregion  (m_axi_dev_mem_arregion),
+  .m_axi_arid      (m_axi_dev_mem_arid),
+  .m_axi_rdata     (m_axi_dev_mem_rdata),
+  .m_axi_rresp     (m_axi_dev_mem_rresp),
+  .m_axi_rvalid    (m_axi_dev_mem_rvalid),
+  .m_axi_rready    (m_axi_dev_mem_rready),
+  .m_axi_rlast     (m_axi_dev_mem_rlast),
+  .m_axi_rid       (m_axi_dev_mem_rid),
+
+  // Slave interface has 12-bit ID width
+  .s_axi_awid      (axi_awid),
+  .s_axi_awaddr    (axi_awaddr),
+  .s_axi_awqos     (axi_awqos),
+  .s_axi_awlen     (axi_awlen),
+  .s_axi_awsize    (axi_awsize),
+  .s_axi_awburst   (axi_awburst),
+  .s_axi_awcache   (axi_awcache),
+  .s_axi_awprot    (axi_awprot),
+  .s_axi_awvalid   (axi_awvalid),
+  .s_axi_awready   (axi_awready),
+  .s_axi_wdata     (axi_wdata),
+  .s_axi_wstrb     (axi_wstrb),
+  .s_axi_wlast     (axi_wlast),
+  .s_axi_wvalid    (axi_wvalid),
+  .s_axi_wready    (axi_wready),
+  .s_axi_awlock    (axi_awlock),
+  .s_axi_bid       (axi_bid),
+  .s_axi_bresp     (axi_bresp),
+  .s_axi_bvalid    (axi_bvalid),
+  .s_axi_bready    (axi_bready),
+  .s_axi_arid      (axi_arid),
+  .s_axi_araddr    (axi_araddr),
+  .s_axi_arlen     (axi_arlen),
+  .s_axi_arsize    (axi_arsize),
+  .s_axi_arburst   (axi_arburst),
+  .s_axi_arcache   (axi_arcache),
+  .s_axi_arprot    (axi_arprot),
+  .s_axi_arvalid   (axi_arvalid),
+  .s_axi_arready   (axi_arready),
+  .s_axi_rid       (axi_rid),
+  .s_axi_rdata     (axi_rdata),
+  .s_axi_rresp     (axi_rresp),
+  .s_axi_rlast     (axi_rlast),
+  .s_axi_rvalid    (axi_rvalid),
+  .s_axi_rready    (axi_rready),
+  .s_axi_arlock    (axi_arlock),
+  .s_axi_arqos     (axi_arqos),
+
+  .aclk   (axis_aclk),
+  .aresetn(axis_arestn)
+);
+
+endmodule: axi_3to1_interconnect_to_dev_mem
\ No newline at end of file
diff --git a/src/utility/axi_5to2_interconnect_to_sys_mem.sv b/src/utility/axi_5to2_interconnect_to_sys_mem.sv
new file mode 100755
index 0000000..9da1907
--- /dev/null
+++ b/src/utility/axi_5to2_interconnect_to_sys_mem.sv
@@ -0,0 +1,756 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module axi_5to2_interconnect_to_sys_mem #(
+  parameter C_AXI_DATA_WIDTH = 512,
+  parameter C_AXI_ADDR_WIDTH = 64
+) (
+  input             s_axi_rdma_get_wqe_awid,
+  input    [63 : 0] s_axi_rdma_get_wqe_awaddr,
+  input     [3 : 0] s_axi_rdma_get_wqe_awqos,
+  input     [7 : 0] s_axi_rdma_get_wqe_awlen,
+  input     [2 : 0] s_axi_rdma_get_wqe_awsize,
+  input     [1 : 0] s_axi_rdma_get_wqe_awburst,
+  input     [3 : 0] s_axi_rdma_get_wqe_awcache,
+  input     [2 : 0] s_axi_rdma_get_wqe_awprot,
+  input             s_axi_rdma_get_wqe_awvalid,
+  output            s_axi_rdma_get_wqe_awready,
+  input   [511 : 0] s_axi_rdma_get_wqe_wdata,
+  input    [63 : 0] s_axi_rdma_get_wqe_wstrb,
+  input             s_axi_rdma_get_wqe_wlast,
+  input             s_axi_rdma_get_wqe_wvalid,
+  output            s_axi_rdma_get_wqe_wready,
+  input             s_axi_rdma_get_wqe_awlock,
+  output            s_axi_rdma_get_wqe_bid,
+  output    [1 : 0] s_axi_rdma_get_wqe_bresp,
+  output            s_axi_rdma_get_wqe_bvalid,
+  input             s_axi_rdma_get_wqe_bready,
+  input             s_axi_rdma_get_wqe_arid,
+  input    [63 : 0] s_axi_rdma_get_wqe_araddr,
+  input     [7 : 0] s_axi_rdma_get_wqe_arlen,
+  input     [2 : 0] s_axi_rdma_get_wqe_arsize,
+  input     [1 : 0] s_axi_rdma_get_wqe_arburst,
+  input     [3 : 0] s_axi_rdma_get_wqe_arcache,
+  input     [2 : 0] s_axi_rdma_get_wqe_arprot,
+  input             s_axi_rdma_get_wqe_arvalid,
+  output            s_axi_rdma_get_wqe_arready,
+  output            s_axi_rdma_get_wqe_rid,
+  output  [511 : 0] s_axi_rdma_get_wqe_rdata,
+  output    [1 : 0] s_axi_rdma_get_wqe_rresp,
+  output            s_axi_rdma_get_wqe_rlast,
+  output            s_axi_rdma_get_wqe_rvalid,
+  input             s_axi_rdma_get_wqe_rready,
+  input             s_axi_rdma_get_wqe_arlock,
+  input     [3 : 0] s_axi_rdma_get_wqe_arqos,
+
+  input             s_axi_rdma_get_payload_awid,
+  input    [63 : 0] s_axi_rdma_get_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_get_payload_awqos,
+  input     [7 : 0] s_axi_rdma_get_payload_awlen,
+  input     [2 : 0] s_axi_rdma_get_payload_awsize,
+  input     [1 : 0] s_axi_rdma_get_payload_awburst,
+  input     [3 : 0] s_axi_rdma_get_payload_awcache,
+  input     [2 : 0] s_axi_rdma_get_payload_awprot,
+  input             s_axi_rdma_get_payload_awvalid,
+  output            s_axi_rdma_get_payload_awready,
+  input   [511 : 0] s_axi_rdma_get_payload_wdata,
+  input    [63 : 0] s_axi_rdma_get_payload_wstrb,
+  input             s_axi_rdma_get_payload_wlast,
+  input             s_axi_rdma_get_payload_wvalid,
+  output            s_axi_rdma_get_payload_wready,
+  input             s_axi_rdma_get_payload_awlock,
+  output            s_axi_rdma_get_payload_bid,
+  output    [1 : 0] s_axi_rdma_get_payload_bresp,
+  output            s_axi_rdma_get_payload_bvalid,
+  input             s_axi_rdma_get_payload_bready,
+  input             s_axi_rdma_get_payload_arid,
+  input    [63 : 0] s_axi_rdma_get_payload_araddr,
+  input     [7 : 0] s_axi_rdma_get_payload_arlen,
+  input     [2 : 0] s_axi_rdma_get_payload_arsize,
+  input     [1 : 0] s_axi_rdma_get_payload_arburst,
+  input     [3 : 0] s_axi_rdma_get_payload_arcache,
+  input     [2 : 0] s_axi_rdma_get_payload_arprot,
+  input             s_axi_rdma_get_payload_arvalid,
+  output            s_axi_rdma_get_payload_arready,
+  output            s_axi_rdma_get_payload_rid,
+  output  [511 : 0] s_axi_rdma_get_payload_rdata,
+  output    [1 : 0] s_axi_rdma_get_payload_rresp,
+  output            s_axi_rdma_get_payload_rlast,
+  output            s_axi_rdma_get_payload_rvalid,
+  input             s_axi_rdma_get_payload_rready,
+  input             s_axi_rdma_get_payload_arlock,
+  input     [3 : 0] s_axi_rdma_get_payload_arqos,
+
+  input             s_axi_rdma_completion_awid,
+  input    [63 : 0] s_axi_rdma_completion_awaddr,
+  input     [3 : 0] s_axi_rdma_completion_awqos,
+  input     [7 : 0] s_axi_rdma_completion_awlen,
+  input     [2 : 0] s_axi_rdma_completion_awsize,
+  input     [1 : 0] s_axi_rdma_completion_awburst,
+  input     [3 : 0] s_axi_rdma_completion_awcache,
+  input     [2 : 0] s_axi_rdma_completion_awprot,
+  input             s_axi_rdma_completion_awvalid,
+  output            s_axi_rdma_completion_awready,
+  input   [511 : 0] s_axi_rdma_completion_wdata,
+  input    [63 : 0] s_axi_rdma_completion_wstrb,
+  input             s_axi_rdma_completion_wlast,
+  input             s_axi_rdma_completion_wvalid,
+  output            s_axi_rdma_completion_wready,
+  input             s_axi_rdma_completion_awlock,
+  output            s_axi_rdma_completion_bid,
+  output    [1 : 0] s_axi_rdma_completion_bresp,
+  output            s_axi_rdma_completion_bvalid,
+  input             s_axi_rdma_completion_bready,
+  input             s_axi_rdma_completion_arid,
+  input    [63 : 0] s_axi_rdma_completion_araddr,
+  input     [7 : 0] s_axi_rdma_completion_arlen,
+  input     [2 : 0] s_axi_rdma_completion_arsize,
+  input     [1 : 0] s_axi_rdma_completion_arburst,
+  input     [3 : 0] s_axi_rdma_completion_arcache,
+  input     [2 : 0] s_axi_rdma_completion_arprot,
+  input             s_axi_rdma_completion_arvalid,
+  output            s_axi_rdma_completion_arready,
+  output            s_axi_rdma_completion_rid,
+  output  [511 : 0] s_axi_rdma_completion_rdata,
+  output    [1 : 0] s_axi_rdma_completion_rresp,
+  output            s_axi_rdma_completion_rlast,
+  output            s_axi_rdma_completion_rvalid,
+  input             s_axi_rdma_completion_rready,
+  input             s_axi_rdma_completion_arlock,
+  input     [3 : 0] s_axi_rdma_completion_arqos,
+
+  input             s_axi_rdma_send_write_payload_awid,
+  input    [63 : 0] s_axi_rdma_send_write_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_send_write_payload_awqos,
+  input     [7 : 0] s_axi_rdma_send_write_payload_awlen,
+  input     [2 : 0] s_axi_rdma_send_write_payload_awsize,
+  input     [1 : 0] s_axi_rdma_send_write_payload_awburst,
+  input     [3 : 0] s_axi_rdma_send_write_payload_awcache,
+  input     [2 : 0] s_axi_rdma_send_write_payload_awprot,
+  input             s_axi_rdma_send_write_payload_awvalid,
+  output            s_axi_rdma_send_write_payload_awready,
+  input   [511 : 0] s_axi_rdma_send_write_payload_wdata,
+  input    [63 : 0] s_axi_rdma_send_write_payload_wstrb,
+  input             s_axi_rdma_send_write_payload_wlast,
+  input             s_axi_rdma_send_write_payload_wvalid,
+  output            s_axi_rdma_send_write_payload_wready,
+  input             s_axi_rdma_send_write_payload_awlock,
+  output            s_axi_rdma_send_write_payload_bid,
+  output    [1 : 0] s_axi_rdma_send_write_payload_bresp,
+  output            s_axi_rdma_send_write_payload_bvalid,
+  input             s_axi_rdma_send_write_payload_bready,
+  input             s_axi_rdma_send_write_payload_arid,
+  input    [63 : 0] s_axi_rdma_send_write_payload_araddr,
+  input     [7 : 0] s_axi_rdma_send_write_payload_arlen,
+  input     [2 : 0] s_axi_rdma_send_write_payload_arsize,
+  input     [1 : 0] s_axi_rdma_send_write_payload_arburst,
+  input     [3 : 0] s_axi_rdma_send_write_payload_arcache,
+  input     [2 : 0] s_axi_rdma_send_write_payload_arprot,
+  input             s_axi_rdma_send_write_payload_arvalid,
+  output            s_axi_rdma_send_write_payload_arready,
+  output            s_axi_rdma_send_write_payload_rid,
+  output  [511 : 0] s_axi_rdma_send_write_payload_rdata,
+  output    [1 : 0] s_axi_rdma_send_write_payload_rresp,
+  output            s_axi_rdma_send_write_payload_rlast,
+  output            s_axi_rdma_send_write_payload_rvalid,
+  input             s_axi_rdma_send_write_payload_rready,
+  input             s_axi_rdma_send_write_payload_arlock,
+  input     [3 : 0] s_axi_rdma_send_write_payload_arqos,
+
+  input             s_axi_rdma_rsp_payload_awid,
+  input    [63 : 0] s_axi_rdma_rsp_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_rsp_payload_awqos,
+  input     [7 : 0] s_axi_rdma_rsp_payload_awlen,
+  input     [2 : 0] s_axi_rdma_rsp_payload_awsize,
+  input     [1 : 0] s_axi_rdma_rsp_payload_awburst,
+  input     [3 : 0] s_axi_rdma_rsp_payload_awcache,
+  input     [2 : 0] s_axi_rdma_rsp_payload_awprot,
+  input             s_axi_rdma_rsp_payload_awvalid,
+  output            s_axi_rdma_rsp_payload_awready,
+  input   [511 : 0] s_axi_rdma_rsp_payload_wdata,
+  input    [63 : 0] s_axi_rdma_rsp_payload_wstrb,
+  input             s_axi_rdma_rsp_payload_wlast,
+  input             s_axi_rdma_rsp_payload_wvalid,
+  output            s_axi_rdma_rsp_payload_wready,
+  input             s_axi_rdma_rsp_payload_awlock,
+  output            s_axi_rdma_rsp_payload_bid,
+  output    [1 : 0] s_axi_rdma_rsp_payload_bresp,
+  output            s_axi_rdma_rsp_payload_bvalid,
+  input             s_axi_rdma_rsp_payload_bready,
+  input             s_axi_rdma_rsp_payload_arid,
+  input    [63 : 0] s_axi_rdma_rsp_payload_araddr,
+  input     [7 : 0] s_axi_rdma_rsp_payload_arlen,
+  input     [2 : 0] s_axi_rdma_rsp_payload_arsize,
+  input     [1 : 0] s_axi_rdma_rsp_payload_arburst,
+  input     [3 : 0] s_axi_rdma_rsp_payload_arcache,
+  input     [2 : 0] s_axi_rdma_rsp_payload_arprot,
+  input             s_axi_rdma_rsp_payload_arvalid,
+  output            s_axi_rdma_rsp_payload_arready,
+  output            s_axi_rdma_rsp_payload_rid,
+  output  [511 : 0] s_axi_rdma_rsp_payload_rdata,
+  output    [1 : 0] s_axi_rdma_rsp_payload_rresp,
+  output            s_axi_rdma_rsp_payload_rlast,
+  output            s_axi_rdma_rsp_payload_rvalid,
+  input             s_axi_rdma_rsp_payload_rready,
+  input             s_axi_rdma_rsp_payload_arlock,
+  input     [3 : 0] s_axi_rdma_rsp_payload_arqos,
+
+  output      [2:0] m_axi_sys_mem_awid,
+  output     [63:0] m_axi_sys_mem_awaddr,
+  output      [7:0] m_axi_sys_mem_awlen,
+  output      [2:0] m_axi_sys_mem_awsize,
+  output      [1:0] m_axi_sys_mem_awburst,
+  output            m_axi_sys_mem_awlock,
+  output      [3:0] m_axi_sys_mem_awqos,
+  output      [3:0] m_axi_sys_mem_awregion,
+  output      [3:0] m_axi_sys_mem_awcache,
+  output      [2:0] m_axi_sys_mem_awprot,
+  output            m_axi_sys_mem_awvalid,
+  input             m_axi_sys_mem_awready,
+  output    [511:0] m_axi_sys_mem_wdata,
+  output     [63:0] m_axi_sys_mem_wstrb,
+  output            m_axi_sys_mem_wlast,
+  output            m_axi_sys_mem_wvalid,
+  input             m_axi_sys_mem_wready,
+  input       [2:0] m_axi_sys_mem_bid,
+  input       [1:0] m_axi_sys_mem_bresp,
+  input             m_axi_sys_mem_bvalid,
+  output            m_axi_sys_mem_bready,
+  output      [2:0] m_axi_sys_mem_arid,
+  output     [63:0] m_axi_sys_mem_araddr,
+  output      [7:0] m_axi_sys_mem_arlen,
+  output      [2:0] m_axi_sys_mem_arsize,
+  output      [1:0] m_axi_sys_mem_arburst,
+  output            m_axi_sys_mem_arlock,
+  output      [3:0] m_axi_sys_mem_arqos,
+  output      [3:0] m_axi_sys_mem_arregion,
+  output      [3:0] m_axi_sys_mem_arcache,
+  output      [2:0] m_axi_sys_mem_arprot,
+  output            m_axi_sys_mem_arvalid,
+  input             m_axi_sys_mem_arready,
+  input       [2:0] m_axi_sys_mem_rid,
+  input     [511:0] m_axi_sys_mem_rdata,
+  input       [1:0] m_axi_sys_mem_rresp,
+  input             m_axi_sys_mem_rlast,
+  input             m_axi_sys_mem_rvalid,
+  output            m_axi_sys_mem_rready,
+
+  output      [2:0] m_axi_sys_to_dev_crossbar_awid,
+  output     [63:0] m_axi_sys_to_dev_crossbar_awaddr,
+  output      [7:0] m_axi_sys_to_dev_crossbar_awlen,
+  output      [2:0] m_axi_sys_to_dev_crossbar_awsize,
+  output      [1:0] m_axi_sys_to_dev_crossbar_awburst,
+  output            m_axi_sys_to_dev_crossbar_awlock,
+  output      [3:0] m_axi_sys_to_dev_crossbar_awqos,
+  output      [3:0] m_axi_sys_to_dev_crossbar_awregion,
+  output      [3:0] m_axi_sys_to_dev_crossbar_awcache,
+  output      [2:0] m_axi_sys_to_dev_crossbar_awprot,
+  output            m_axi_sys_to_dev_crossbar_awvalid,
+  input             m_axi_sys_to_dev_crossbar_awready,
+  output    [511:0] m_axi_sys_to_dev_crossbar_wdata,
+  output     [63:0] m_axi_sys_to_dev_crossbar_wstrb,
+  output            m_axi_sys_to_dev_crossbar_wlast,
+  output            m_axi_sys_to_dev_crossbar_wvalid,
+  input             m_axi_sys_to_dev_crossbar_wready,
+  input       [2:0]  m_axi_sys_to_dev_crossbar_bid,
+  input       [1:0] m_axi_sys_to_dev_crossbar_bresp,
+  input             m_axi_sys_to_dev_crossbar_bvalid,
+  output            m_axi_sys_to_dev_crossbar_bready,
+  output      [2:0]   m_axi_sys_to_dev_crossbar_arid,
+  output     [63:0] m_axi_sys_to_dev_crossbar_araddr,
+  output      [7:0] m_axi_sys_to_dev_crossbar_arlen,
+  output      [2:0] m_axi_sys_to_dev_crossbar_arsize,
+  output      [1:0] m_axi_sys_to_dev_crossbar_arburst,
+  output            m_axi_sys_to_dev_crossbar_arlock,
+  output      [3:0] m_axi_sys_to_dev_crossbar_arqos,
+  output      [3:0] m_axi_sys_to_dev_crossbar_arregion,
+  output      [3:0] m_axi_sys_to_dev_crossbar_arcache,
+  output      [2:0] m_axi_sys_to_dev_crossbar_arprot,
+  output            m_axi_sys_to_dev_crossbar_arvalid,
+  input             m_axi_sys_to_dev_crossbar_arready,
+  input       [2:0] m_axi_sys_to_dev_crossbar_rid,
+  input     [511:0] m_axi_sys_to_dev_crossbar_rdata,
+  input       [1:0] m_axi_sys_to_dev_crossbar_rresp,
+  input             m_axi_sys_to_dev_crossbar_rlast,
+  input             m_axi_sys_to_dev_crossbar_rvalid,
+  output            m_axi_sys_to_dev_crossbar_rready,
+
+  input axis_aclk,
+  input axis_arestn
+);
+
+localparam C_NUM_MASTERS = 5;
+localparam C_NUM_SLAVES = 2;
+
+
+localparam C_RDMA_GET_WQE_IDX     = 0;
+localparam C_RDMA_GET_PAYLOAD_IDX = 1;
+localparam C_RDMA_COMPLETION_IDX  = 2;
+localparam C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX = 3;
+localparam C_RDMA_RSP_PAYLOAD_IDX = 4;
+
+localparam C_SYS_MEM_IDX     = 0;
+localparam C_SYS_TO_DEV_CROSSBAR_IDX = 1;
+
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_awid;
+logic  [C_NUM_MASTERS*64-1 : 0] s_axi_awaddr;
+logic   [C_NUM_MASTERS*8-1 : 0] s_axi_awlen;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_awsize;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_awburst;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_awlock;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_awcache;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_awprot;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_awqos;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_awvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_awready;
+logic [C_NUM_MASTERS*512-1 : 0] s_axi_wdata;
+logic  [C_NUM_MASTERS*64-1 : 0] s_axi_wstrb;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_wlast;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_wvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_wready;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_bid;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_bresp;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_bvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_bready;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_arid;
+logic  [C_NUM_MASTERS*64-1 : 0] s_axi_araddr;
+logic   [C_NUM_MASTERS*8-1 : 0] s_axi_arlen;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_arsize;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_arburst;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_arlock;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_arcache;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_arprot;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_arqos;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_arvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_arready;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_rid;
+logic [C_NUM_MASTERS*512-1 : 0] s_axi_rdata;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_rresp;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_rlast;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_rvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_rready;
+
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_awid;
+logic  [C_NUM_SLAVES*64-1 : 0] m_axi_awaddr;
+logic   [C_NUM_SLAVES*8-1 : 0] m_axi_awlen;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_awsize;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_awburst;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_awlock;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_awcache;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_awprot;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_awqos;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_awvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_awready;
+logic [C_NUM_SLAVES*512-1 : 0] m_axi_wdata;
+logic  [C_NUM_SLAVES*64-1 : 0] m_axi_wstrb;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_wlast;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_wvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_wready;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_bid;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_bresp;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_bvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_bready;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_arid;
+logic  [C_NUM_SLAVES*64-1 : 0] m_axi_araddr;
+logic   [C_NUM_SLAVES*8-1 : 0] m_axi_arlen;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_arsize;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_arburst;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_arlock;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_arcache;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_arprot;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_arqos;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_arvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_arready;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_rid;
+logic [C_NUM_SLAVES*512-1 : 0] m_axi_rdata;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_rresp;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_rlast;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_rvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_rready;
+
+// AXI slave signals for getting wqe from system memory
+//assign s_axi_awid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = {1'b0, s_axi_rdma_get_wqe_awid};
+assign s_axi_awid   [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awvalid ? 3'd0 : 3'd0;
+assign s_axi_awaddr [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_awaddr;
+assign s_axi_awqos  [C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_awqos;
+assign s_axi_awlen  [C_RDMA_GET_WQE_IDX *8 +: 8]         = s_axi_rdma_get_wqe_awlen;
+assign s_axi_awsize [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awsize;
+assign s_axi_awburst[C_RDMA_GET_WQE_IDX *2 +: 2]         = s_axi_rdma_get_wqe_awburst;
+assign s_axi_awcache[C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_awcache;
+assign s_axi_awprot [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awprot;
+assign s_axi_awvalid[C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_awvalid;
+assign s_axi_rdma_get_wqe_awready                        = s_axi_awready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_GET_WQE_IDX *512 +: 512]     = s_axi_rdma_get_wqe_wdata;
+assign s_axi_wstrb  [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_wstrb;
+assign s_axi_wlast  [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_wlast;
+assign s_axi_wvalid [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_wvalid;
+assign s_axi_rdma_get_wqe_wready                         = s_axi_wready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_awlock;
+assign s_axi_rdma_get_wqe_bid                            = s_axi_bid[C_RDMA_GET_WQE_IDX *3 +: 1];
+assign s_axi_rdma_get_wqe_bresp                          = s_axi_bresp[C_RDMA_GET_WQE_IDX *2 +: 2];
+assign s_axi_rdma_get_wqe_bvalid                         = s_axi_bvalid[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_bready;
+//assign s_axi_arid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = {1'b0, s_axi_rdma_get_wqe_arid};
+assign s_axi_arid   [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_arvalid ? 3'd0 : 3'd0;
+assign s_axi_araddr [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_araddr;
+assign s_axi_arlen  [C_RDMA_GET_WQE_IDX *8  +: 8]        = s_axi_rdma_get_wqe_arlen;
+assign s_axi_arsize [C_RDMA_GET_WQE_IDX *3  +: 3]        = s_axi_rdma_get_wqe_arsize;
+assign s_axi_arburst[C_RDMA_GET_WQE_IDX *2  +: 2]        = s_axi_rdma_get_wqe_arburst;
+assign s_axi_arcache[C_RDMA_GET_WQE_IDX *4  +: 4]        = s_axi_rdma_get_wqe_arcache;
+assign s_axi_arprot [C_RDMA_GET_WQE_IDX *3  +: 3]        = s_axi_rdma_get_wqe_arprot;
+assign s_axi_arvalid[C_RDMA_GET_WQE_IDX *1  +: 1]        = s_axi_rdma_get_wqe_arvalid;
+assign s_axi_rdma_get_wqe_arready                        = s_axi_arready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rdma_get_wqe_rid                            = s_axi_rid[C_RDMA_GET_WQE_IDX *3 +: 1];
+assign s_axi_rdma_get_wqe_rdata                          = s_axi_rdata[C_RDMA_GET_WQE_IDX *512 +: 512];
+assign s_axi_rdma_get_wqe_rresp                          = s_axi_rresp[C_RDMA_GET_WQE_IDX *2 +: 2];
+assign s_axi_rdma_get_wqe_rlast                          = s_axi_rlast[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rdma_get_wqe_rvalid                         = s_axi_rvalid[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_rready;
+assign s_axi_arlock [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_arlock;
+assign s_axi_arqos  [C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_arqos;
+
+// AXI slave signals for getting payload from system memory
+//assign axi_awid   [C_RDMA_GET_PAYLOAD_IDX*2 +: 2]      = {1'b0, s_axi_rdma_get_payload_awid};
+assign s_axi_awid   [C_RDMA_GET_PAYLOAD_IDX*3 +: 3]      = s_axi_rdma_get_payload_awvalid ? 3'd1 : 3'd0;
+assign s_axi_awaddr [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_awaddr;
+assign s_axi_awqos  [C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_awqos;
+assign s_axi_awlen  [C_RDMA_GET_PAYLOAD_IDX *8 +: 8]     = s_axi_rdma_get_payload_awlen;
+assign s_axi_awsize [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_awsize;
+assign s_axi_awburst[C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = s_axi_rdma_get_payload_awburst;
+assign s_axi_awcache[C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_awcache;
+assign s_axi_awprot [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_awprot;
+assign s_axi_awvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_awvalid;
+assign s_axi_rdma_get_payload_awready                    = s_axi_awready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_GET_PAYLOAD_IDX *512 +: 512] = s_axi_rdma_get_payload_wdata;
+assign s_axi_wstrb  [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_wstrb;
+assign s_axi_wlast  [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_wlast;
+assign s_axi_wvalid [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_wvalid;
+assign s_axi_rdma_get_payload_wready                     = s_axi_wready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_awlock;
+assign s_axi_rdma_get_payload_bid                        = s_axi_bid[C_RDMA_GET_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_get_payload_bresp                      = s_axi_bresp[C_RDMA_GET_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_get_payload_bvalid                     = s_axi_bvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_bready;
+//assign s_axi_arid   [C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = {1'b0, s_axi_rdma_get_payload_arid};
+assign s_axi_arid   [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_arvalid ? 3'd1: 3'd0;
+assign s_axi_araddr [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_araddr;
+assign s_axi_arlen  [C_RDMA_GET_PAYLOAD_IDX *8  +: 8]    = s_axi_rdma_get_payload_arlen;
+assign s_axi_arsize [C_RDMA_GET_PAYLOAD_IDX *3  +: 3]    = s_axi_rdma_get_payload_arsize;
+assign s_axi_arburst[C_RDMA_GET_PAYLOAD_IDX *2  +: 2]    = s_axi_rdma_get_payload_arburst;
+assign s_axi_arcache[C_RDMA_GET_PAYLOAD_IDX *4  +: 4]    = s_axi_rdma_get_payload_arcache;
+assign s_axi_arprot [C_RDMA_GET_PAYLOAD_IDX *3  +: 3]    = s_axi_rdma_get_payload_arprot;
+assign s_axi_arvalid[C_RDMA_GET_PAYLOAD_IDX *1  +: 1]    = s_axi_rdma_get_payload_arvalid;
+assign s_axi_rdma_get_payload_arready                    = s_axi_arready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_get_payload_rid                        = s_axi_rid[C_RDMA_GET_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_get_payload_rdata                      = s_axi_rdata[C_RDMA_GET_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_get_payload_rresp                      = s_axi_rresp[C_RDMA_GET_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_get_payload_rlast                      = s_axi_rlast[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_get_payload_rvalid                     = s_axi_rvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_rready;
+assign s_axi_arlock [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_arlock;
+assign s_axi_arqos  [C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_arqos;
+
+// AXI slave signals for data access from qdma mm channel
+//assign axi_awid   [C_RDMA_COMPLETION_IDX*2 +: 2]       = {1'b0, s_axi_rdma_completion_awid};
+assign s_axi_awid   [C_RDMA_COMPLETION_IDX*3 +: 3]       = s_axi_rdma_completion_awvalid ? 3'd2 : 3'd0;
+assign s_axi_awaddr [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_awaddr;
+assign s_axi_awqos  [C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_awqos;
+assign s_axi_awlen  [C_RDMA_COMPLETION_IDX *8 +: 8]      = s_axi_rdma_completion_awlen;
+assign s_axi_awsize [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_awsize;
+assign s_axi_awburst[C_RDMA_COMPLETION_IDX *2 +: 2]      = s_axi_rdma_completion_awburst;
+assign s_axi_awcache[C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_awcache;
+assign s_axi_awprot [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_awprot;
+assign s_axi_awvalid[C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_awvalid;
+assign s_axi_rdma_completion_awready                     = s_axi_awready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_COMPLETION_IDX *512 +: 512]  = s_axi_rdma_completion_wdata;
+assign s_axi_wstrb  [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_wstrb;
+assign s_axi_wlast  [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_wlast;
+assign s_axi_wvalid [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_wvalid;
+assign s_axi_rdma_completion_wready                      = s_axi_wready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_awlock;
+assign s_axi_rdma_completion_bid                         = s_axi_bid[C_RDMA_COMPLETION_IDX *3 +: 1];
+assign s_axi_rdma_completion_bresp                       = s_axi_bresp[C_RDMA_COMPLETION_IDX *2 +: 2];
+assign s_axi_rdma_completion_bvalid                      = s_axi_bvalid[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_bready;
+//assign s_axi_arid   [C_RDMA_COMPLETION_IDX *2 +: 2]      = {1'b0, s_axi_rdma_completion_arid};
+assign s_axi_arid   [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_arvalid ? 3'd2 : 3'd0;
+assign s_axi_araddr [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_araddr;
+assign s_axi_arlen  [C_RDMA_COMPLETION_IDX *8  +: 8]     = s_axi_rdma_completion_arlen;
+assign s_axi_arsize [C_RDMA_COMPLETION_IDX *3  +: 3]     = s_axi_rdma_completion_arsize;
+assign s_axi_arburst[C_RDMA_COMPLETION_IDX *2  +: 2]     = s_axi_rdma_completion_arburst;
+assign s_axi_arcache[C_RDMA_COMPLETION_IDX *4  +: 4]     = s_axi_rdma_completion_arcache;
+assign s_axi_arprot [C_RDMA_COMPLETION_IDX *3  +: 3]     = s_axi_rdma_completion_arprot;
+assign s_axi_arvalid[C_RDMA_COMPLETION_IDX *1  +: 1]     = s_axi_rdma_completion_arvalid;
+assign s_axi_rdma_completion_arready                     = s_axi_arready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rdma_completion_rid                         = s_axi_rid[C_RDMA_COMPLETION_IDX *3 +: 1];
+assign s_axi_rdma_completion_rdata                       = s_axi_rdata[C_RDMA_COMPLETION_IDX *512 +: 512];
+assign s_axi_rdma_completion_rresp                       = s_axi_rresp[C_RDMA_COMPLETION_IDX *2 +: 2];
+assign s_axi_rdma_completion_rlast                       = s_axi_rlast[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rdma_completion_rvalid                      = s_axi_rvalid[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_rready;
+assign s_axi_arlock [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_arlock;
+assign s_axi_arqos  [C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_arqos;
+
+// AXI slave signals for storing payload from RDMA send or write
+//assign axi_awid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2]         = {1'b0, s_axi_rdma_send_write_payload_awid};
+assign s_axi_awid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_awvalid ? 3'd4 : 3'd0;
+assign s_axi_awaddr [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *64 +: 64]       = s_axi_rdma_send_write_payload_awaddr;
+assign s_axi_awqos  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4 +: 4]         = s_axi_rdma_send_write_payload_awqos;
+assign s_axi_awlen  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *8 +: 8]         = s_axi_rdma_send_write_payload_awlen;
+assign s_axi_awsize [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_awsize;
+assign s_axi_awburst[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2]         = s_axi_rdma_send_write_payload_awburst;
+assign s_axi_awcache[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4 +: 4]         = s_axi_rdma_send_write_payload_awcache;
+assign s_axi_awprot [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_awprot;
+assign s_axi_awvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_awvalid;
+assign s_axi_rdma_send_write_payload_awready                            = s_axi_awready[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *512 +: 512]     = s_axi_rdma_send_write_payload_wdata;
+assign s_axi_wstrb  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *64 +: 64]       = s_axi_rdma_send_write_payload_wstrb;
+assign s_axi_wlast  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_wlast;
+assign s_axi_wvalid [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_wvalid;
+assign s_axi_rdma_send_write_payload_wready                             = s_axi_wready[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_awlock;
+assign s_axi_rdma_send_write_payload_bid                                = s_axi_bid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_send_write_payload_bresp                              = s_axi_bresp[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_send_write_payload_bvalid                             = s_axi_bvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_bready;
+//assign s_axi_arid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2]         = {1'b0, s_axi_rdma_send_write_payload_arid};
+assign s_axi_arid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_arvalid ? 3'd4 : 3'd0;
+assign s_axi_araddr [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *64 +: 64]       = s_axi_rdma_send_write_payload_araddr;
+assign s_axi_arlen  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *8  +: 8]        = s_axi_rdma_send_write_payload_arlen;
+assign s_axi_arsize [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3  +: 3]        = s_axi_rdma_send_write_payload_arsize;
+assign s_axi_arburst[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2  +: 2]        = s_axi_rdma_send_write_payload_arburst;
+assign s_axi_arcache[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4  +: 4]        = s_axi_rdma_send_write_payload_arcache;
+assign s_axi_arprot [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3  +: 3]        = s_axi_rdma_send_write_payload_arprot;
+assign s_axi_arvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1  +: 1]        = s_axi_rdma_send_write_payload_arvalid;
+assign s_axi_rdma_send_write_payload_arready                            = s_axi_arready[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_send_write_payload_rid                                = s_axi_rid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_send_write_payload_rdata                              = s_axi_rdata[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_send_write_payload_rresp                              = s_axi_rresp[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_send_write_payload_rlast                              = s_axi_rlast[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_send_write_payload_rvalid                             = s_axi_rvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_rready;
+assign s_axi_arlock [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_arlock;
+assign s_axi_arqos  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4 +: 4]         = s_axi_rdma_send_write_payload_arqos;
+
+// AXI slave signals for storing payload from RDMA read response
+//assign axi_awid   [C_RDMA_RSP_PAYLOAD_IDX*2 +: 2]       = {1'b0, s_axi_rdma_rsp_payload_awid};
+assign s_axi_awid   [C_RDMA_RSP_PAYLOAD_IDX*3 +: 3]       = s_axi_rdma_rsp_payload_awvalid ? 3'd3 : 3'd0;
+assign s_axi_awaddr [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_awaddr;
+assign s_axi_awqos  [C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_awqos;
+assign s_axi_awlen  [C_RDMA_RSP_PAYLOAD_IDX *8 +: 8]      = s_axi_rdma_rsp_payload_awlen;
+assign s_axi_awsize [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_awsize;
+assign s_axi_awburst[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_rsp_payload_awburst;
+assign s_axi_awcache[C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_awcache;
+assign s_axi_awprot [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_awprot;
+assign s_axi_awvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_awvalid;
+assign s_axi_rdma_rsp_payload_awready                     = s_axi_awready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_RSP_PAYLOAD_IDX *512 +: 512]  = s_axi_rdma_rsp_payload_wdata;
+assign s_axi_wstrb  [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_wstrb;
+assign s_axi_wlast  [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_wlast;
+assign s_axi_wvalid [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_wvalid;
+assign s_axi_rdma_rsp_payload_wready                      = s_axi_wready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_awlock;
+assign s_axi_rdma_rsp_payload_bid                         = s_axi_bid[C_RDMA_RSP_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_rsp_payload_bresp                       = s_axi_bresp[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_rsp_payload_bvalid                      = s_axi_bvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_bready;
+//assign axi_arid   [C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = {1'b0, s_axi_rdma_rsp_payload_arid};
+assign s_axi_arid   [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_arvalid ? 3'd3 : 3'd0;
+assign s_axi_araddr [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_araddr;
+assign s_axi_arlen  [C_RDMA_RSP_PAYLOAD_IDX *8  +: 8]     = s_axi_rdma_rsp_payload_arlen;
+assign s_axi_arsize [C_RDMA_RSP_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_rsp_payload_arsize;
+assign s_axi_arburst[C_RDMA_RSP_PAYLOAD_IDX *2  +: 2]     = s_axi_rdma_rsp_payload_arburst;
+assign s_axi_arcache[C_RDMA_RSP_PAYLOAD_IDX *4  +: 4]     = s_axi_rdma_rsp_payload_arcache;
+assign s_axi_arprot [C_RDMA_RSP_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_rsp_payload_arprot;
+assign s_axi_arvalid[C_RDMA_RSP_PAYLOAD_IDX *1  +: 1]     = s_axi_rdma_rsp_payload_arvalid;
+assign s_axi_rdma_rsp_payload_arready                     = s_axi_arready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_rsp_payload_rid                         = s_axi_rid[C_RDMA_RSP_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_rsp_payload_rdata                       = s_axi_rdata[C_RDMA_RSP_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_rsp_payload_rresp                       = s_axi_rresp[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_rsp_payload_rlast                       = s_axi_rlast[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_rsp_payload_rvalid                      = s_axi_rvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_rready;
+assign s_axi_arlock [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_arlock;
+assign s_axi_arqos  [C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_arqos;
+
+//AXI signals to system memory
+assign m_axi_sys_mem_awid                     = m_axi_awid   [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_awaddr                   = m_axi_awaddr [C_SYS_MEM_IDX *64 +: 64];
+assign m_axi_sys_mem_awqos                    = m_axi_awqos  [C_SYS_MEM_IDX *4 +: 4];
+assign m_axi_sys_mem_awlen                    = m_axi_awlen  [C_SYS_MEM_IDX *8 +: 8];
+assign m_axi_sys_mem_awsize                   = m_axi_awsize [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_awburst                  = m_axi_awburst[C_SYS_MEM_IDX *2 +: 2];
+assign m_axi_sys_mem_awcache                  = m_axi_awcache[C_SYS_MEM_IDX *4 +: 4];
+assign m_axi_sys_mem_awprot                   = m_axi_awprot [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_awvalid                  = m_axi_awvalid[C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_awready[C_SYS_MEM_IDX *1 +: 1]   = m_axi_sys_mem_awready;
+assign m_axi_sys_mem_wdata                    = m_axi_wdata  [C_SYS_MEM_IDX *512 +: 512];
+assign m_axi_sys_mem_wstrb                    = m_axi_wstrb  [C_SYS_MEM_IDX *64 +: 64];
+assign m_axi_sys_mem_wlast                    = m_axi_wlast  [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_sys_mem_wvalid                   = m_axi_wvalid [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_wready[C_SYS_MEM_IDX *1 +: 1]    = m_axi_sys_mem_wready;
+assign m_axi_sys_mem_awlock                   = m_axi_awlock [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_bid[C_SYS_MEM_IDX *3 +: 3]       = m_axi_sys_mem_bid;
+assign m_axi_bresp[C_SYS_MEM_IDX *2 +: 2]     = m_axi_sys_mem_bresp;
+assign m_axi_bvalid[C_SYS_MEM_IDX *1 +: 1]    = m_axi_sys_mem_bvalid;
+assign m_axi_sys_mem_bready                   = m_axi_bready [C_SYS_MEM_IDX *1 +: 1];
+//assign m_axi_sys_mem_arid                   = m_axi_arid   [C_SYS_MEM_IDX *2 +: 2];
+assign m_axi_sys_mem_arid                     = m_axi_arid   [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_araddr                   = m_axi_araddr [C_SYS_MEM_IDX *64 +: 64];
+assign m_axi_sys_mem_arlen                    = m_axi_arlen  [C_SYS_MEM_IDX *8  +: 8];
+assign m_axi_sys_mem_arsize                   = m_axi_arsize [C_SYS_MEM_IDX *3  +: 3];
+assign m_axi_sys_mem_arburst                  = m_axi_arburst[C_SYS_MEM_IDX *2  +: 2];
+assign m_axi_sys_mem_arcache                  = m_axi_arcache[C_SYS_MEM_IDX *4  +: 4];
+assign m_axi_sys_mem_arprot                   = m_axi_arprot [C_SYS_MEM_IDX *3  +: 3];
+assign m_axi_sys_mem_arvalid                  = m_axi_arvalid[C_SYS_MEM_IDX *1  +: 1];
+assign m_axi_arready[C_SYS_MEM_IDX *1 +: 1]   = m_axi_sys_mem_arready;
+assign m_axi_rid[C_SYS_MEM_IDX *3 +: 3]       = m_axi_sys_mem_rid;
+assign m_axi_rdata[C_SYS_MEM_IDX *512 +: 512] = m_axi_sys_mem_rdata;
+assign m_axi_rresp[C_SYS_MEM_IDX *2 +: 2]     = m_axi_sys_mem_rresp;
+assign m_axi_rlast[C_SYS_MEM_IDX *1 +: 1]     = m_axi_sys_mem_rlast;
+assign m_axi_rvalid[C_SYS_MEM_IDX *1 +: 1]    = m_axi_sys_mem_rvalid;
+assign m_axi_sys_mem_rready                   = m_axi_rready [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_sys_mem_arlock                   = m_axi_arlock [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_sys_mem_arqos                    = m_axi_arqos  [C_SYS_MEM_IDX *4 +: 4];
+
+//AXI signals to device memory
+//assign m_axi_awid   [C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2]         = {1'b0, m_axi_sys_to_dev_crossbar_awid};
+assign m_axi_sys_to_dev_crossbar_awid         = m_axi_awid   [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_awaddr       = m_axi_awaddr [C_SYS_TO_DEV_CROSSBAR_IDX *64 +: 64];
+assign m_axi_sys_to_dev_crossbar_awqos        = m_axi_awqos  [C_SYS_TO_DEV_CROSSBAR_IDX *4 +: 4];
+assign m_axi_sys_to_dev_crossbar_awlen        = m_axi_awlen  [C_SYS_TO_DEV_CROSSBAR_IDX *8 +: 8];
+assign m_axi_sys_to_dev_crossbar_awsize       = m_axi_awsize [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_awburst      = m_axi_awburst[C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2];
+assign m_axi_sys_to_dev_crossbar_awcache      = m_axi_awcache[C_SYS_TO_DEV_CROSSBAR_IDX *4 +: 4];
+assign m_axi_sys_to_dev_crossbar_awprot       = m_axi_awprot [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_awvalid      = m_axi_awvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_awready[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]          = m_axi_sys_to_dev_crossbar_awready;
+assign m_axi_sys_to_dev_crossbar_wdata        = m_axi_wdata  [C_SYS_TO_DEV_CROSSBAR_IDX *512 +: 512];
+assign m_axi_sys_to_dev_crossbar_wstrb        = m_axi_wstrb  [C_SYS_TO_DEV_CROSSBAR_IDX *64 +: 64];
+assign m_axi_sys_to_dev_crossbar_wlast        = m_axi_wlast  [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_sys_to_dev_crossbar_wvalid       = m_axi_wvalid [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_wready[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]           = m_axi_sys_to_dev_crossbar_wready;
+assign m_axi_sys_to_dev_crossbar_awlock       = m_axi_awlock [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_bid[C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3]              = m_axi_sys_to_dev_crossbar_bid;
+assign m_axi_bresp[C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2]            = m_axi_sys_to_dev_crossbar_bresp;
+assign m_axi_bvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]           = m_axi_sys_to_dev_crossbar_bvalid;
+assign m_axi_sys_to_dev_crossbar_bready       = m_axi_bready [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+//assign m_axi_sys_to_dev_crossbar_arid         = m_axi_arid   [C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2];
+assign m_axi_sys_to_dev_crossbar_arid         = m_axi_arid   [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_araddr       = m_axi_araddr [C_SYS_TO_DEV_CROSSBAR_IDX *64 +: 64];
+assign m_axi_sys_to_dev_crossbar_arlen        = m_axi_arlen  [C_SYS_TO_DEV_CROSSBAR_IDX *8  +: 8];
+assign m_axi_sys_to_dev_crossbar_arsize       = m_axi_arsize [C_SYS_TO_DEV_CROSSBAR_IDX *3  +: 3];
+assign m_axi_sys_to_dev_crossbar_arburst      = m_axi_arburst[C_SYS_TO_DEV_CROSSBAR_IDX *2  +: 2];
+assign m_axi_sys_to_dev_crossbar_arcache      = m_axi_arcache[C_SYS_TO_DEV_CROSSBAR_IDX *4  +: 4];
+assign m_axi_sys_to_dev_crossbar_arprot       = m_axi_arprot [C_SYS_TO_DEV_CROSSBAR_IDX *3  +: 3];
+assign m_axi_sys_to_dev_crossbar_arvalid      = m_axi_arvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1  +: 1];
+assign m_axi_arready[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]          = m_axi_sys_to_dev_crossbar_arready;
+assign m_axi_rid[C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3]              = m_axi_sys_to_dev_crossbar_rid;
+assign m_axi_rdata[C_SYS_TO_DEV_CROSSBAR_IDX *512 +: 512]        = m_axi_sys_to_dev_crossbar_rdata;
+assign m_axi_rresp[C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2]            = m_axi_sys_to_dev_crossbar_rresp;
+assign m_axi_rlast[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]            = m_axi_sys_to_dev_crossbar_rlast;
+assign m_axi_rvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]           = m_axi_sys_to_dev_crossbar_rvalid;
+assign m_axi_sys_to_dev_crossbar_rready       = m_axi_rready [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_sys_to_dev_crossbar_arlock       = m_axi_arlock [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_sys_to_dev_crossbar_arqos        = m_axi_arqos  [C_SYS_TO_DEV_CROSSBAR_IDX *4 +: 4];
+
+sys_mem_5to2_axi_crossbar sys_mem_5to2_axi_crossbar_inst (
+  .m_axi_awaddr    (m_axi_awaddr),
+  .m_axi_awprot    (m_axi_awprot),
+  .m_axi_awvalid   (m_axi_awvalid),
+  .m_axi_awready   (m_axi_awready),
+  .m_axi_awsize    (m_axi_awsize),
+  .m_axi_awburst   (m_axi_awburst),
+  .m_axi_awcache   (m_axi_awcache),
+  .m_axi_awlen     (m_axi_awlen),
+  .m_axi_awlock    (m_axi_awlock),
+  .m_axi_awqos     (m_axi_awqos),
+  .m_axi_awregion  (m_axi_awregion),
+  .m_axi_awid      (m_axi_awid),
+  .m_axi_wdata     (m_axi_wdata),
+  .m_axi_wstrb     (m_axi_wstrb),
+  .m_axi_wvalid    (m_axi_wvalid),
+  .m_axi_wready    (m_axi_wready),
+  .m_axi_wlast     (m_axi_wlast),
+  .m_axi_bresp     (m_axi_bresp),
+  .m_axi_bvalid    (m_axi_bvalid),
+  .m_axi_bready    (m_axi_bready),
+  .m_axi_bid       (m_axi_bid),
+  .m_axi_araddr    (m_axi_araddr),
+  .m_axi_arprot    (m_axi_arprot),
+  .m_axi_arvalid   (m_axi_arvalid),
+  .m_axi_arready   (m_axi_arready),
+  .m_axi_arsize    (m_axi_arsize),
+  .m_axi_arburst   (m_axi_arburst),
+  .m_axi_arcache   (m_axi_arcache),
+  .m_axi_arlock    (m_axi_arlock),
+  .m_axi_arlen     (m_axi_arlen),
+  .m_axi_arqos     (m_axi_arqos),
+  .m_axi_arregion  (m_axi_arregion),
+  .m_axi_arid      (m_axi_arid),
+  .m_axi_rdata     (m_axi_rdata),
+  .m_axi_rresp     (m_axi_rresp),
+  .m_axi_rvalid    (m_axi_rvalid),
+  .m_axi_rready    (m_axi_rready),
+  .m_axi_rlast     (m_axi_rlast),
+  .m_axi_rid       (m_axi_rid),
+
+  .s_axi_awid      (s_axi_awid),
+  .s_axi_awaddr    (s_axi_awaddr),
+  .s_axi_awqos     (s_axi_awqos),
+  .s_axi_awlen     (s_axi_awlen),
+  .s_axi_awsize    (s_axi_awsize),
+  .s_axi_awburst   (s_axi_awburst),
+  .s_axi_awcache   (s_axi_awcache),
+  .s_axi_awprot    (s_axi_awprot),
+  .s_axi_awvalid   (s_axi_awvalid),
+  .s_axi_awready   (s_axi_awready),
+  .s_axi_wdata     (s_axi_wdata),
+  .s_axi_wstrb     (s_axi_wstrb),
+  .s_axi_wlast     (s_axi_wlast),
+  .s_axi_wvalid    (s_axi_wvalid),
+  .s_axi_wready    (s_axi_wready),
+  .s_axi_awlock    (s_axi_awlock),
+  .s_axi_bid       (s_axi_bid),
+  .s_axi_bresp     (s_axi_bresp),
+  .s_axi_bvalid    (s_axi_bvalid),
+  .s_axi_bready    (s_axi_bready),
+  .s_axi_arid      (s_axi_arid),
+  .s_axi_araddr    (s_axi_araddr),
+  .s_axi_arlen     (s_axi_arlen),
+  .s_axi_arsize    (s_axi_arsize),
+  .s_axi_arburst   (s_axi_arburst),
+  .s_axi_arcache   (s_axi_arcache),
+  .s_axi_arprot    (s_axi_arprot),
+  .s_axi_arvalid   (s_axi_arvalid),
+  .s_axi_arready   (s_axi_arready),
+  .s_axi_rid       (s_axi_rid),
+  .s_axi_rdata     (s_axi_rdata),
+  .s_axi_rresp     (s_axi_rresp),
+  .s_axi_rlast     (s_axi_rlast),
+  .s_axi_rvalid    (s_axi_rvalid),
+  .s_axi_rready    (s_axi_rready),
+  .s_axi_arlock    (s_axi_arlock),
+  .s_axi_arqos     (s_axi_arqos),
+
+  .aclk   (axis_aclk),
+  .aresetn(axis_arestn)
+);
+
+endmodule: axi_5to2_interconnect_to_sys_mem
\ No newline at end of file
diff --git a/src/utility/axi_interconnect_to_dev_mem.sv b/src/utility/axi_interconnect_to_dev_mem.sv
new file mode 100644
index 0000000..ea87ade
--- /dev/null
+++ b/src/utility/axi_interconnect_to_dev_mem.sv
@@ -0,0 +1,514 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module axi_interconnect_to_dev_mem #(
+  parameter C_AXI_DATA_WIDTH = 512,
+  parameter C_AXI_ADDR_WIDTH = 64
+) (
+  input             s_axi_rdma_send_write_payload_awid,
+  input    [63 : 0] s_axi_rdma_send_write_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_send_write_payload_awqos,
+  input     [7 : 0] s_axi_rdma_send_write_payload_awlen,
+  input     [2 : 0] s_axi_rdma_send_write_payload_awsize,
+  input     [1 : 0] s_axi_rdma_send_write_payload_awburst,
+  input     [3 : 0] s_axi_rdma_send_write_payload_awcache,
+  input     [2 : 0] s_axi_rdma_send_write_payload_awprot,
+  input             s_axi_rdma_send_write_payload_awvalid,
+  output            s_axi_rdma_send_write_payload_awready,
+  input   [511 : 0] s_axi_rdma_send_write_payload_wdata,
+  input    [63 : 0] s_axi_rdma_send_write_payload_wstrb,
+  input             s_axi_rdma_send_write_payload_wlast,
+  input             s_axi_rdma_send_write_payload_wvalid,
+  output            s_axi_rdma_send_write_payload_wready,
+  input             s_axi_rdma_send_write_payload_awlock,
+  output            s_axi_rdma_send_write_payload_bid,
+  output    [1 : 0] s_axi_rdma_send_write_payload_bresp,
+  output            s_axi_rdma_send_write_payload_bvalid,
+  input             s_axi_rdma_send_write_payload_bready,
+  input             s_axi_rdma_send_write_payload_arid,
+  input    [63 : 0] s_axi_rdma_send_write_payload_araddr,
+  input     [7 : 0] s_axi_rdma_send_write_payload_arlen,
+  input     [2 : 0] s_axi_rdma_send_write_payload_arsize,
+  input     [1 : 0] s_axi_rdma_send_write_payload_arburst,
+  input     [3 : 0] s_axi_rdma_send_write_payload_arcache,
+  input     [2 : 0] s_axi_rdma_send_write_payload_arprot,
+  input             s_axi_rdma_send_write_payload_arvalid,
+  output            s_axi_rdma_send_write_payload_arready,
+  output            s_axi_rdma_send_write_payload_rid,
+  output  [511 : 0] s_axi_rdma_send_write_payload_rdata,
+  output    [1 : 0] s_axi_rdma_send_write_payload_rresp,
+  output            s_axi_rdma_send_write_payload_rlast,
+  output            s_axi_rdma_send_write_payload_rvalid,
+  input             s_axi_rdma_send_write_payload_rready,
+  input             s_axi_rdma_send_write_payload_arlock,
+  input       [3:0] s_axi_rdma_send_write_payload_arqos,
+
+  input             s_axi_rdma_rsp_payload_awid,
+  input    [63 : 0] s_axi_rdma_rsp_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_rsp_payload_awqos,
+  input     [7 : 0] s_axi_rdma_rsp_payload_awlen,
+  input     [2 : 0] s_axi_rdma_rsp_payload_awsize,
+  input     [1 : 0] s_axi_rdma_rsp_payload_awburst,
+  input     [3 : 0] s_axi_rdma_rsp_payload_awcache,
+  input     [2 : 0] s_axi_rdma_rsp_payload_awprot,
+  input             s_axi_rdma_rsp_payload_awvalid,
+  output            s_axi_rdma_rsp_payload_awready,
+  input   [511 : 0] s_axi_rdma_rsp_payload_wdata,
+  input    [63 : 0] s_axi_rdma_rsp_payload_wstrb,
+  input             s_axi_rdma_rsp_payload_wlast,
+  input             s_axi_rdma_rsp_payload_wvalid,
+  output            s_axi_rdma_rsp_payload_wready,
+  input             s_axi_rdma_rsp_payload_awlock,
+  output            s_axi_rdma_rsp_payload_bid,
+  output    [1 : 0] s_axi_rdma_rsp_payload_bresp,
+  output            s_axi_rdma_rsp_payload_bvalid,
+  input             s_axi_rdma_rsp_payload_bready,
+  input             s_axi_rdma_rsp_payload_arid,
+  input    [63 : 0] s_axi_rdma_rsp_payload_araddr,
+  input     [7 : 0] s_axi_rdma_rsp_payload_arlen,
+  input     [2 : 0] s_axi_rdma_rsp_payload_arsize,
+  input     [1 : 0] s_axi_rdma_rsp_payload_arburst,
+  input     [3 : 0] s_axi_rdma_rsp_payload_arcache,
+  input     [2 : 0] s_axi_rdma_rsp_payload_arprot,
+  input             s_axi_rdma_rsp_payload_arvalid,
+  output            s_axi_rdma_rsp_payload_arready,
+  output            s_axi_rdma_rsp_payload_rid,
+  output  [511 : 0] s_axi_rdma_rsp_payload_rdata,
+  output    [1 : 0] s_axi_rdma_rsp_payload_rresp,
+  output            s_axi_rdma_rsp_payload_rlast,
+  output            s_axi_rdma_rsp_payload_rvalid,
+  input             s_axi_rdma_rsp_payload_rready,
+  input             s_axi_rdma_rsp_payload_arlock,
+  input       [3:0] s_axi_rdma_rsp_payload_arqos,
+
+  input     [3 : 0] s_axi_qdma_mm_awid,
+  input    [63 : 0] s_axi_qdma_mm_awaddr,
+  input     [3 : 0] s_axi_qdma_mm_awqos,
+  input     [7 : 0] s_axi_qdma_mm_awlen,
+  input     [2 : 0] s_axi_qdma_mm_awsize,
+  input     [1 : 0] s_axi_qdma_mm_awburst,
+  input     [3 : 0] s_axi_qdma_mm_awcache,
+  input     [2 : 0] s_axi_qdma_mm_awprot,
+  input             s_axi_qdma_mm_awvalid,
+  output            s_axi_qdma_mm_awready,
+  input   [511 : 0] s_axi_qdma_mm_wdata,
+  input    [63 : 0] s_axi_qdma_mm_wstrb,
+  input             s_axi_qdma_mm_wlast,
+  input             s_axi_qdma_mm_wvalid,
+  output            s_axi_qdma_mm_wready,
+  input             s_axi_qdma_mm_awlock,
+  output    [3 : 0] s_axi_qdma_mm_bid,
+  output    [1 : 0] s_axi_qdma_mm_bresp,
+  output            s_axi_qdma_mm_bvalid,
+  input             s_axi_qdma_mm_bready,
+  input     [3 : 0] s_axi_qdma_mm_arid,
+  input    [63 : 0] s_axi_qdma_mm_araddr,
+  input     [7 : 0] s_axi_qdma_mm_arlen,
+  input     [2 : 0] s_axi_qdma_mm_arsize,
+  input     [1 : 0] s_axi_qdma_mm_arburst,
+  input     [3 : 0] s_axi_qdma_mm_arcache,
+  input     [2 : 0] s_axi_qdma_mm_arprot,
+  input             s_axi_qdma_mm_arvalid,
+  output            s_axi_qdma_mm_arready,
+  output    [3 : 0] s_axi_qdma_mm_rid,
+  output  [511 : 0] s_axi_qdma_mm_rdata,
+  output    [1 : 0] s_axi_qdma_mm_rresp,
+  output            s_axi_qdma_mm_rlast,
+  output            s_axi_qdma_mm_rvalid,
+  input             s_axi_qdma_mm_rready,
+  input             s_axi_qdma_mm_arlock,
+  input       [3:0] s_axi_qdma_mm_arqos,
+
+  input             s_axi_compute_logic_awid,
+  input    [63 : 0] s_axi_compute_logic_awaddr,
+  input     [3 : 0] s_axi_compute_logic_awqos,
+  input     [7 : 0] s_axi_compute_logic_awlen,
+  input     [2 : 0] s_axi_compute_logic_awsize,
+  input     [1 : 0] s_axi_compute_logic_awburst,
+  input     [3 : 0] s_axi_compute_logic_awcache,
+  input     [2 : 0] s_axi_compute_logic_awprot,
+  input             s_axi_compute_logic_awvalid,
+  output            s_axi_compute_logic_awready,
+  input   [511 : 0] s_axi_compute_logic_wdata,
+  input    [63 : 0] s_axi_compute_logic_wstrb,
+  input             s_axi_compute_logic_wlast,
+  input             s_axi_compute_logic_wvalid,
+  output            s_axi_compute_logic_wready,
+  input             s_axi_compute_logic_awlock,
+  output            s_axi_compute_logic_bid,
+  output    [1 : 0] s_axi_compute_logic_bresp,
+  output            s_axi_compute_logic_bvalid,
+  input             s_axi_compute_logic_bready,
+  input             s_axi_compute_logic_arid,
+  input    [63 : 0] s_axi_compute_logic_araddr,
+  input     [7 : 0] s_axi_compute_logic_arlen,
+  input     [2 : 0] s_axi_compute_logic_arsize,
+  input     [1 : 0] s_axi_compute_logic_arburst,
+  input     [3 : 0] s_axi_compute_logic_arcache,
+  input     [2 : 0] s_axi_compute_logic_arprot,
+  input             s_axi_compute_logic_arvalid,
+  output            s_axi_compute_logic_arready,
+  output            s_axi_compute_logic_rid,
+  output  [511 : 0] s_axi_compute_logic_rdata,
+  output    [1 : 0] s_axi_compute_logic_rresp,
+  output            s_axi_compute_logic_rlast,
+  output            s_axi_compute_logic_rvalid,
+  input             s_axi_compute_logic_rready,
+  input             s_axi_compute_logic_arlock,
+  input      [3:0]  s_axi_compute_logic_arqos,
+
+  output      [1:0] m_axi_dev_mem_awid,
+  output     [63:0] m_axi_dev_mem_awaddr,
+  output      [7:0] m_axi_dev_mem_awlen,
+  output      [2:0] m_axi_dev_mem_awsize,
+  output      [1:0] m_axi_dev_mem_awburst,
+  output            m_axi_dev_mem_awlock,
+  output      [3:0] m_axi_dev_mem_awqos,
+  output      [3:0] m_axi_dev_mem_awregion,
+  output      [3:0] m_axi_dev_mem_awcache,
+  output      [2:0] m_axi_dev_mem_awprot,
+  output            m_axi_dev_mem_awvalid,
+  input             m_axi_dev_mem_awready,
+  output    [511:0] m_axi_dev_mem_wdata,
+  output     [63:0] m_axi_dev_mem_wstrb,
+  output            m_axi_dev_mem_wlast,
+  output            m_axi_dev_mem_wvalid,
+  input             m_axi_dev_mem_wready,
+  input       [1:0] m_axi_dev_mem_bid,
+  input       [1:0] m_axi_dev_mem_bresp,
+  input             m_axi_dev_mem_bvalid,
+  output            m_axi_dev_mem_bready,
+  output      [1:0] m_axi_dev_mem_arid,
+  output     [63:0] m_axi_dev_mem_araddr,
+  output      [7:0] m_axi_dev_mem_arlen,
+  output      [2:0] m_axi_dev_mem_arsize,
+  output      [1:0] m_axi_dev_mem_arburst,
+  output            m_axi_dev_mem_arlock,
+  output      [3:0] m_axi_dev_mem_arqos,
+  output      [3:0] m_axi_dev_mem_arregion,
+  output      [3:0] m_axi_dev_mem_arcache,
+  output      [2:0] m_axi_dev_mem_arprot,
+  output            m_axi_dev_mem_arvalid,
+  input             m_axi_dev_mem_arready,
+  input       [1:0] m_axi_dev_mem_rid,
+  input     [511:0] m_axi_dev_mem_rdata,
+  input       [1:0] m_axi_dev_mem_rresp,
+  input             m_axi_dev_mem_rlast,
+  input             m_axi_dev_mem_rvalid,
+  output            m_axi_dev_mem_rready,
+
+  input axis_aclk,
+  input axis_arestn
+);
+
+localparam C_NUM_MASTERS = 4;
+
+localparam C_RDMA_SW_PAYLOAD_IDX  = 0;
+localparam C_RDMA_RSP_PAYLOAD_IDX = 1;
+localparam C_QDMA_MM_IDX          = 2;
+localparam C_COMPUTE_LOGIC_IDX    = 3;
+
+logic   [C_NUM_MASTERS*2-1 : 0] axi_awid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_awaddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_awlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_awburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_awlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_awvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_awready;
+logic [C_NUM_MASTERS*512-1 : 0] axi_wdata;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_wstrb;
+logic     [C_NUM_MASTERS-1 : 0] axi_wlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_wvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_wready;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_bid;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_bresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_bvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_bready;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_arid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_araddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_arlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_arburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_arlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_arvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_arready;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_rid;
+logic [C_NUM_MASTERS*512-1 : 0] axi_rdata;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_rresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_rlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_rvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_rready;
+
+// AXI slave signals for storing payload from RDMA send or write
+//assign axi_awid   [C_RDMA_SW_PAYLOAD_IDX *2 +: 2]      = {1'b0, s_axi_rdma_send_write_payload_awid};
+assign axi_awid   [C_RDMA_SW_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_send_write_payload_awvalid ? 2'd0 : 2'd0;
+assign axi_awaddr [C_RDMA_SW_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_send_write_payload_awaddr;
+assign axi_awqos  [C_RDMA_SW_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_send_write_payload_awqos;
+assign axi_awlen  [C_RDMA_SW_PAYLOAD_IDX *8 +: 8]      = s_axi_rdma_send_write_payload_awlen;
+assign axi_awsize [C_RDMA_SW_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_send_write_payload_awsize;
+assign axi_awburst[C_RDMA_SW_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_send_write_payload_awburst;
+assign axi_awcache[C_RDMA_SW_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_send_write_payload_awcache;
+assign axi_awprot [C_RDMA_SW_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_send_write_payload_awprot;
+assign axi_awvalid[C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_awvalid;
+assign s_axi_rdma_send_write_payload_awready           = axi_awready[C_RDMA_SW_PAYLOAD_IDX *1 +: 1];
+assign axi_wdata  [C_RDMA_SW_PAYLOAD_IDX *512 +: 512]  = s_axi_rdma_send_write_payload_wdata;
+assign axi_wstrb  [C_RDMA_SW_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_send_write_payload_wstrb;
+assign axi_wlast  [C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_wlast;
+assign axi_wvalid [C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_wvalid;
+assign s_axi_rdma_send_write_payload_wready            = axi_wready[C_RDMA_SW_PAYLOAD_IDX *1 +: 1];
+assign axi_awlock [C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_awlock;
+assign s_axi_rdma_send_write_payload_bid               = axi_bid[C_RDMA_SW_PAYLOAD_IDX *2 +: 1];
+assign s_axi_rdma_send_write_payload_bresp             = axi_bresp[C_RDMA_SW_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_send_write_payload_bvalid            = axi_bvalid[C_RDMA_SW_PAYLOAD_IDX *1 +: 1];
+assign axi_bready [C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_bready;
+//assign axi_arid   [C_RDMA_SW_PAYLOAD_IDX *2 +: 2]      = {1'b0, s_axi_rdma_send_write_payload_arid};
+assign axi_arid   [C_RDMA_SW_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_send_write_payload_arvalid ? 2'd0 : 2'd0;
+assign axi_araddr [C_RDMA_SW_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_send_write_payload_araddr;
+assign axi_arlen  [C_RDMA_SW_PAYLOAD_IDX *8  +: 8]     = s_axi_rdma_send_write_payload_arlen;
+assign axi_arsize [C_RDMA_SW_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_send_write_payload_arsize;
+assign axi_arburst[C_RDMA_SW_PAYLOAD_IDX *2  +: 2]     = s_axi_rdma_send_write_payload_arburst;
+assign axi_arcache[C_RDMA_SW_PAYLOAD_IDX *4  +: 4]     = s_axi_rdma_send_write_payload_arcache;
+assign axi_arprot [C_RDMA_SW_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_send_write_payload_arprot;
+assign axi_arvalid[C_RDMA_SW_PAYLOAD_IDX *1  +: 1]     = s_axi_rdma_send_write_payload_arvalid;
+assign s_axi_rdma_send_write_payload_arready           = axi_arready[C_RDMA_SW_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_send_write_payload_rid               = axi_rid[C_RDMA_SW_PAYLOAD_IDX *2 +: 1];
+assign s_axi_rdma_send_write_payload_rdata             = axi_rdata[C_RDMA_SW_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_send_write_payload_rresp             = axi_rresp[C_RDMA_SW_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_send_write_payload_rlast             = axi_rlast[C_RDMA_SW_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_send_write_payload_rvalid            = axi_rvalid[C_RDMA_SW_PAYLOAD_IDX *1 +: 1];
+assign axi_rready [C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_rready;
+assign axi_arlock [C_RDMA_SW_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_send_write_payload_arlock;
+assign axi_arqos  [C_RDMA_SW_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_send_write_payload_arqos;
+
+// AXI slave signals for storing payload from RDMA read response
+//assign axi_awid   [C_RDMA_RSP_PAYLOAD_IDX*2 +: 2]       = {1'b0, s_axi_rdma_rsp_payload_awid};
+assign axi_awid   [C_RDMA_RSP_PAYLOAD_IDX*2 +: 2]       = s_axi_rdma_rsp_payload_awvalid ? 2'd1 : 2'd0;
+assign axi_awaddr [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_awaddr;
+assign axi_awqos  [C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_awqos;
+assign axi_awlen  [C_RDMA_RSP_PAYLOAD_IDX *8 +: 8]      = s_axi_rdma_rsp_payload_awlen;
+assign axi_awsize [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_awsize;
+assign axi_awburst[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_rsp_payload_awburst;
+assign axi_awcache[C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_awcache;
+assign axi_awprot [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_awprot;
+assign axi_awvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_awvalid;
+assign s_axi_rdma_rsp_payload_awready                   = axi_awready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign axi_wdata  [C_RDMA_RSP_PAYLOAD_IDX *512 +: 512]  = s_axi_rdma_rsp_payload_wdata;
+assign axi_wstrb  [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_wstrb;
+assign axi_wlast  [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_wlast;
+assign axi_wvalid [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_wvalid;
+assign s_axi_rdma_rsp_payload_wready                    = axi_wready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign axi_awlock [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_awlock;
+assign s_axi_rdma_rsp_payload_bid                       = axi_bid[C_RDMA_RSP_PAYLOAD_IDX *2 +: 1];
+assign s_axi_rdma_rsp_payload_bresp                     = axi_bresp[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_rsp_payload_bvalid                    = axi_bvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign axi_bready [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_bready;
+//assign axi_arid   [C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = {1'b0, s_axi_rdma_rsp_payload_arid};
+assign axi_arid   [C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_rsp_payload_arvalid ? 2'd1 : 2'd0;
+assign axi_araddr [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_araddr;
+assign axi_arlen  [C_RDMA_RSP_PAYLOAD_IDX *8  +: 8]     = s_axi_rdma_rsp_payload_arlen;
+assign axi_arsize [C_RDMA_RSP_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_rsp_payload_arsize;
+assign axi_arburst[C_RDMA_RSP_PAYLOAD_IDX *2  +: 2]     = s_axi_rdma_rsp_payload_arburst;
+assign axi_arcache[C_RDMA_RSP_PAYLOAD_IDX *4  +: 4]     = s_axi_rdma_rsp_payload_arcache;
+assign axi_arprot [C_RDMA_RSP_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_rsp_payload_arprot;
+assign axi_arvalid[C_RDMA_RSP_PAYLOAD_IDX *1  +: 1]     = s_axi_rdma_rsp_payload_arvalid;
+assign s_axi_rdma_rsp_payload_arready                   = axi_arready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_rsp_payload_rid                       = axi_rid[C_RDMA_RSP_PAYLOAD_IDX *2 +: 1];
+assign s_axi_rdma_rsp_payload_rdata                     = axi_rdata[C_RDMA_RSP_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_rsp_payload_rresp                     = axi_rresp[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_rsp_payload_rlast                     = axi_rlast[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_rsp_payload_rvalid                    = axi_rvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign axi_rready [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_rready;
+assign axi_arlock [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_arlock;
+assign axi_arqos  [C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_arqos;
+
+// AXI slave signals for data access from qdma mm channel
+//assign axi_awid   [C_QDMA_MM_IDX*2 +: 2]                = s_axi_qdma_mm_awid[1:0];
+assign axi_awid   [C_QDMA_MM_IDX*2 +: 2]                = s_axi_qdma_mm_awvalid ? 2'd2 : 2'd0;
+assign axi_awaddr [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_awaddr;
+assign axi_awqos  [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_awqos;
+assign axi_awlen  [C_QDMA_MM_IDX *8 +: 8]               = s_axi_qdma_mm_awlen;
+assign axi_awsize [C_QDMA_MM_IDX *3 +: 3]               = s_axi_qdma_mm_awsize;
+assign axi_awburst[C_QDMA_MM_IDX *2 +: 2]               = s_axi_qdma_mm_awburst;
+assign axi_awcache[C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_awcache;
+assign axi_awprot [C_QDMA_MM_IDX *3 +: 3]               = s_axi_qdma_mm_awprot;
+assign axi_awvalid[C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_awvalid;
+assign s_axi_qdma_mm_awready                            = axi_awready[C_QDMA_MM_IDX *1 +: 1];
+assign axi_wdata  [C_QDMA_MM_IDX *512 +: 512]           = s_axi_qdma_mm_wdata;
+assign axi_wstrb  [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_wstrb;
+assign axi_wlast  [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_wlast;
+assign axi_wvalid [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_wvalid;
+assign s_axi_qdma_mm_wready                             = axi_wready[C_QDMA_MM_IDX *1 +: 1];
+assign axi_awlock [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_awlock;
+assign s_axi_qdma_mm_bid                                = {2'd0, axi_bid[C_QDMA_MM_IDX *2 +: 2]};
+assign s_axi_qdma_mm_bresp                              = axi_bresp[C_QDMA_MM_IDX *2 +: 2];
+assign s_axi_qdma_mm_bvalid                             = axi_bvalid[C_QDMA_MM_IDX *1 +: 1];
+assign axi_bready [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_bready;
+//assign axi_arid   [C_QDMA_MM_IDX *2 +: 2]               = s_axi_qdma_mm_arid[1:0];
+assign axi_arid   [C_QDMA_MM_IDX *2 +: 2]               = s_axi_qdma_mm_arvalid ? 2'd2 : 2'd0;
+assign axi_araddr [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_araddr;
+assign axi_arlen  [C_QDMA_MM_IDX *8  +: 8]              = s_axi_qdma_mm_arlen;
+assign axi_arsize [C_QDMA_MM_IDX *3  +: 3]              = s_axi_qdma_mm_arsize;
+assign axi_arburst[C_QDMA_MM_IDX *2  +: 2]              = s_axi_qdma_mm_arburst;
+assign axi_arcache[C_QDMA_MM_IDX *4  +: 4]              = s_axi_qdma_mm_arcache;
+assign axi_arprot [C_QDMA_MM_IDX *3  +: 3]              = s_axi_qdma_mm_arprot;
+assign axi_arvalid[C_QDMA_MM_IDX *1  +: 1]              = s_axi_qdma_mm_arvalid;
+assign s_axi_qdma_mm_arready                            = axi_arready[C_QDMA_MM_IDX *1 +: 1];
+assign s_axi_qdma_mm_rid                                = {2'd0, axi_rid[C_QDMA_MM_IDX *2 +: 2]};
+assign s_axi_qdma_mm_rdata                              = axi_rdata[C_QDMA_MM_IDX *512 +: 512];
+assign s_axi_qdma_mm_rresp                              = axi_rresp[C_QDMA_MM_IDX *2 +: 2];
+assign s_axi_qdma_mm_rlast                              = axi_rlast[C_QDMA_MM_IDX *1 +: 1];
+assign s_axi_qdma_mm_rvalid                             = axi_rvalid[C_QDMA_MM_IDX *1 +: 1];
+assign axi_rready [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_rready;
+assign axi_arlock [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_arlock;
+assign axi_arqos  [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_arqos;
+
+// AXI slave signals for data access from compute logic
+//assign axi_awid   [C_COMPUTE_LOGIC_IDX *2 +: 2]      = {1'b0, s_axi_compute_logic_awid};
+assign axi_awid   [C_COMPUTE_LOGIC_IDX *2 +: 2]      = s_axi_compute_logic_awvalid ? 2'd3 : 2'd0;
+assign axi_awaddr [C_COMPUTE_LOGIC_IDX *64 +: 64]    = s_axi_compute_logic_awaddr;
+assign axi_awqos  [C_COMPUTE_LOGIC_IDX *4 +: 4]      = s_axi_compute_logic_awqos;
+assign axi_awlen  [C_COMPUTE_LOGIC_IDX *8 +: 8]      = s_axi_compute_logic_awlen;
+assign axi_awsize [C_COMPUTE_LOGIC_IDX *3 +: 3]      = s_axi_compute_logic_awsize;
+assign axi_awburst[C_COMPUTE_LOGIC_IDX *2 +: 2]      = s_axi_compute_logic_awburst;
+assign axi_awcache[C_COMPUTE_LOGIC_IDX *4 +: 4]      = s_axi_compute_logic_awcache;
+assign axi_awprot [C_COMPUTE_LOGIC_IDX *3 +: 3]      = s_axi_compute_logic_awprot;
+assign axi_awvalid[C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_awvalid;
+assign s_axi_compute_logic_awready                   = axi_awready[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_wdata  [C_COMPUTE_LOGIC_IDX *512 +: 512]  = s_axi_compute_logic_wdata;
+assign axi_wstrb  [C_COMPUTE_LOGIC_IDX *64 +: 64]    = s_axi_compute_logic_wstrb;
+assign axi_wlast  [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_wlast;
+assign axi_wvalid [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_wvalid;
+assign s_axi_compute_logic_wready                    = axi_wready[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_awlock [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_awlock;
+assign s_axi_compute_logic_bid                       = axi_bid[C_COMPUTE_LOGIC_IDX *2 +: 1];
+assign s_axi_compute_logic_bresp                     = axi_bresp[C_COMPUTE_LOGIC_IDX *2 +: 2];
+assign s_axi_compute_logic_bvalid                    = axi_bvalid[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_bready [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_bready;
+//assign axi_arid   [C_COMPUTE_LOGIC_IDX *2 +: 2]      = {1'b0, s_axi_compute_logic_arid};
+assign axi_arid   [C_COMPUTE_LOGIC_IDX *2 +: 2]      = s_axi_compute_logic_arvalid ? 2'd3 : 2'd0;
+assign axi_araddr [C_COMPUTE_LOGIC_IDX *64 +: 64]    = s_axi_compute_logic_araddr;
+assign axi_arlen  [C_COMPUTE_LOGIC_IDX *8  +: 8]     = s_axi_compute_logic_arlen;
+assign axi_arsize [C_COMPUTE_LOGIC_IDX *3  +: 3]     = s_axi_compute_logic_arsize;
+assign axi_arburst[C_COMPUTE_LOGIC_IDX *2  +: 2]     = s_axi_compute_logic_arburst;
+assign axi_arcache[C_COMPUTE_LOGIC_IDX *4  +: 4]     = s_axi_compute_logic_arcache;
+assign axi_arprot [C_COMPUTE_LOGIC_IDX *3  +: 3]     = s_axi_compute_logic_arprot;
+assign axi_arvalid[C_COMPUTE_LOGIC_IDX *1  +: 1]     = s_axi_compute_logic_arvalid;
+assign s_axi_compute_logic_arready                   = axi_arready[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign s_axi_compute_logic_rid                       = axi_rid[C_COMPUTE_LOGIC_IDX *2 +: 1];
+assign s_axi_compute_logic_rdata                     = axi_rdata[C_COMPUTE_LOGIC_IDX *512 +: 512];
+assign s_axi_compute_logic_rresp                     = axi_rresp[C_COMPUTE_LOGIC_IDX *2 +: 2];
+assign s_axi_compute_logic_rlast                     = axi_rlast[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign s_axi_compute_logic_rvalid                    = axi_rvalid[C_COMPUTE_LOGIC_IDX *1 +: 1];
+assign axi_rready [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_rready;
+assign axi_arlock [C_COMPUTE_LOGIC_IDX *1 +: 1]      = s_axi_compute_logic_arlock;
+assign axi_arqos  [C_COMPUTE_LOGIC_IDX *4 +: 4]      = s_axi_compute_logic_arqos;
+
+dev_mem_axi_crossbar dev_mem_axi_crossbar_inst (
+  // Master interface only has 2-bit ID width
+  .m_axi_awaddr    (m_axi_dev_mem_awaddr),
+  .m_axi_awprot    (m_axi_dev_mem_awprot),
+  .m_axi_awvalid   (m_axi_dev_mem_awvalid),
+  .m_axi_awready   (m_axi_dev_mem_awready),
+  .m_axi_awsize    (m_axi_dev_mem_awsize),
+  .m_axi_awburst   (m_axi_dev_mem_awburst),
+  .m_axi_awcache   (m_axi_dev_mem_awcache),
+  .m_axi_awlen     (m_axi_dev_mem_awlen),
+  .m_axi_awlock    (m_axi_dev_mem_awlock),
+  .m_axi_awqos     (m_axi_dev_mem_awqos),
+  .m_axi_awregion  (m_axi_dev_mem_awregion),
+  .m_axi_awid      (m_axi_dev_mem_awid),
+  .m_axi_wdata     (m_axi_dev_mem_wdata),
+  .m_axi_wstrb     (m_axi_dev_mem_wstrb),
+  .m_axi_wvalid    (m_axi_dev_mem_wvalid),
+  .m_axi_wready    (m_axi_dev_mem_wready),
+  .m_axi_wlast     (m_axi_dev_mem_wlast),
+  .m_axi_bresp     (m_axi_dev_mem_bresp),
+  .m_axi_bvalid    (m_axi_dev_mem_bvalid),
+  .m_axi_bready    (m_axi_dev_mem_bready),
+  .m_axi_bid       (m_axi_dev_mem_bid),
+  .m_axi_araddr    (m_axi_dev_mem_araddr),
+  .m_axi_arprot    (m_axi_dev_mem_arprot),
+  .m_axi_arvalid   (m_axi_dev_mem_arvalid),
+  .m_axi_arready   (m_axi_dev_mem_arready),
+  .m_axi_arsize    (m_axi_dev_mem_arsize),
+  .m_axi_arburst   (m_axi_dev_mem_arburst),
+  .m_axi_arcache   (m_axi_dev_mem_arcache),
+  .m_axi_arlock    (m_axi_dev_mem_arlock),
+  .m_axi_arlen     (m_axi_dev_mem_arlen),
+  .m_axi_arqos     (m_axi_dev_mem_arqos),
+  .m_axi_arregion  (m_axi_dev_mem_arregion),
+  .m_axi_arid      (m_axi_dev_mem_arid),
+  .m_axi_rdata     (m_axi_dev_mem_rdata),
+  .m_axi_rresp     (m_axi_dev_mem_rresp),
+  .m_axi_rvalid    (m_axi_dev_mem_rvalid),
+  .m_axi_rready    (m_axi_dev_mem_rready),
+  .m_axi_rlast     (m_axi_dev_mem_rlast),
+  .m_axi_rid       (m_axi_dev_mem_rid),
+
+  // Slave interface has 8-bit ID width
+  .s_axi_awid      (axi_awid),
+  .s_axi_awaddr    (axi_awaddr),
+  .s_axi_awqos     (axi_awqos),
+  .s_axi_awlen     (axi_awlen),
+  .s_axi_awsize    (axi_awsize),
+  .s_axi_awburst   (axi_awburst),
+  .s_axi_awcache   (axi_awcache),
+  .s_axi_awprot    (axi_awprot),
+  .s_axi_awvalid   (axi_awvalid),
+  .s_axi_awready   (axi_awready),
+  .s_axi_wdata     (axi_wdata),
+  .s_axi_wstrb     (axi_wstrb),
+  .s_axi_wlast     (axi_wlast),
+  .s_axi_wvalid    (axi_wvalid),
+  .s_axi_wready    (axi_wready),
+  .s_axi_awlock    (axi_awlock),
+  .s_axi_bid       (axi_bid),
+  .s_axi_bresp     (axi_bresp),
+  .s_axi_bvalid    (axi_bvalid),
+  .s_axi_bready    (axi_bready),
+  .s_axi_arid      (axi_arid),
+  .s_axi_araddr    (axi_araddr),
+  .s_axi_arlen     (axi_arlen),
+  .s_axi_arsize    (axi_arsize),
+  .s_axi_arburst   (axi_arburst),
+  .s_axi_arcache   (axi_arcache),
+  .s_axi_arprot    (axi_arprot),
+  .s_axi_arvalid   (axi_arvalid),
+  .s_axi_arready   (axi_arready),
+  .s_axi_rid       (axi_rid),
+  .s_axi_rdata     (axi_rdata),
+  .s_axi_rresp     (axi_rresp),
+  .s_axi_rlast     (axi_rlast),
+  .s_axi_rvalid    (axi_rvalid),
+  .s_axi_rready    (axi_rready),
+  .s_axi_arlock    (axi_arlock),
+  .s_axi_arqos     (axi_arqos),
+
+  .aclk   (axis_aclk),
+  .aresetn(axis_arestn)
+);
+
+endmodule: axi_interconnect_to_dev_mem
\ No newline at end of file
diff --git a/src/utility/axi_interconnect_to_sys_mem.sv b/src/utility/axi_interconnect_to_sys_mem.sv
new file mode 100644
index 0000000..2cc991c
--- /dev/null
+++ b/src/utility/axi_interconnect_to_sys_mem.sv
@@ -0,0 +1,432 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module axi_interconnect_to_sys_mem #(
+  parameter C_AXI_DATA_WIDTH = 512,
+  parameter C_AXI_ADDR_WIDTH = 64
+) (
+  input             s_axi_rdma_get_wqe_awid,
+  input    [63 : 0] s_axi_rdma_get_wqe_awaddr,
+  input     [3 : 0] s_axi_rdma_get_wqe_awqos,
+  input     [7 : 0] s_axi_rdma_get_wqe_awlen,
+  input     [2 : 0] s_axi_rdma_get_wqe_awsize,
+  input     [1 : 0] s_axi_rdma_get_wqe_awburst,
+  input     [3 : 0] s_axi_rdma_get_wqe_awcache,
+  input     [2 : 0] s_axi_rdma_get_wqe_awprot,
+  input             s_axi_rdma_get_wqe_awvalid,
+  output            s_axi_rdma_get_wqe_awready,
+  input   [511 : 0] s_axi_rdma_get_wqe_wdata,
+  input    [63 : 0] s_axi_rdma_get_wqe_wstrb,
+  input             s_axi_rdma_get_wqe_wlast,
+  input             s_axi_rdma_get_wqe_wvalid,
+  output            s_axi_rdma_get_wqe_wready,
+  input             s_axi_rdma_get_wqe_awlock,
+  output            s_axi_rdma_get_wqe_bid,
+  output    [1 : 0] s_axi_rdma_get_wqe_bresp,
+  output            s_axi_rdma_get_wqe_bvalid,
+  input             s_axi_rdma_get_wqe_bready,
+  input             s_axi_rdma_get_wqe_arid,
+  input    [63 : 0] s_axi_rdma_get_wqe_araddr,
+  input     [7 : 0] s_axi_rdma_get_wqe_arlen,
+  input     [2 : 0] s_axi_rdma_get_wqe_arsize,
+  input     [1 : 0] s_axi_rdma_get_wqe_arburst,
+  input     [3 : 0] s_axi_rdma_get_wqe_arcache,
+  input     [2 : 0] s_axi_rdma_get_wqe_arprot,
+  input             s_axi_rdma_get_wqe_arvalid,
+  output            s_axi_rdma_get_wqe_arready,
+  output            s_axi_rdma_get_wqe_rid,
+  output  [511 : 0] s_axi_rdma_get_wqe_rdata,
+  output    [1 : 0] s_axi_rdma_get_wqe_rresp,
+  output            s_axi_rdma_get_wqe_rlast,
+  output            s_axi_rdma_get_wqe_rvalid,
+  input             s_axi_rdma_get_wqe_rready,
+  input             s_axi_rdma_get_wqe_arlock,
+  input       [3:0] s_axi_rdma_get_wqe_arqos,
+
+  input     [3 : 0] s_axi_rdma_get_payload_awid,
+  input    [63 : 0] s_axi_rdma_get_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_get_payload_awqos,
+  input     [7 : 0] s_axi_rdma_get_payload_awlen,
+  input     [2 : 0] s_axi_rdma_get_payload_awsize,
+  input     [1 : 0] s_axi_rdma_get_payload_awburst,
+  input     [3 : 0] s_axi_rdma_get_payload_awcache,
+  input     [2 : 0] s_axi_rdma_get_payload_awprot,
+  input             s_axi_rdma_get_payload_awvalid,
+  output            s_axi_rdma_get_payload_awready,
+  input   [511 : 0] s_axi_rdma_get_payload_wdata,
+  input    [63 : 0] s_axi_rdma_get_payload_wstrb,
+  input             s_axi_rdma_get_payload_wlast,
+  input             s_axi_rdma_get_payload_wvalid,
+  output            s_axi_rdma_get_payload_wready,
+  input             s_axi_rdma_get_payload_awlock,
+  output    [3 : 0] s_axi_rdma_get_payload_bid,
+  output    [1 : 0] s_axi_rdma_get_payload_bresp,
+  output            s_axi_rdma_get_payload_bvalid,
+  input             s_axi_rdma_get_payload_bready,
+  input     [3 : 0] s_axi_rdma_get_payload_arid,
+  input    [63 : 0] s_axi_rdma_get_payload_araddr,
+  input     [7 : 0] s_axi_rdma_get_payload_arlen,
+  input     [2 : 0] s_axi_rdma_get_payload_arsize,
+  input     [1 : 0] s_axi_rdma_get_payload_arburst,
+  input     [3 : 0] s_axi_rdma_get_payload_arcache,
+  input     [2 : 0] s_axi_rdma_get_payload_arprot,
+  input             s_axi_rdma_get_payload_arvalid,
+  output            s_axi_rdma_get_payload_arready,
+  output    [3 : 0] s_axi_rdma_get_payload_rid,
+  output  [511 : 0] s_axi_rdma_get_payload_rdata,
+  output    [1 : 0] s_axi_rdma_get_payload_rresp,
+  output            s_axi_rdma_get_payload_rlast,
+  output            s_axi_rdma_get_payload_rvalid,
+  input             s_axi_rdma_get_payload_rready,
+  input             s_axi_rdma_get_payload_arlock,
+  input       [3:0] s_axi_rdma_get_payload_arqos,
+
+  input             s_axi_rdma_completion_awid,
+  input    [63 : 0] s_axi_rdma_completion_awaddr,
+  input     [3 : 0] s_axi_rdma_completion_awqos,
+  input     [7 : 0] s_axi_rdma_completion_awlen,
+  input     [2 : 0] s_axi_rdma_completion_awsize,
+  input     [1 : 0] s_axi_rdma_completion_awburst,
+  input     [3 : 0] s_axi_rdma_completion_awcache,
+  input     [2 : 0] s_axi_rdma_completion_awprot,
+  input             s_axi_rdma_completion_awvalid,
+  output            s_axi_rdma_completion_awready,
+  input   [511 : 0] s_axi_rdma_completion_wdata,
+  input    [63 : 0] s_axi_rdma_completion_wstrb,
+  input             s_axi_rdma_completion_wlast,
+  input             s_axi_rdma_completion_wvalid,
+  output            s_axi_rdma_completion_wready,
+  input             s_axi_rdma_completion_awlock,
+  output            s_axi_rdma_completion_bid,
+  output    [1 : 0] s_axi_rdma_completion_bresp,
+  output            s_axi_rdma_completion_bvalid,
+  input             s_axi_rdma_completion_bready,
+  input             s_axi_rdma_completion_arid,
+  input    [63 : 0] s_axi_rdma_completion_araddr,
+  input     [7 : 0] s_axi_rdma_completion_arlen,
+  input     [2 : 0] s_axi_rdma_completion_arsize,
+  input     [1 : 0] s_axi_rdma_completion_arburst,
+  input     [3 : 0] s_axi_rdma_completion_arcache,
+  input     [2 : 0] s_axi_rdma_completion_arprot,
+  input             s_axi_rdma_completion_arvalid,
+  output            s_axi_rdma_completion_arready,
+  output            s_axi_rdma_completion_rid,
+  output  [511 : 0] s_axi_rdma_completion_rdata,
+  output    [1 : 0] s_axi_rdma_completion_rresp,
+  output            s_axi_rdma_completion_rlast,
+  output            s_axi_rdma_completion_rvalid,
+  input             s_axi_rdma_completion_rready,
+  input             s_axi_rdma_completion_arlock,
+  input      [3:0]  s_axi_rdma_completion_arqos,
+
+  output      [1:0] m_axi_sys_mem_awid,
+  output     [63:0] m_axi_sys_mem_awaddr,
+  output      [7:0] m_axi_sys_mem_awlen,
+  output      [2:0] m_axi_sys_mem_awsize,
+  output      [1:0] m_axi_sys_mem_awburst,
+  output            m_axi_sys_mem_awlock,
+  output      [3:0] m_axi_sys_mem_awqos,
+  output      [3:0] m_axi_sys_mem_awregion,
+  output      [3:0] m_axi_sys_mem_awcache,
+  output      [2:0] m_axi_sys_mem_awprot,
+  output            m_axi_sys_mem_awvalid,
+  input             m_axi_sys_mem_awready,
+  output    [511:0] m_axi_sys_mem_wdata,
+  output     [63:0] m_axi_sys_mem_wstrb,
+  output            m_axi_sys_mem_wlast,
+  output            m_axi_sys_mem_wvalid,
+  input             m_axi_sys_mem_wready,
+  input       [1:0] m_axi_sys_mem_bid,
+  input       [1:0] m_axi_sys_mem_bresp,
+  input             m_axi_sys_mem_bvalid,
+  output            m_axi_sys_mem_bready,
+  output      [1:0] m_axi_sys_mem_arid,
+  output     [63:0] m_axi_sys_mem_araddr,
+  output      [7:0] m_axi_sys_mem_arlen,
+  output      [2:0] m_axi_sys_mem_arsize,
+  output      [1:0] m_axi_sys_mem_arburst,
+  output            m_axi_sys_mem_arlock,
+  output      [3:0] m_axi_sys_mem_arqos,
+  output      [3:0] m_axi_sys_mem_arregion,
+  output      [3:0] m_axi_sys_mem_arcache,
+  output      [2:0] m_axi_sys_mem_arprot,
+  output            m_axi_sys_mem_arvalid,
+  input             m_axi_sys_mem_arready,
+  input       [1:0] m_axi_sys_mem_rid,
+  input     [511:0] m_axi_sys_mem_rdata,
+  input       [1:0] m_axi_sys_mem_rresp,
+  input             m_axi_sys_mem_rlast,
+  input             m_axi_sys_mem_rvalid,
+  output            m_axi_sys_mem_rready,
+
+  input axis_aclk,
+  input axis_arestn
+);
+
+localparam C_NUM_MASTERS = 3;
+
+localparam C_RDMA_GET_WQE_IDX     = 0;
+localparam C_RDMA_GET_PAYLOAD_IDX = 1;
+localparam C_RDMA_COMPLETION_IDX  = 2;
+
+logic   [C_NUM_MASTERS*2-1 : 0] axi_awid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_awaddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_awlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_awburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_awlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_awvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_awready;
+logic [C_NUM_MASTERS*512-1 : 0] axi_wdata;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_wstrb;
+logic     [C_NUM_MASTERS-1 : 0] axi_wlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_wvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_wready;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_bid;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_bresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_bvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_bready;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_arid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_araddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_arlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_arburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_arlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_arvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_arready;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_rid;
+logic [C_NUM_MASTERS*512-1 : 0] axi_rdata;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_rresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_rlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_rvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_rready;
+
+// AXI slave signals for getting wqe from system memory
+//assign axi_awid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = {1'b0, s_axi_rdma_get_wqe_awid};
+assign axi_awid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = s_axi_rdma_get_wqe_awvalid ? 2'd0 : 2'd0;
+assign axi_awaddr [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_awaddr;
+assign axi_awqos  [C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_awqos;
+assign axi_awlen  [C_RDMA_GET_WQE_IDX *8 +: 8]         = s_axi_rdma_get_wqe_awlen;
+assign axi_awsize [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awsize;
+assign axi_awburst[C_RDMA_GET_WQE_IDX *2 +: 2]         = s_axi_rdma_get_wqe_awburst;
+assign axi_awcache[C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_awcache;
+assign axi_awprot [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awprot;
+assign axi_awvalid[C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_awvalid;
+assign s_axi_rdma_get_wqe_awready                      = axi_awready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign axi_wdata  [C_RDMA_GET_WQE_IDX *512 +: 512]     = s_axi_rdma_get_wqe_wdata;
+assign axi_wstrb  [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_wstrb;
+assign axi_wlast  [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_wlast;
+assign axi_wvalid [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_wvalid;
+assign s_axi_rdma_get_wqe_wready                       = axi_wready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign axi_awlock [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_awlock;
+assign s_axi_rdma_get_wqe_bid                          = axi_bid[C_RDMA_GET_WQE_IDX *2 +: 1];
+assign s_axi_rdma_get_wqe_bresp                        = axi_bresp[C_RDMA_GET_WQE_IDX *2 +: 2];
+assign s_axi_rdma_get_wqe_bvalid                       = axi_bvalid[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign axi_bready [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_bready;
+//assign axi_arid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = {1'b0, s_axi_rdma_get_wqe_arid};
+assign axi_arid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = s_axi_rdma_get_wqe_arvalid ? 2'd0 : 2'd0;
+assign axi_araddr [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_araddr;
+assign axi_arlen  [C_RDMA_GET_WQE_IDX *8  +: 8]        = s_axi_rdma_get_wqe_arlen;
+assign axi_arsize [C_RDMA_GET_WQE_IDX *3  +: 3]        = s_axi_rdma_get_wqe_arsize;
+assign axi_arburst[C_RDMA_GET_WQE_IDX *2  +: 2]        = s_axi_rdma_get_wqe_arburst;
+assign axi_arcache[C_RDMA_GET_WQE_IDX *4  +: 4]        = s_axi_rdma_get_wqe_arcache;
+assign axi_arprot [C_RDMA_GET_WQE_IDX *3  +: 3]        = s_axi_rdma_get_wqe_arprot;
+assign axi_arvalid[C_RDMA_GET_WQE_IDX *1  +: 1]        = s_axi_rdma_get_wqe_arvalid;
+assign s_axi_rdma_get_wqe_arready                      = axi_arready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rdma_get_wqe_rid                          = axi_rid[C_RDMA_GET_WQE_IDX *2 +: 1];
+assign s_axi_rdma_get_wqe_rdata                        = axi_rdata[C_RDMA_GET_WQE_IDX *512 +: 512];
+assign s_axi_rdma_get_wqe_rresp                        = axi_rresp[C_RDMA_GET_WQE_IDX *2 +: 2];
+assign s_axi_rdma_get_wqe_rlast                        = axi_rlast[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rdma_get_wqe_rvalid                       = axi_rvalid[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign axi_rready [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_rready;
+assign axi_arlock [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_arlock;
+assign axi_arqos  [C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_arqos;
+
+// AXI slave signals for getting payload from system memory
+//assign axi_awid   [C_RDMA_GET_PAYLOAD_IDX*2 +: 2]      = {1'b0, s_axi_rdma_get_payload_awid};
+assign axi_awid   [C_RDMA_GET_PAYLOAD_IDX*2 +: 2]      = s_axi_rdma_get_payload_awvalid ? 2'd1 : 2'd0;
+assign axi_awaddr [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_awaddr;
+assign axi_awqos  [C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_awqos;
+assign axi_awlen  [C_RDMA_GET_PAYLOAD_IDX *8 +: 8]     = s_axi_rdma_get_payload_awlen;
+assign axi_awsize [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_awsize;
+assign axi_awburst[C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = s_axi_rdma_get_payload_awburst;
+assign axi_awcache[C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_awcache;
+assign axi_awprot [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_awprot;
+assign axi_awvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_awvalid;
+assign s_axi_rdma_get_payload_awready                  = axi_awready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign axi_wdata  [C_RDMA_GET_PAYLOAD_IDX *512 +: 512] = s_axi_rdma_get_payload_wdata;
+assign axi_wstrb  [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_wstrb;
+assign axi_wlast  [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_wlast;
+assign axi_wvalid [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_wvalid;
+assign s_axi_rdma_get_payload_wready                   = axi_wready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign axi_awlock [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_awlock;
+assign s_axi_rdma_get_payload_bid                      = axi_bid[C_RDMA_GET_PAYLOAD_IDX *2 +: 1];
+assign s_axi_rdma_get_payload_bresp                    = axi_bresp[C_RDMA_GET_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_get_payload_bvalid                   = axi_bvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign axi_bready [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_bready;
+//assign axi_arid   [C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = {1'b0, s_axi_rdma_get_payload_arid};
+assign axi_arid   [C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = s_axi_rdma_get_payload_arvalid ? 2'd1: 2'd0;
+assign axi_araddr [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_araddr;
+assign axi_arlen  [C_RDMA_GET_PAYLOAD_IDX *8  +: 8]    = s_axi_rdma_get_payload_arlen;
+assign axi_arsize [C_RDMA_GET_PAYLOAD_IDX *3  +: 3]    = s_axi_rdma_get_payload_arsize;
+assign axi_arburst[C_RDMA_GET_PAYLOAD_IDX *2  +: 2]    = s_axi_rdma_get_payload_arburst;
+assign axi_arcache[C_RDMA_GET_PAYLOAD_IDX *4  +: 4]    = s_axi_rdma_get_payload_arcache;
+assign axi_arprot [C_RDMA_GET_PAYLOAD_IDX *3  +: 3]    = s_axi_rdma_get_payload_arprot;
+assign axi_arvalid[C_RDMA_GET_PAYLOAD_IDX *1  +: 1]    = s_axi_rdma_get_payload_arvalid;
+assign s_axi_rdma_get_payload_arready                  = axi_arready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_get_payload_rid                      = axi_rid[C_RDMA_GET_PAYLOAD_IDX *2 +: 1];
+assign s_axi_rdma_get_payload_rdata                    = axi_rdata[C_RDMA_GET_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_get_payload_rresp                    = axi_rresp[C_RDMA_GET_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_get_payload_rlast                    = axi_rlast[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_get_payload_rvalid                   = axi_rvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign axi_rready [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_rready;
+assign axi_arlock [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_arlock;
+assign axi_arqos  [C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_arqos;
+
+// AXI slave signals for data access from qdma mm channel
+//assign axi_awid   [C_RDMA_COMPLETION_IDX*2 +: 2]       = {1'b0, s_axi_rdma_completion_awid};
+assign axi_awid   [C_RDMA_COMPLETION_IDX*2 +: 2]       = s_axi_rdma_completion_awvalid ? 2'd2 : 2'd0;
+assign axi_awaddr [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_awaddr;
+assign axi_awqos  [C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_awqos;
+assign axi_awlen  [C_RDMA_COMPLETION_IDX *8 +: 8]      = s_axi_rdma_completion_awlen;
+assign axi_awsize [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_awsize;
+assign axi_awburst[C_RDMA_COMPLETION_IDX *2 +: 2]      = s_axi_rdma_completion_awburst;
+assign axi_awcache[C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_awcache;
+assign axi_awprot [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_awprot;
+assign axi_awvalid[C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_awvalid;
+assign s_axi_rdma_completion_awready                   = axi_awready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign axi_wdata  [C_RDMA_COMPLETION_IDX *512 +: 512]  = s_axi_rdma_completion_wdata;
+assign axi_wstrb  [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_wstrb;
+assign axi_wlast  [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_wlast;
+assign axi_wvalid [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_wvalid;
+assign s_axi_rdma_completion_wready                    = axi_wready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign axi_awlock [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_awlock;
+assign s_axi_rdma_completion_bid                       = axi_bid[C_RDMA_COMPLETION_IDX *2 +: 1];
+assign s_axi_rdma_completion_bresp                     = axi_bresp[C_RDMA_COMPLETION_IDX *2 +: 2];
+assign s_axi_rdma_completion_bvalid                    = axi_bvalid[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign axi_bready [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_bready;
+//assign axi_arid   [C_RDMA_COMPLETION_IDX *2 +: 2]      = {1'b0, s_axi_rdma_completion_arid};
+assign axi_arid   [C_RDMA_COMPLETION_IDX *2 +: 2]      = s_axi_rdma_completion_arvalid ? 2'd2 : 2'd0;
+assign axi_araddr [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_araddr;
+assign axi_arlen  [C_RDMA_COMPLETION_IDX *8  +: 8]     = s_axi_rdma_completion_arlen;
+assign axi_arsize [C_RDMA_COMPLETION_IDX *3  +: 3]     = s_axi_rdma_completion_arsize;
+assign axi_arburst[C_RDMA_COMPLETION_IDX *2  +: 2]     = s_axi_rdma_completion_arburst;
+assign axi_arcache[C_RDMA_COMPLETION_IDX *4  +: 4]     = s_axi_rdma_completion_arcache;
+assign axi_arprot [C_RDMA_COMPLETION_IDX *3  +: 3]     = s_axi_rdma_completion_arprot;
+assign axi_arvalid[C_RDMA_COMPLETION_IDX *1  +: 1]     = s_axi_rdma_completion_arvalid;
+assign s_axi_rdma_completion_arready                   = axi_arready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rdma_completion_rid                       = axi_rid[C_RDMA_COMPLETION_IDX *2 +: 1];
+assign s_axi_rdma_completion_rdata                     = axi_rdata[C_RDMA_COMPLETION_IDX *512 +: 512];
+assign s_axi_rdma_completion_rresp                     = axi_rresp[C_RDMA_COMPLETION_IDX *2 +: 2];
+assign s_axi_rdma_completion_rlast                     = axi_rlast[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rdma_completion_rvalid                    = axi_rvalid[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign axi_rready [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_rready;
+assign axi_arlock [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_arlock;
+assign axi_arqos  [C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_arqos;
+
+dev_mem_axi_crossbar dev_mem_axi_crossbar_inst (
+  .m_axi_awaddr    (m_axi_sys_mem_awaddr),
+  .m_axi_awprot    (m_axi_sys_mem_awprot),
+  .m_axi_awvalid   (m_axi_sys_mem_awvalid),
+  .m_axi_awready   (m_axi_sys_mem_awready),
+  .m_axi_awsize    (m_axi_sys_mem_awsize),
+  .m_axi_awburst   (m_axi_sys_mem_awburst),
+  .m_axi_awcache   (m_axi_sys_mem_awcache),
+  .m_axi_awlen     (m_axi_sys_mem_awlen),
+  .m_axi_awlock    (m_axi_sys_mem_awlock),
+  .m_axi_awqos     (m_axi_sys_mem_awqos),
+  .m_axi_awregion  (m_axi_sys_mem_awregion),
+  .m_axi_awid      (m_axi_sys_mem_awid),
+  .m_axi_wdata     (m_axi_sys_mem_wdata),
+  .m_axi_wstrb     (m_axi_sys_mem_wstrb),
+  .m_axi_wvalid    (m_axi_sys_mem_wvalid),
+  .m_axi_wready    (m_axi_sys_mem_wready),
+  .m_axi_wlast     (m_axi_sys_mem_wlast),
+  .m_axi_bresp     (m_axi_sys_mem_bresp),
+  .m_axi_bvalid    (m_axi_sys_mem_bvalid),
+  .m_axi_bready    (m_axi_sys_mem_bready),
+  .m_axi_bid       (m_axi_sys_mem_bid),
+  .m_axi_araddr    (m_axi_sys_mem_araddr),
+  .m_axi_arprot    (m_axi_sys_mem_arprot),
+  .m_axi_arvalid   (m_axi_sys_mem_arvalid),
+  .m_axi_arready   (m_axi_sys_mem_arready),
+  .m_axi_arsize    (m_axi_sys_mem_arsize),
+  .m_axi_arburst   (m_axi_sys_mem_arburst),
+  .m_axi_arcache   (m_axi_sys_mem_arcache),
+  .m_axi_arlock    (m_axi_sys_mem_arlock),
+  .m_axi_arlen     (m_axi_sys_mem_arlen),
+  .m_axi_arqos     (m_axi_sys_mem_arqos),
+  .m_axi_arregion  (m_axi_sys_mem_arregion),
+  .m_axi_arid      (m_axi_sys_mem_arid),
+  .m_axi_rdata     (m_axi_sys_mem_rdata),
+  .m_axi_rresp     (m_axi_sys_mem_rresp),
+  .m_axi_rvalid    (m_axi_sys_mem_rvalid),
+  .m_axi_rready    (m_axi_sys_mem_rready),
+  .m_axi_rlast     (m_axi_sys_mem_rlast),
+  .m_axi_rid       (m_axi_sys_mem_rid),
+
+  .s_axi_awid      (axi_awid),
+  .s_axi_awaddr    (axi_awaddr),
+  .s_axi_awqos     (axi_awqos),
+  .s_axi_awlen     (axi_awlen),
+  .s_axi_awsize    (axi_awsize),
+  .s_axi_awburst   (axi_awburst),
+  .s_axi_awcache   (axi_awcache),
+  .s_axi_awprot    (axi_awprot),
+  .s_axi_awvalid   (axi_awvalid),
+  .s_axi_awready   (axi_awready),
+  .s_axi_wdata     (axi_wdata),
+  .s_axi_wstrb     (axi_wstrb),
+  .s_axi_wlast     (axi_wlast),
+  .s_axi_wvalid    (axi_wvalid),
+  .s_axi_wready    (axi_wready),
+  .s_axi_awlock    (axi_awlock),
+  .s_axi_bid       (axi_bid),
+  .s_axi_bresp     (axi_bresp),
+  .s_axi_bvalid    (axi_bvalid),
+  .s_axi_bready    (axi_bready),
+  .s_axi_arid      (axi_arid),
+  .s_axi_araddr    (axi_araddr),
+  .s_axi_arlen     (axi_arlen),
+  .s_axi_arsize    (axi_arsize),
+  .s_axi_arburst   (axi_arburst),
+  .s_axi_arcache   (axi_arcache),
+  .s_axi_arprot    (axi_arprot),
+  .s_axi_arvalid   (axi_arvalid),
+  .s_axi_arready   (axi_arready),
+  .s_axi_rid       (axi_rid),
+  .s_axi_rdata     (axi_rdata),
+  .s_axi_rresp     (axi_rresp),
+  .s_axi_rlast     (axi_rlast),
+  .s_axi_rvalid    (axi_rvalid),
+  .s_axi_rready    (axi_rready),
+  .s_axi_arlock    (axi_arlock),
+  .s_axi_arqos     (axi_arqos),
+
+  .aclk   (axis_aclk),
+  .aresetn(axis_arestn)
+);
+
+endmodule: axi_interconnect_to_sys_mem
\ No newline at end of file
diff --git a/src/utility/axi_lite_slave.sv b/src/utility/axi_lite_slave.sv
index 4b63770..c30ef12 100644
--- a/src/utility/axi_lite_slave.sv
+++ b/src/utility/axi_lite_slave.sv
@@ -59,7 +59,7 @@ module axi_lite_slave #(
     .DATA_W        (32)
   ) axil_reg_inst (
     .s_axil_awvalid (s_axil_awvalid),
-    .s_axil_awaddr  (s_axil_awaddr),
+    .s_axil_awaddr  (s_axil_awaddr[REG_ADDR_W-1:0]),
     .s_axil_awready (s_axil_awready),
     .s_axil_wvalid  (s_axil_wvalid),
     .s_axil_wdata   (s_axil_wdata),
@@ -68,7 +68,7 @@ module axi_lite_slave #(
     .s_axil_bresp   (s_axil_bresp),
     .s_axil_bready  (s_axil_bready),
     .s_axil_arvalid (s_axil_arvalid),
-    .s_axil_araddr  (s_axil_araddr),
+    .s_axil_araddr  (s_axil_araddr[REG_ADDR_W-1:0]),
     .s_axil_arready (s_axil_arready),
     .s_axil_rvalid  (s_axil_rvalid),
     .s_axil_rdata   (s_axil_rdata),
diff --git a/src/utility/axi_stream_packet_buffer.sv b/src/utility/axi_stream_packet_buffer.sv
old mode 100644
new mode 100755
index aa33d14..4750d0b
--- a/src/utility/axi_stream_packet_buffer.sv
+++ b/src/utility/axi_stream_packet_buffer.sv
@@ -128,25 +128,13 @@ module axi_stream_packet_buffer #(
 
   // The `drop_busy` signal synchronizes with the packet stream `axis_*`.  When
   // asserted, the corresponding beat is not written into the RAM.
-  assign drop_busy = drop || drop_in_prog;
-
-  always @(posedge s_aclk) begin
-    if (~s_aresetn) begin
-      drop_in_prog <= 1'b0;
-    end
-    else if (s_axis_tvalid && s_axis_tlast && s_axis_tready) begin
-      drop_in_prog <= 1'b0;
-    end
-    else if (drop) begin
-      drop_in_prog <= 1'b1;
-    end
-  end
+  assign drop_busy = drop || dropped;
 
   always @(posedge s_aclk) begin
     if (~s_aresetn) begin
       dropped <= 1'b0;
     end
-    else if (s_axis_tvalid && s_axis_tlast && s_axis_tready && drop_in_prog) begin
+    else if (s_axis_tvalid && s_axis_tlast && s_axis_tready && drop) begin
       dropped <= 1'b1;
     end
     else begin
diff --git a/src/utility/vivado_ip/axi_clock_converter_for_mem_au250.tcl b/src/utility/vivado_ip/axi_clock_converter_for_mem_au250.tcl
new file mode 100755
index 0000000..e2139be
--- /dev/null
+++ b/src/utility/vivado_ip/axi_clock_converter_for_mem_au250.tcl
@@ -0,0 +1,34 @@
+# *************************************************************************
+#
+# Copyright 2023 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set axi_clock_converter axi_clock_converter_for_mem
+create_ip -name axi_clock_converter -vendor xilinx.com -library ip -module_name $axi_clock_converter -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.PROTOCOL {AXI4}
+    CONFIG.READ_WRITE_MODE {READ_WRITE}
+    CONFIG.ADDR_WIDTH {34}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {5}
+    CONFIG.AWUSER_WIDTH {0}
+    CONFIG.ARUSER_WIDTH {0}
+    CONFIG.RUSER_WIDTH {0}
+    CONFIG.WUSER_WIDTH {0}
+    CONFIG.BUSER_WIDTH {0}
+    CONFIG.ACLK_ASYNC {1}
+    CONFIG.SYNCHRONIZATION_STAGES {3}
+    CONFIG.ACLK_RATIO {1:2}
+} [get_ips $axi_clock_converter]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/dev_mem_3to1_axi_crossbar.tcl b/src/utility/vivado_ip/dev_mem_3to1_axi_crossbar.tcl
new file mode 100755
index 0000000..cd11cb6
--- /dev/null
+++ b/src/utility/vivado_ip/dev_mem_3to1_axi_crossbar.tcl
@@ -0,0 +1,42 @@
+# *************************************************************************
+#
+# Copyright 2022 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set device_memory_axi_crossbar dev_mem_3to1_axi_crossbar
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $device_memory_axi_crossbar -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.ADDR_RANGES {1}
+    CONFIG.NUM_SI {3}
+    CONFIG.NUM_MI {1}
+    CONFIG.ADDR_WIDTH {64}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {5}
+    CONFIG.S00_THREAD_ID_WIDTH {3}
+    CONFIG.S01_THREAD_ID_WIDTH {3}
+    CONFIG.S02_THREAD_ID_WIDTH {3}
+    CONFIG.S00_WRITE_ACCEPTANCE {8}
+    CONFIG.S01_WRITE_ACCEPTANCE {8}
+    CONFIG.S02_WRITE_ACCEPTANCE {8}
+    CONFIG.S00_READ_ACCEPTANCE {8}
+    CONFIG.S01_READ_ACCEPTANCE {8}
+    CONFIG.S02_READ_ACCEPTANCE {8}
+    CONFIG.M00_WRITE_ISSUING {16}
+    CONFIG.M00_READ_ISSUING {16}
+    CONFIG.S00_SINGLE_THREAD {0}
+    CONFIG.M00_A00_ADDR_WIDTH {64}
+} [get_ips $device_memory_axi_crossbar]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/dev_mem_axi_crossbar.tcl b/src/utility/vivado_ip/dev_mem_axi_crossbar.tcl
new file mode 100644
index 0000000..87ec612
--- /dev/null
+++ b/src/utility/vivado_ip/dev_mem_axi_crossbar.tcl
@@ -0,0 +1,42 @@
+# *************************************************************************
+#
+# Copyright 2022 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set device_memory_axi_crossbar dev_mem_axi_crossbar
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $device_memory_axi_crossbar -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.ADDR_RANGES {1}
+    CONFIG.NUM_SI {4}
+    CONFIG.NUM_MI {1}
+    CONFIG.ADDR_WIDTH {64}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {2}
+    CONFIG.S15_THREAD_ID_WIDTH {0}
+    CONFIG.S00_WRITE_ACCEPTANCE {8}
+    CONFIG.S01_WRITE_ACCEPTANCE {8}
+    CONFIG.S02_WRITE_ACCEPTANCE {8}
+    CONFIG.S03_WRITE_ACCEPTANCE {8}
+    CONFIG.S00_READ_ACCEPTANCE {8}
+    CONFIG.S01_READ_ACCEPTANCE {8}
+    CONFIG.S02_READ_ACCEPTANCE {8}
+    CONFIG.S03_READ_ACCEPTANCE {8}
+    CONFIG.M00_WRITE_ISSUING {16}
+    CONFIG.M00_READ_ISSUING {16}
+    CONFIG.S00_SINGLE_THREAD {0}
+    CONFIG.M00_A00_ADDR_WIDTH {64}
+} [get_ips $device_memory_axi_crossbar]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/sys_mem_5to2_axi_crossbar.tcl b/src/utility/vivado_ip/sys_mem_5to2_axi_crossbar.tcl
new file mode 100755
index 0000000..672b459
--- /dev/null
+++ b/src/utility/vivado_ip/sys_mem_5to2_axi_crossbar.tcl
@@ -0,0 +1,49 @@
+# *************************************************************************
+#
+# Copyright 2022 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set system_memory_axi_crossbar sys_mem_5to2_axi_crossbar
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $system_memory_axi_crossbar -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.ADDR_RANGES {1}
+    CONFIG.NUM_SI {5}
+    CONFIG.NUM_MI {2}
+    CONFIG.ADDR_WIDTH {64}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {3}
+    CONFIG.S15_THREAD_ID_WIDTH {0}
+    CONFIG.S00_WRITE_ACCEPTANCE {8}
+    CONFIG.S01_WRITE_ACCEPTANCE {8}
+    CONFIG.S02_WRITE_ACCEPTANCE {8}
+    CONFIG.S03_WRITE_ACCEPTANCE {8}
+    CONFIG.S04_WRITE_ACCEPTANCE {8}
+    CONFIG.S00_READ_ACCEPTANCE {8}
+    CONFIG.S01_READ_ACCEPTANCE {8}
+    CONFIG.S02_READ_ACCEPTANCE {8}
+    CONFIG.S03_READ_ACCEPTANCE {8}
+    CONFIG.S04_READ_ACCEPTANCE {8}
+    CONFIG.M00_WRITE_ISSUING {16}
+    CONFIG.M00_READ_ISSUING {16}
+    CONFIG.M01_WRITE_ISSUING {16}
+    CONFIG.M01_READ_ISSUING {16}
+    CONFIG.S00_SINGLE_THREAD {0}
+    CONFIG.M00_A00_ADDR_WIDTH {52}
+    CONFIG.M01_A00_ADDR_WIDTH {36}
+    CONFIG.M00_A00_BASE_ADDR {0x0000000000000000}
+    CONFIG.M01_A00_BASE_ADDR {0xa350000000000000}
+} [get_ips $system_memory_axi_crossbar]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/sys_mem_axi_crossbar.tcl b/src/utility/vivado_ip/sys_mem_axi_crossbar.tcl
new file mode 100644
index 0000000..61c3d41
--- /dev/null
+++ b/src/utility/vivado_ip/sys_mem_axi_crossbar.tcl
@@ -0,0 +1,42 @@
+# *************************************************************************
+#
+# Copyright 2022 Xilinx, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# *************************************************************************
+set system_memory_axi_crossbar sys_mem_axi_crossbar
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $system_memory_axi_crossbar -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.ADDR_RANGES {1}
+    CONFIG.NUM_SI {3}
+    CONFIG.NUM_MI {1}
+    CONFIG.ADDR_WIDTH {64}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {2}
+    CONFIG.S15_THREAD_ID_WIDTH {0}
+    CONFIG.S00_WRITE_ACCEPTANCE {8}
+    CONFIG.S01_WRITE_ACCEPTANCE {8}
+    CONFIG.S02_WRITE_ACCEPTANCE {8}
+    CONFIG.S03_WRITE_ACCEPTANCE {8}
+    CONFIG.S00_READ_ACCEPTANCE {8}
+    CONFIG.S01_READ_ACCEPTANCE {8}
+    CONFIG.S02_READ_ACCEPTANCE {8}
+    CONFIG.S03_READ_ACCEPTANCE {8}
+    CONFIG.M00_WRITE_ISSUING {16}
+    CONFIG.M00_READ_ISSUING {16}
+    CONFIG.S00_SINGLE_THREAD {0}
+    CONFIG.M00_A00_ADDR_WIDTH {64}
+} [get_ips $system_memory_axi_crossbar]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/vivado_ip.tcl b/src/utility/vivado_ip/vivado_ip.tcl
index 62f583e..76bfc67 100644
--- a/src/utility/vivado_ip/vivado_ip.tcl
+++ b/src/utility/vivado_ip/vivado_ip.tcl
@@ -1,6 +1,6 @@
 # *************************************************************************
 #
-# Copyright 2020 Xilinx, Inc.
+# Copyright 2023 Xilinx, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -18,4 +18,7 @@
 set ips {
     axi_stream_pipeline
     axi_lite_clock_converter
+    dev_mem_3to1_axi_crossbar
+    sys_mem_5to2_axi_crossbar
+    axi_clock_converter_for_mem
 }
